from telebot import TeleBot
from telebot.types import Message, CallbackQuery
import config
from database import Database
import keyboards
import re
import datetime
from typing import Dict, List, Optional, Any

db = Database()

# L∆∞u tr·∫°ng th√°i c·ªßa ng∆∞·ªùi d√πng
user_states = {}

def is_admin(user_id: int) -> bool:
    """Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† admin kh√¥ng"""
    return user_id in config.ADMIN_IDS

def register_handlers(bot: TeleBot) -> None:
    """ƒêƒÉng k√Ω t·∫•t c·∫£ c√°c handler cho bot"""
    
    # Command handlers
    bot.register_message_handler(lambda msg: start_command(bot, msg), commands=['start'])
    bot.register_message_handler(lambda msg: help_command(bot, msg), commands=['help'])
    bot.register_message_handler(lambda msg: dashboard_command(bot, msg), commands=['dashboard'])
    
    # Admin command handlers
    bot.register_message_handler(lambda msg: create_product_command(bot, msg), commands=['create_product'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: product_list_command(bot, msg), commands=['product_list'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: upload_product_command(bot, msg), commands=['upload_product'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: add_money_command(bot, msg), commands=['add_money'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: user_list_command(bot, msg), commands=['user_list'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: ban_user_command(bot, msg), commands=['ban_user'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: unban_user_command(bot, msg), commands=['unban_user'], func=lambda msg: is_admin(msg.from_user.id))
    
    # Callback query handlers
    bot.register_callback_query_handler(lambda call: handle_callback_query(bot, call), func=lambda call: True)
    
    # State handlers
    bot.register_message_handler(lambda msg: handle_state(bot, msg), content_types=['text'], func=lambda msg: msg.from_user.id in user_states)

def start_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /start"""
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i ch∆∞a
    user = db.get_user(user_id)
    if not user:
        # T·∫°o ng∆∞·ªùi d√πng m·ªõi
        user_data = {
            'id': user_id,
            'username': username,
            'balance': 0,
            'banned': False,
            'purchases': [],
            'created_at': datetime.datetime.now().isoformat()
        }
        db.add_user(user_data)
        user = user_data
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ b·ªã c·∫•m kh√¥ng
    if user and user.get('banned', False):
        bot.send_message(user_id, "‚õî T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã c·∫•m. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.")
        return
    
    # G·ª≠i tin nh·∫Øn ch√†o m·ª´ng
    welcome_text = (
        f"üëã Ch√†o m·ª´ng, {username}!\n\n"
        f"ƒê√¢y l√† bot mua b√°n t√†i kho·∫£n. S·ª≠ d·ª•ng c√°c n√∫t b√™n d∆∞·ªõi ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng.\n\n"
        f"S·ªë d∆∞ hi·ªán t·∫°i: {user.get('balance', 0):,} {config.CURRENCY}"
    )
    
    bot.send_message(
        user_id,
        welcome_text,
        reply_markup=keyboards.main_menu(is_admin(user_id))
    )

def help_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /help"""
    user_id = message.from_user.id
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ b·ªã c·∫•m kh√¥ng
    user = db.get_user(user_id)
    if user and user.get('banned', False):
        bot.send_message(user_id, "‚õî T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã c·∫•m. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.")
        return
    
    help_text = (
        "üîç *H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot*\n\n"
        "*C√°c l·ªánh c∆° b·∫£n:*\n"
        "/start - Kh·ªüi ƒë·ªông bot\n"
        "/help - Hi·ªÉn th·ªã tr·ª£ gi√∫p\n"
        "/dashboard - M·ªü b·∫£ng ƒëi·ªÅu khi·ªÉn\n\n"
        
        "*C√°ch s·ª≠ d·ª•ng:*\n"
        "1. Ch·ªçn lo·∫°i t√†i kho·∫£n (tr·∫£ ph√≠/mi·ªÖn ph√≠)\n"
        "2. Ch·ªçn s·∫£n ph·∫©m b·∫°n mu·ªën mua\n"
        "3. X√°c nh·∫≠n giao d·ªãch\n"
        "4. Nh·∫≠n th√¥ng tin t√†i kho·∫£n\n\n"
        
        "*N·∫°p ti·ªÅn:*\n"
        "Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n ƒë·ªÉ n·∫°p ti·ªÅn v√†o t√†i kho·∫£n c·ªßa b·∫°n."
    )
    
    if is_admin(user_id):
        help_text += (
            "\n\n*L·ªánh qu·∫£n tr·ªã vi√™n:*\n"
            "/create_product [t√™n] [gi√°] - T·∫°o/s·ª≠a s·∫£n ph·∫©m\n"
            "/product_list - Xem danh s√°ch s·∫£n ph·∫©m\n"
            "/upload_product [product_id] - Upload t√†i kho·∫£n cho s·∫£n ph·∫©m\n"
            "/add_money [user_id] [s·ªë ti·ªÅn] - Th√™m ti·ªÅn cho ng∆∞·ªùi d√πng\n"
            "/user_list - Xem danh s√°ch ng∆∞·ªùi d√πng\n"
            "/ban_user [user_id] - C·∫•m ng∆∞·ªùi d√πng\n"
            "/unban_user [user_id] - B·ªè c·∫•m ng∆∞·ªùi d√πng"
        )
    
    bot.send_message(
        user_id,
        help_text,
        parse_mode="Markdown",
        reply_markup=keyboards.back_button()
    )

def dashboard_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /dashboard"""
    user_id = message.from_user.id
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ b·ªã c·∫•m kh√¥ng
    user = db.get_user(user_id)
    if user and user.get('banned', False):
        bot.send_message(user_id, "‚õî T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã c·∫•m. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.")
        return
    
    bot.send_message(
        user_id,
        "üéõÔ∏è *B·∫£ng ƒëi·ªÅu khi·ªÉn*\n\nCh·ªçn m·ªôt t√πy ch·ªçn b√™n d∆∞·ªõi:",
        parse_mode="Markdown",
        reply_markup=keyboards.main_menu(is_admin(user_id))
    )

def create_product_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /create_product"""
    user_id = message.from_user.id
    
    # Ph√¢n t√≠ch c√∫ ph√°p l·ªánh
    args = message.text.split(maxsplit=2)
    
    if len(args) < 3:
        bot.send_message(
            user_id,
            "‚ùå S·ª≠ d·ª•ng sai c√∫ ph√°p. Vui l√≤ng s·ª≠ d·ª•ng: /create_product [t√™n] [gi√°]\n"
            "V√≠ d·ª•: /create_product \"Netflix Premium\" 50000"
        )
        return
    
    name = args[1]
    try:
        price = float(args[2])
    except ValueError:
        bot.send_message(user_id, "‚ùå Gi√° ph·∫£i l√† m·ªôt s·ªë.")
        return
    
    # T·∫°o s·∫£n ph·∫©m m·ªõi
    product_data = {
        'name': name,
        'price': price,
        'is_free': price <= 0,
        'description': f"S·∫£n ph·∫©m: {name}"
    }
    
    product_id = db.create_product(product_data)
    
    bot.send_message(
        user_id,
        f"‚úÖ ƒê√£ t·∫°o s·∫£n ph·∫©m th√†nh c√¥ng!\n\n"
        f"ID: {product_id}\n"
        f"T√™n: {name}\n"
        f"Gi√°: {price:,} {config.CURRENCY}\n"
        f"Lo·∫°i: {'Mi·ªÖn ph√≠' if price <= 0 else 'Tr·∫£ ph√≠'}"
    )

def product_list_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /product_list"""
    user_id = message.from_user.id
    
    products = db.get_all_products()
    
    if not products:
        bot.send_message(user_id, "üì¶ Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o.")
        return
    
    bot.send_message(
        user_id,
        "üìã *Danh s√°ch s·∫£n ph·∫©m*\n\nCh·ªçn m·ªôt s·∫£n ph·∫©m ƒë·ªÉ xem chi ti·∫øt:",
        parse_mode="Markdown",
        reply_markup=keyboards.product_list_keyboard(products, admin=True)
    )

def upload_product_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /upload_product"""
    user_id = message.from_user.id
    
    # Ph√¢n t√≠ch c√∫ ph√°p l·ªánh
    args = message.text.split()
    
    if len(args) < 2:
        bot.send_message(
            user_id,
            "‚ùå S·ª≠ d·ª•ng sai c√∫ ph√°p. Vui l√≤ng s·ª≠ d·ª•ng: /upload_product [product_id]"
        )
        return
    
    try:
        product_id = int(args[1])
    except ValueError:
        bot.send_message(user_id, "‚ùå ID s·∫£n ph·∫©m ph·∫£i l√† m·ªôt s·ªë.")
        return
    
    # Ki·ªÉm tra s·∫£n ph·∫©m t·ªìn t·∫°i
    product = db.get_product(product_id)
    if not product:
        bot.send_message(user_id, f"‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID {product_id}.")
        return
    
    # L∆∞u tr·∫°ng th√°i ng∆∞·ªùi d√πng ƒë·ªÉ x·ª≠ l√Ω tin nh·∫Øn ti·∫øp theo
    user_states[user_id] = {
        'state': 'waiting_for_accounts',
        'product_id': product_id
    }
    
    bot.send_message(
        user_id,
        f"üì§ Vui l√≤ng g·ª≠i danh s√°ch t√†i kho·∫£n cho s·∫£n ph·∫©m *{product['name']}*.\n\n"
        f"M·ªói t√†i kho·∫£n tr√™n m·ªôt d√≤ng, ƒë·ªãnh d·∫°ng: `username:password` ho·∫∑c b·∫•t k·ª≥ ƒë·ªãnh d·∫°ng n√†o b·∫°n mu·ªën.\n\n"
        f"V√≠ d·ª•:\n"
        f"```\n"
        f"user1@example.com:password1\n"
        f"user2@example.com:password2\n"
        f"```",
        parse_mode="Markdown"
    )

def add_money_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /add_money"""
    user_id = message.from_user.id
    
    # Ph√¢n t√≠ch c√∫ ph√°p l·ªánh
    args = message.text.split()
    
    if len(args) < 3:
        bot.send_message(
            user_id,
            "‚ùå S·ª≠ d·ª•ng sai c√∫ ph√°p. Vui l√≤ng s·ª≠ d·ª•ng: /add_money [user_id] [s·ªë ti·ªÅn]"
        )
        return
    
    try:
        target_user_id = int(args[1])
        amount = float(args[2])
    except ValueError:
        bot.send_message(user_id, "‚ùå ID ng∆∞·ªùi d√πng v√† s·ªë ti·ªÅn ph·∫£i l√† s·ªë.")
        return
    
    if amount <= 0:
        bot.send_message(user_id, "‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0.")
        return
    
    # Ki·ªÉm tra ng∆∞·ªùi d√πng t·ªìn t·∫°i
    target_user = db.get_user(target_user_id)
    if not target_user:
        bot.send_message(user_id, f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}.")
        return
    
    # Th√™m ti·ªÅn cho ng∆∞·ªùi d√πng
    success = db.add_money(target_user_id, amount)
    if success:
        new_balance = db.get_user(target_user_id).get('balance', 0)
        bot.send_message(
            user_id,
            f"‚úÖ ƒê√£ th√™m {amount:,} {config.CURRENCY} cho ng∆∞·ªùi d√πng {target_user.get('username', target_user_id)}.\n"
            f"S·ªë d∆∞ m·ªõi: {new_balance:,} {config.CURRENCY}"
        )
        
        # Th√¥ng b√°o cho ng∆∞·ªùi d√πng
        bot.send_message(
            target_user_id,
            f"üí∞ T√†i kho·∫£n c·ªßa b·∫°n v·ª´a ƒë∆∞·ª£c c·ªông {amount:,} {config.CURRENCY}.\n"
            f"S·ªë d∆∞ hi·ªán t·∫°i: {new_balance:,} {config.CURRENCY}"
        )
    else:
        bot.send_message(user_id, "‚ùå Kh√¥ng th·ªÉ th√™m ti·ªÅn cho ng∆∞·ªùi d√πng n√†y.")

def user_list_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /user_list"""
    user_id = message.from_user.id
    
    users = db.get_all_users()
    
    if not users:
        bot.send_message(user_id, "üë• Ch∆∞a c√≥ ng∆∞·ªùi d√πng n√†o.")
        return
    
    bot.send_message(
        user_id,
        "üë• *Danh s√°ch ng∆∞·ªùi d√πng*\n\nCh·ªçn m·ªôt ng∆∞·ªùi d√πng ƒë·ªÉ xem chi ti·∫øt:",
        parse_mode="Markdown",
        reply_markup=keyboards.user_list_keyboard(users)
    )

def ban_user_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /ban_user"""
    user_id = message.from_user.id
    
    # Ph√¢n t√≠ch c√∫ ph√°p l·ªánh
    args = message.text.split()
    
    if len(args) < 2:
        bot.send_message(
            user_id,
            "‚ùå S·ª≠ d·ª•ng sai c√∫ ph√°p. Vui l√≤ng s·ª≠ d·ª•ng: /ban_user [user_id]"
        )
        return
    
    try:
        target_user_id = int(args[1])
    except ValueError:
        bot.send_message(user_id, "‚ùå ID ng∆∞·ªùi d√πng ph·∫£i l√† m·ªôt s·ªë.")
        return
    
    # Ki·ªÉm tra ng∆∞·ªùi d√πng t·ªìn t·∫°i
    target_user = db.get_user(target_user_id)
    if not target_user:
        bot.send_message(user_id, f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}.")
        return
    
    # Kh√¥ng th·ªÉ c·∫•m admin
    if target_user_id in config.ADMIN_IDS:
        bot.send_message(user_id, "‚ùå Kh√¥ng th·ªÉ c·∫•m qu·∫£n tr·ªã vi√™n.")
        return
    
    # C·∫•m ng∆∞·ªùi d√πng
    success = db.ban_user(target_user_id)
    if success:
        bot.send_message(
            user_id,
            f"‚úÖ ƒê√£ c·∫•m ng∆∞·ªùi d√πng {target_user.get('username', target_user_id)}."
        )
        
        # Th√¥ng b√°o cho ng∆∞·ªùi d√πng
        bot.send_message(
            target_user_id,
            "‚õî T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã c·∫•m. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n."
        )
    else:
        bot.send_message(user_id, "‚ùå Kh√¥ng th·ªÉ c·∫•m ng∆∞·ªùi d√πng n√†y.")

def unban_user_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /unban_user"""
    user_id = message.from_user.id
    
    # Ph√¢n t√≠ch c√∫ ph√°p l·ªánh
    args = message.text.split()
    
    if len(args) < 2:
        bot.send_message(
            user_id,
            "‚ùå S·ª≠ d·ª•ng sai c√∫ ph√°p. Vui l√≤ng s·ª≠ d·ª•ng: /unban_user [user_id]"
        )
        return
    
    try:
        target_user_id = int(args[1])
    except ValueError:
        bot.send_message(user_id, "‚ùå ID ng∆∞·ªùi d√πng ph·∫£i l√† m·ªôt s·ªë.")
        return
    
    # Ki·ªÉm tra ng∆∞·ªùi d√πng t·ªìn t·∫°i
    target_user = db.get_user(target_user_id)
    if not target_user:
        bot.send_message(user_id, f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}.")
        return
    
    # B·ªè c·∫•m ng∆∞·ªùi d√πng
    success = db.unban_user(target_user_id)
    if success:
        bot.send_message(
            user_id,
            f"‚úÖ ƒê√£ b·ªè c·∫•m ng∆∞·ªùi d√πng {target_user.get('username', target_user_id)}."
        )
        
        # Th√¥ng b√°o cho ng∆∞·ªùi d√πng
        bot.send_message(
            target_user_id,
            "‚úÖ T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c b·ªè c·∫•m. B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng bot b√¨nh th∆∞·ªùng."
        )
    else:
        bot.send_message(user_id, "‚ùå Kh√¥ng th·ªÉ b·ªè c·∫•m ng∆∞·ªùi d√πng n√†y.")

def handle_state(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω tin nh·∫Øn d·ª±a tr√™n tr·∫°ng th√°i c·ªßa ng∆∞·ªùi d√πng"""
    user_id = message.from_user.id
    text = message.text
    
    state = user_states.get(user_id, {}).get('state')
    
    if state == 'waiting_for_accounts':
        product_id = user_states[user_id]['product_id']
        
        # X·ª≠ l√Ω danh s√°ch t√†i kho·∫£n
        accounts = [line.strip() for line in text.split('\n') if line.strip()]
        
        if not accounts:
            bot.send_message(user_id, "‚ùå Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n n√†o. Vui l√≤ng th·ª≠ l·∫°i.")
            return
        
        # Th√™m t√†i kho·∫£n v√†o c∆° s·ªü d·ªØ li·ªáu
        count = db.add_accounts(product_id, accounts)
        
        # X√≥a tr·∫°ng th√°i
        del user_states[user_id]
        
        product = db.get_product(product_id)
        bot.send_message(
            user_id,
            f"‚úÖ ƒê√£ th√™m {count} t√†i kho·∫£n cho s·∫£n ph·∫©m *{product['name']}*.",
            parse_mode="Markdown"
        )
    
    elif state == 'waiting_for_product_name':
        # L∆∞u t√™n s·∫£n ph·∫©m v√† chuy·ªÉn sang tr·∫°ng th√°i ch·ªù gi√°
        user_states[user_id]['product_name'] = text
        user_states[user_id]['state'] = 'waiting_for_product_price'
        
        bot.send_message(
            user_id,
            f"üìù T√™n s·∫£n ph·∫©m: *{text}*\n\nVui l√≤ng nh·∫≠p gi√° s·∫£n ph·∫©m (s·ªë):",
            parse_mode="Markdown"
        )
    
    elif state == 'waiting_for_product_price':
        try:
            price = float(text)
        except ValueError:
            bot.send_message(user_id, "‚ùå Gi√° ph·∫£i l√† m·ªôt s·ªë. Vui l√≤ng th·ª≠ l·∫°i.")
            return
        
        product_name = user_states[user_id]['product_name']
        
        # T·∫°o s·∫£n ph·∫©m m·ªõi
        product_data = {
            'name': product_name,
            'price': price,
            'is_free': price <= 0,
            'description': f"S·∫£n ph·∫©m: {product_name}"
        }
        
        # N·∫øu ƒëang ch·ªânh s·ª≠a s·∫£n ph·∫©m
        if 'edit_product_id' in user_states[user_id]:
            product_data['id'] = user_states[user_id]['edit_product_id']
        
        product_id = db.create_product(product_data)
        
        # X√≥a tr·∫°ng th√°i
        del user_states[user_id]
        
        bot.send_message(
            user_id,
            f"‚úÖ ƒê√£ {'c·∫≠p nh·∫≠t' if 'edit_product_id' in user_states.get(user_id, {}) else 't·∫°o'} s·∫£n ph·∫©m th√†nh c√¥ng!\n\n"
            f"ID: {product_id}\n"
            f"T√™n: {product_name}\n"
            f"Gi√°: {price:,} {config.CURRENCY}\n"
            f"Lo·∫°i: {'Mi·ªÖn ph√≠' if price <= 0 else 'Tr·∫£ ph√≠'}"
        )
    
    elif state == 'waiting_for_user_id':
        try:
            target_user_id = int(text)
        except ValueError:
            bot.send_message(user_id, "‚ùå ID ng∆∞·ªùi d√πng ph·∫£i l√† m·ªôt s·ªë. Vui l√≤ng th·ª≠ l·∫°i.")
            return
        
        # Ki·ªÉm tra ng∆∞·ªùi d√πng t·ªìn t·∫°i
        target_user = db.get_user(target_user_id)
        if not target_user:
            bot.send_message(user_id, f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}.")
            return
        
        # L∆∞u ID ng∆∞·ªùi d√πng v√† chuy·ªÉn sang tr·∫°ng th√°i ch·ªù s·ªë ti·ªÅn
        user_states[user_id]['target_user_id'] = target_user_id
        user_states[user_id]['state'] = 'waiting_for_amount'
        
        bot.send_message(
            user_id,
            f"üë§ Ng∆∞·ªùi d√πng: {target_user.get('username', target_user_id)}\n\n"
            f"Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn mu·ªën th√™m (s·ªë):"
        )
    
    elif state == 'waiting_for_amount':
        try:
            amount = float(text)
        except ValueError:
            bot.send_message(user_id, "‚ùå S·ªë ti·ªÅn ph·∫£i l√† m·ªôt s·ªë. Vui l√≤ng th·ª≠ l·∫°i.")
            return
        
        if amount <= 0:
            bot.send_message(user_id, "‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0. Vui l√≤ng th·ª≠ l·∫°i.")
            return
        
        target_user_id = user_states[user_id]['target_user_id']
        
        # Th√™m ti·ªÅn cho ng∆∞·ªùi d√πng
        success = db.add_money(target_user_id, amount)
        
        # X√≥a tr·∫°ng th√°i
        del user_states[user_id]
        
        if success:
            target_user = db.get_user(target_user_id)
            new_balance = target_user.get('balance', 0)
            
            bot.send_message(
                user_id,
                f"‚úÖ ƒê√£ th√™m {amount:,} {config.CURRENCY} cho ng∆∞·ªùi d√πng {target_user.get('username', target_user_id)}.\n"
                f"S·ªë d∆∞ m·ªõi: {new_balance:,} {config.CURRENCY}"
            )
            
            # Th√¥ng b√°o cho ng∆∞·ªùi d√πng
            bot.send_message(
                target_user_id,
                f"üí∞ T√†i kho·∫£n c·ªßa b·∫°n v·ª´a ƒë∆∞·ª£c c·ªông {amount:,} {config.CURRENCY}.\n"
                f"S·ªë d∆∞ hi·ªán t·∫°i: {new_balance:,} {config.CURRENCY}"
            )
        else:
            bot.send_message(user_id, "‚ùå Kh√¥ng th·ªÉ th√™m ti·ªÅn cho ng∆∞·ªùi d√πng n√†y.")

def handle_callback_query(bot: TeleBot, call: CallbackQuery) -> None:
    """X·ª≠ l√Ω c√°c callback query t·ª´ b√†n ph√≠m inline"""
    user_id = call.from_user.id
    message_id = call.message.message_id
    data = call.data
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ b·ªã c·∫•m kh√¥ng
    user = db.get_user(user_id)
    if user and user.get('banned', False) and not is_admin(user_id):
        bot.answer_callback_query(call.id, "‚õî T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã c·∫•m. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.")
        return
    
    # Th√™m c√°c h√†m ti·ªán √≠ch
    def get_statistics():
        """L·∫•y th·ªëng k√™ h·ªá th·ªëng"""
        users = db.get_all_users()
        total_users = len(users)
        
        # ƒê·∫øm ng∆∞·ªùi d√πng m·ªõi trong ng√†y
        today = datetime.datetime.now().date()
        new_users_today = 0
        
        # Gi·∫£ s·ª≠ c√≥ tr∆∞·ªùng 'created_at' trong d·ªØ li·ªáu ng∆∞·ªùi d√πng
        for user in users:
            if 'created_at' in user:
                try:
                    created_date = datetime.datetime.fromisoformat(user['created_at']).date()
                    if created_date == today:
                        new_users_today += 1
                except (ValueError, TypeError):
                    pass
        
        # ƒê·∫øm t·ªïng ƒë∆°n h√†ng v√† doanh thu
        total_orders = 0
        revenue = 0
        for user in users:
            purchases = user.get('purchases', [])
            total_orders += len(purchases)
            for purchase in purchases:
                revenue += purchase.get('price', 0)
        
        return {
            'total_users': total_users,
            'new_users_today': new_users_today,
            'total_orders': total_orders,
            'revenue': revenue
        }
    
    def process_purchase(user_id, product_id):
        """X·ª≠ l√Ω mua h√†ng"""
        user = db.get_user(user_id)
        product = db.get_product(product_id)
        
        if not product:
            return {'success': False, 'message': 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i'}
        
        # Ki·ªÉm tra s·ªë l∆∞·ª£ng t√†i kho·∫£n c√≤n l·∫°i
        available_accounts = db.count_available_accounts(product_id)
        if available_accounts <= 0:
            return {'success': False, 'message': 'S·∫£n ph·∫©m ƒë√£ h·∫øt h√†ng'}
        
        # Ki·ªÉm tra s·ªë d∆∞
        if product.get('price', 0) > 0:  # N·∫øu l√† s·∫£n ph·∫©m tr·∫£ ph√≠
            if user.get('balance', 0) < product.get('price', 0):
                return {'success': False, 'message': 'S·ªë d∆∞ kh√¥ng ƒë·ªß'}
            
            # Tr·ª´ ti·ªÅn
            new_balance = user.get('balance', 0) - product.get('price', 0)
            db.update_user(user_id, {'balance': new_balance})
        
        # L·∫•y t√†i kho·∫£n
        account = db.get_available_account(product_id)
        if not account:
            return {'success': False, 'message': 'Kh√¥ng th·ªÉ l·∫•y t√†i kho·∫£n'}
        
        # C·∫≠p nh·∫≠t l·ªãch s·ª≠ mua h√†ng
        purchase = {
            'product_id': product_id,
            'product_name': product.get('name', ''),
            'price': product.get('price', 0),
            'account_data': account.get('data', ''),
            'purchased_at': datetime.datetime.now().isoformat()
        }
        
        purchases = user.get('purchases', [])
        purchases.append(purchase)
        db.update_user(user_id, {'purchases': purchases})
        
        return {
            'success': True,
            'product_name': product.get('name', ''),
            'account_info': account.get('data', '')
        }
    
    # X·ª≠ l√Ω c√°c callback data
    if data == "premium_accounts":
        # Hi·ªÉn th·ªã danh s√°ch t√†i kho·∫£n tr·∫£ ph√≠
        products = [p for p in db.get_all_products() if not p.get('is_free', False)]
        
        if not products:
            bot.edit_message_text(
                "üì¶ Ch∆∞a c√≥ s·∫£n ph·∫©m tr·∫£ ph√≠ n√†o.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.back_button()
            )
            return
        
        bot.edit_message_text(
            "üîê *T√†i kho·∫£n tr·∫£ ph√≠*\n\nCh·ªçn m·ªôt s·∫£n ph·∫©m ƒë·ªÉ xem chi ti·∫øt:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=keyboards.product_list_keyboard(products)
        )
    
    elif data == "free_accounts":
        # Hi·ªÉn th·ªã danh s√°ch t√†i kho·∫£n mi·ªÖn ph√≠
        products = [p for p in db.get_all_products() if p.get('is_free', False)]
        
        if not products:
            bot.edit_message_text(
                "üì¶ Ch∆∞a c√≥ s·∫£n ph·∫©m mi·ªÖn ph√≠ n√†o.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.back_button()
            )
            return
        
        bot.edit_message_text(
            "üÜì *T√†i kho·∫£n mi·ªÖn ph√≠*\n\nCh·ªçn m·ªôt s·∫£n ph·∫©m ƒë·ªÉ xem chi ti·∫øt:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=keyboards.product_list_keyboard(products)
        )
    
    elif data == "tutorial":
        # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        bot.edit_message_text(
            "üìö H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:\n\n"
            "1. Ch·ªçn lo·∫°i t√†i kho·∫£n (tr·∫£ ph√≠/mi·ªÖn ph√≠)\n"
            "2. Ch·ªçn s·∫£n ph·∫©m b·∫°n mu·ªën mua\n"
            "3. X√°c nh·∫≠n thanh to√°n\n"
            "4. Nh·∫≠n th√¥ng tin t√†i kho·∫£n",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.back_button()
        )
    
    elif data == "balance":
        # Hi·ªÉn th·ªã s·ªë d∆∞ t√†i kho·∫£n
        user = db.get_user(user_id)
        balance = user.get('balance', 0)
        
        bot.edit_message_text(
            f"üí∞ S·ªë d∆∞ t√†i kho·∫£n c·ªßa b·∫°n: {balance} VNƒê\n\n"
            "ƒê·ªÉ n·∫°p ti·ªÅn, vui l√≤ng li√™n h·ªá admin.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.back_button()
        )
    
    elif data == "admin_panel" and is_admin(user_id):
        # Hi·ªÉn th·ªã panel qu·∫£n tr·ªã
        bot.edit_message_text(
            "‚öôÔ∏è Panel qu·∫£n tr·ªã vi√™n",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.admin_panel()
        )
    
    elif data == "manage_products" and is_admin(user_id):
        # Hi·ªÉn th·ªã menu qu·∫£n l√Ω s·∫£n ph·∫©m
        bot.edit_message_text(
            "üì¶ Qu·∫£n l√Ω s·∫£n ph·∫©m",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.product_management()
        )
    
    elif data == "manage_users" and is_admin(user_id):
        # Hi·ªÉn th·ªã menu qu·∫£n l√Ω ng∆∞·ªùi d√πng
        bot.edit_message_text(
            "üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.user_management()
        )
    
    elif data == "statistics" and is_admin(user_id):
        # Hi·ªÉn th·ªã th·ªëng k√™
        stats = get_statistics()
        bot.edit_message_text(
            f"üìä Th·ªëng k√™:\n\n"
            f"T·ªïng ng∆∞·ªùi d√πng: {stats['total_users']}\n"
            f"Ng∆∞·ªùi d√πng m·ªõi h√¥m nay: {stats['new_users_today']}\n"
            f"T·ªïng ƒë∆°n h√†ng: {stats['total_orders']}\n"
            f"Doanh thu: {stats['revenue']} VNƒê",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.back_button("back_to_admin")
        )
    
    elif data == "product_list" and is_admin(user_id):
        # Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m cho admin
        products = db.get_all_products()
        bot.edit_message_text(
            "üìã Danh s√°ch s·∫£n ph·∫©m:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.product_list_keyboard(products, admin=True)
        )
    
    elif data == "user_list" and is_admin(user_id):
        # Hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng
        users = db.get_all_users()
        bot.edit_message_text(
            "üìã Danh s√°ch ng∆∞·ªùi d√πng:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.user_list_keyboard(users)
        )
    
    # X·ª≠ l√Ω c√°c callback c√≥ pattern
    elif data.startswith("view_product_"):
        # Xem chi ti·∫øt s·∫£n ph·∫©m
        product_id = int(data.split("_")[2])
        product = db.get_product(product_id)
        
        if product:
            available_accounts = db.count_available_accounts(product_id)
            bot.edit_message_text(
                f"üè∑Ô∏è {product['name']}\n\n"
                f"üìù M√¥ t·∫£: {product['description']}\n"
                f"üí∞ Gi√°: {product['price']} VNƒê\n"
                f"üì¶ C√≤n l·∫°i: {available_accounts} t√†i kho·∫£n",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.product_detail_keyboard(product_id)
            )
    
    elif data.startswith("admin_product_") and is_admin(user_id):
        # Xem chi ti·∫øt s·∫£n ph·∫©m (admin)
        product_id = int(data.split("_")[2])
        product = db.get_product(product_id)
        
        if product:
            available_accounts = db.count_available_accounts(product_id)
            bot.edit_message_text(
                f"üè∑Ô∏è {product['name']}\n\n"
                f"üìù M√¥ t·∫£: {product['description']}\n"
                f"üí∞ Gi√°: {product['price']} VNƒê\n"
                f"üì¶ C√≤n l·∫°i: {available_accounts} t√†i kho·∫£n\n"
                f"üÜî ID: {product['id']}",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.product_detail_keyboard(product_id, is_admin=True)
            )
    
    elif data.startswith("admin_user_") and is_admin(user_id):
        # Xem chi ti·∫øt ng∆∞·ªùi d√πng
        user_id = int(data.split("_")[2])
        user = db.get_user(user_id)
        
        if user:
            status = "üö´ ƒê√£ b·ªã c·∫•m" if user.get('banned', False) else "‚úÖ ƒêang ho·∫°t ƒë·ªông"
            bot.edit_message_text(
                f"üë§ Th√¥ng tin ng∆∞·ªùi d√πng:\n\n"
                f"ID: {user['id']}\n"
                f"Username: @{user.get('username', 'Kh√¥ng c√≥')}\n"
                f"T√™n: {user.get('first_name', '')} {user.get('last_name', '')}\n"
                f"S·ªë d∆∞: {user.get('balance', 0)} VNƒê\n"
                f"Tr·∫°ng th√°i: {status}",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.back_button("back_to_user_list")
            )
    
    elif data.startswith("buy_product_"):
        # Mua s·∫£n ph·∫©m
        product_id = int(data.split("_")[2])
        product = db.get_product(product_id)
        
        if product:
            bot.edit_message_text(
                f"üõí X√°c nh·∫≠n mua:\n\n"
                f"S·∫£n ph·∫©m: {product['name']}\n"
                f"Gi√°: {product['price']} VNƒê\n\n"
                f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën mua s·∫£n ph·∫©m n√†y?",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.confirm_purchase_keyboard(product_id)
            )
    
    elif data.startswith("confirm_purchase_"):
        # X√°c nh·∫≠n mua h√†ng
        product_id = int(data.split("_")[2])
        result = process_purchase(user_id, product_id)
        
        if result['success']:
            bot.edit_message_text(
                f"‚úÖ Mua h√†ng th√†nh c√¥ng!\n\n"
                f"S·∫£n ph·∫©m: {result['product_name']}\n"
                f"Th√¥ng tin t√†i kho·∫£n:\n"
                f"```\n{result['account_info']}\n```\n\n"
                f"C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng!",
                call.message.chat.id,
                call.message.message_id,
                parse_mode="Markdown",
                reply_markup=keyboards.back_button()
            )
        else:
            bot.edit_message_text(
                f"‚ùå Mua h√†ng th·∫•t b·∫°i: {result['message']}",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.back_button()
            )
    
    # X·ª≠ l√Ω c√°c n√∫t quay l·∫°i
    elif data == "back_to_main":
        bot.edit_message_text(
            "üè† Menu ch√≠nh",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.main_menu(is_admin(user_id))
        )
    
    elif data == "back_to_admin":
        bot.edit_message_text(
            "‚öôÔ∏è Panel qu·∫£n tr·ªã vi√™n",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.admin_panel()
        )
    
    elif data == "back_to_product_management":
        bot.edit_message_text(
            "üì¶ Qu·∫£n l√Ω s·∫£n ph·∫©m",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.product_management()
        )
    
    elif data == "back_to_user_management":
        bot.edit_message_text(
            "üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.user_management()
        )
    
    elif data == "back_to_product_list":
        if is_admin(user_id):
            products = db.get_all_products()
            bot.edit_message_text(
                "üìã Danh s√°ch s·∫£n ph·∫©m:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.product_list_keyboard(products, admin=True)
            )
        else:
            products = [p for p in db.get_all_products() if not p.get('is_free', False)]
            bot.edit_message_text(
                "üîê Danh s√°ch t√†i kho·∫£n tr·∫£ ph√≠:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.product_list_keyboard(products)
            )
    
    elif data == "cancel_purchase":
        bot.edit_message_text(
            "üè† ƒê√£ h·ªßy giao d·ªãch. Quay l·∫°i menu ch√≠nh",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.main_menu(is_admin(user_id))
        )
    
    # X·ª≠ l√Ω ph√¢n trang
    elif data.startswith("product_page_"):
        page = int(data.split("_")[2])
        if is_admin(user_id):
            products = db.get_all_products()
            bot.edit_message_text(
                "üìã Danh s√°ch s·∫£n ph·∫©m:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.product_list_keyboard(products, page=page, admin=True)
            )
        else:
            products = [p for p in db.get_all_products() if not p.get('is_free', False)]
            bot.edit_message_text(
                "üîê Danh s√°ch t√†i kho·∫£n tr·∫£ ph√≠:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.product_list_keyboard(products, page=page)
            )
    
    elif data.startswith("user_page_") and is_admin(user_id):
        page = int(data.split("_")[2])
        users = db.get_all_users()
        bot.edit_message_text(
            "üìã Danh s√°ch ng∆∞·ªùi d√πng:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.user_list_keyboard(users, page=page)
        )
    
    # ƒê√°nh d·∫•u callback ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
    bot.answer_callback_query(call.id)
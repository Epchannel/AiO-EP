from telebot import TeleBot
from telebot.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
import config
from database import Database
import keyboards
import re
import datetime
from typing import Dict, List, Optional, Any
import logging
import time
import json
import os
import random
import string
import base64
import requests
import io
from PIL import Image

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

db = Database()

# L∆∞u tr·∫°ng th√°i c·ªßa ng∆∞·ªùi d√πng
user_states = {}

def is_admin(user_id: int) -> bool:
    """Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† admin kh√¥ng"""
    return user_id in config.ADMIN_IDS

def register_handlers(bot: TeleBot) -> None:
    """ƒêƒÉng k√Ω t·∫•t c·∫£ c√°c handler cho bot"""
    
    # Command handlers
    bot.register_message_handler(lambda msg: start_command(bot, msg), commands=['start'])
    bot.register_message_handler(lambda msg: help_command(bot, msg), commands=['help'])
    bot.register_message_handler(lambda msg: dashboard_command(bot, msg), commands=['dashboard'])
    
    # Admin command handlers
    bot.register_message_handler(lambda msg: create_product_command(bot, msg), commands=['create_product'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: product_list_command(bot, msg), commands=['product_list'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: upload_product_command(bot, msg), commands=['upload_product'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: add_money_command(bot, msg), commands=['add_money'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: user_list_command(bot, msg), commands=['user_list'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: ban_user_command(bot, msg), commands=['ban_user'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: unban_user_command(bot, msg), commands=['unban_user'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: broadcast_command(bot, msg), commands=['broadcast'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: add_admin_command(bot, msg), commands=['add_admin'], func=lambda msg: is_admin(msg.from_user.id))
    
    # Debug commands
    bot.register_message_handler(lambda msg: debug_user_command(bot, msg), commands=['debug_user'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: check_ban_command(bot, msg), commands=['check_ban'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: force_ban_command(bot, msg), commands=['force_ban'], func=lambda msg: is_admin(msg.from_user.id))
    
    # Callback query handlers
    bot.register_callback_query_handler(lambda call: handle_callback_query(bot, call), func=lambda call: True)
    
    # State handlers
    bot.register_message_handler(lambda msg: handle_state(bot, msg), content_types=['text'], func=lambda msg: msg.from_user.id in user_states)

def start_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /start"""
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    
    logger.info(f"User {username} (ID: {user_id}) started the bot")
    
    # Import datetime ƒë·ªÉ s·ª≠ d·ª•ng trong h√†m n√†y
    import datetime
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i ch∆∞a
    user = db.get_user(user_id)
    if not user:
        # T·∫°o ng∆∞·ªùi d√πng m·ªõi
        user_data = {
            'id': user_id,
            'username': username,
            'balance': 0,
            'banned': False,
            'purchases': [],
            'created_at': datetime.datetime.now().isoformat()
        }
        # Th√™m ng∆∞·ªùi d√πng v√†o database
        success = db.add_user(user_data)
        
        if success:
            # S·ª≠ d·ª•ng user_data thay v√¨ g·ªçi l·∫°i get_user
            user = user_data
            
            # Th√¥ng b√°o cho admin v·ªÅ ng∆∞·ªùi d√πng m·ªõi
            admin_notification = (
                f"üë§ *Ng∆∞·ªùi d√πng m·ªõi tham gia!*\n\n"
                f"ID: `{user_id}`\n"
                f"Username: @{username}\n"
                f"Th·ªùi gian: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
            notify_admins(bot, admin_notification, parse_mode="Markdown")
        else:
            # Th·ª≠ l·∫•y l·∫°i th√¥ng tin ng∆∞·ªùi d√πng
            user = db.get_user(user_id)
            if not user:
                # N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, ƒë√¢y l√† l·ªói th·ª±c s·ª±
                logger.error(f"Failed to add new user {username} (ID: {user_id}) to database")
                bot.send_message(user_id, "C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω t√†i kho·∫£n. Vui l√≤ng th·ª≠ l·∫°i sau.")
                return
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ b·ªã c·∫•m kh√¥ng - in ra log ƒë·ªÉ debug
    is_banned = user.get('banned', False)
    logger.info(f"User {username} (ID: {user_id}) banned status: {is_banned}")
    
    if is_banned:
        bot.send_message(user_id, "‚õî T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã c·∫•m. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.")
        return
    
    # G·ª≠i tin nh·∫Øn ch√†o m·ª´ng
    welcome_text = (
        f"üè† *Menu ch√≠nh*\n\n"
        f"üëã Ch√†o m·ª´ng, {username}!\n"
        f"ƒê√¢y l√† bot mua b√°n t√†i kho·∫£n. S·ª≠ d·ª•ng c√°c n√∫t b√™n d∆∞·ªõi ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng.\n\n"
        f"S·ªë d∆∞ hi·ªán t·∫°i: {user.get('balance', 0):,} {config.CURRENCY}"
    )
    
    bot.send_message(
        user_id,
        welcome_text,
        parse_mode="Markdown",
        reply_markup=keyboards.main_menu(is_admin(user_id))
    )

def help_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /help"""
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    
    logger.info(f"User {username} (ID: {user_id}) requested help")
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ b·ªã c·∫•m kh√¥ng
    user = db.get_user(user_id)
    if user and user.get('banned', False):
        bot.send_message(user_id, "‚õî T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã c·∫•m. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.")
        return
    
    help_text = (
        "üîç *H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot*\n\n"
        "*C√°c l·ªánh c∆° b·∫£n:*\n"
        "/start - Kh·ªüi ƒë·ªông bot\n"
        "/help - Hi·ªÉn th·ªã tr·ª£ gi√∫p\n"
        "/dashboard - M·ªü b·∫£ng ƒëi·ªÅu khi·ªÉn\n\n"
        
        "*C√°ch s·ª≠ d·ª•ng:*\n"
        "1. Ch·ªçn lo·∫°i t√†i kho·∫£n (tr·∫£ ph√≠/mi·ªÖn ph√≠)\n"
        "2. Ch·ªçn s·∫£n ph·∫©m b·∫°n mu·ªën mua\n"
        "3. X√°c nh·∫≠n giao d·ªãch\n"
        "4. Nh·∫≠n th√¥ng tin t√†i kho·∫£n\n\n"
        
        "*N·∫°p ti·ªÅn:*\n"
        "Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n ƒë·ªÉ n·∫°p ti·ªÅn v√†o t√†i kho·∫£n c·ªßa b·∫°n."
    )
    
    # Ch·ªâ hi·ªÉn th·ªã l·ªánh qu·∫£n tr·ªã vi√™n cho admin
    if is_admin(user_id):
        help_text += (
            "\n\n*L·ªánh qu·∫£n tr·ªã vi√™n:*\n"
            "/create\\_product [t√™n] [gi√°] - T·∫°o/s·ª≠a s·∫£n ph·∫©m\n"
            "/product\\_list - Xem danh s√°ch s·∫£n ph·∫©m\n"
            "/upload\\_product [product_id] - Upload t√†i kho·∫£n cho s·∫£n ph·∫©m\n"
            "/add\\_money [user_id] [s·ªë ti·ªÅn] - Th√™m ti·ªÅn cho ng∆∞·ªùi d√πng\n"
            "/user\\_list - Xem danh s√°ch ng∆∞·ªùi d√πng\n"
            "/ban\\_user [user_id] - C·∫•m ng∆∞·ªùi d√πng\n"
            "/unban\\_user [user_id] - B·ªè c·∫•m ng∆∞·ªùi d√πng\n"
            "/broadcast - G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi d√πng\n"
            "/add\\_admin [user_id] - Th√™m qu·∫£n tr·ªã vi√™n m·ªõi\n"
            "/debug\\_user [user_id] - Xem th√¥ng tin debug c·ªßa ng∆∞·ªùi d√πng\n"
            "/check\\_ban [user_id] - Ki·ªÉm tra tr·∫°ng th√°i c·∫•m c·ªßa ng∆∞·ªùi d√πng\n"
            "/force\\_ban [user_id] - C·∫•m ng∆∞·ªùi d√πng (ph∆∞∆°ng ph√°p thay th·∫ø)\n"
        )
    
    bot.send_message(
        user_id,
        help_text,
        parse_mode="Markdown",
        reply_markup=keyboards.back_button()
    )

def dashboard_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /dashboard"""
    user_id = message.from_user.id
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ b·ªã c·∫•m kh√¥ng
    user = db.get_user(user_id)
    if user and user.get('banned', False):
        bot.send_message(user_id, "‚õî T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã c·∫•m. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.")
        return
    
    bot.send_message(
        user_id,
        "üéõÔ∏è *B·∫£ng ƒëi·ªÅu khi·ªÉn*\n\nCh·ªçn m·ªôt t√πy ch·ªçn b√™n d∆∞·ªõi:",
        parse_mode="Markdown",
        reply_markup=keyboards.main_menu(is_admin(user_id))
    )

def create_product_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /create_product"""
    user_id = message.from_user.id
    
    # Ph√¢n t√≠ch c√∫ ph√°p l·ªánh
    args = message.text.split(maxsplit=2)
    
    if len(args) < 3:
        bot.send_message(
            user_id,
            "‚ùå S·ª≠ d·ª•ng sai c√∫ ph√°p. Vui l√≤ng s·ª≠ d·ª•ng: /create_product [t√™n] [gi√°]\n"
            "V√≠ d·ª•: /create_product \"Netflix Premium\" 50000"
        )
        return
    
    name = args[1]
    try:
        price = float(args[2])
    except ValueError:
        bot.send_message(user_id, "‚ùå Gi√° ph·∫£i l√† m·ªôt s·ªë.")
        return
    
    # T·∫°o s·∫£n ph·∫©m m·ªõi
    product_data = {
        'name': name,
        'price': price,
        'is_free': price <= 0,
        'description': f"S·∫£n ph·∫©m: {name}"
    }
    
    product_id = db.create_product(product_data)
    
    bot.send_message(
        user_id,
        f"‚úÖ ƒê√£ t·∫°o s·∫£n ph·∫©m th√†nh c√¥ng!\n\n"
        f"ID: {product_id}\n"
        f"T√™n: {name}\n"
        f"Gi√°: {price:,} {config.CURRENCY}\n"
        f"Lo·∫°i: {'Mi·ªÖn ph√≠' if price <= 0 else 'Tr·∫£ ph√≠'}"
    )

def product_list_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /product_list"""
    user_id = message.from_user.id
    
    products = db.get_all_products()
    
    if not products:
        bot.send_message(user_id, "üì¶ Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o.")
        return
    
    bot.send_message(
        user_id,
        "üìã *Danh s√°ch s·∫£n ph·∫©m*\n\nCh·ªçn m·ªôt s·∫£n ph·∫©m ƒë·ªÉ xem chi ti·∫øt:",
        parse_mode="Markdown",
        reply_markup=keyboards.product_list_keyboard(products, admin=True)
    )

def upload_product_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /upload_product"""
    user_id = message.from_user.id
    
    # Ph√¢n t√≠ch c√∫ ph√°p l·ªánh
    args = message.text.split()
    
    if len(args) < 2:
        bot.send_message(
            user_id,
            "‚ùå S·ª≠ d·ª•ng sai c√∫ ph√°p. Vui l√≤ng s·ª≠ d·ª•ng: /upload_product [product_id]"
        )
        return
    
    try:
        product_id = int(args[1])
    except ValueError:
        bot.send_message(user_id, "‚ùå ID s·∫£n ph·∫©m ph·∫£i l√† m·ªôt s·ªë.")
        return
    
    # Ki·ªÉm tra s·∫£n ph·∫©m t·ªìn t·∫°i
    product = db.get_product(product_id)
    if not product:
        bot.send_message(user_id, f"‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID {product_id}.")
        return
    
    # L∆∞u tr·∫°ng th√°i ng∆∞·ªùi d√πng ƒë·ªÉ x·ª≠ l√Ω tin nh·∫Øn ti·∫øp theo
    user_states[user_id] = {
        'state': 'waiting_for_accounts',
        'product_id': product_id
    }
    
    bot.send_message(
        user_id,
        f"üì§ Vui l√≤ng g·ª≠i danh s√°ch t√†i kho·∫£n cho s·∫£n ph·∫©m *{product['name']}*.\n\n"
        f"M·ªói t√†i kho·∫£n tr√™n m·ªôt d√≤ng, ƒë·ªãnh d·∫°ng: `username:password` ho·∫∑c b·∫•t k·ª≥ ƒë·ªãnh d·∫°ng n√†o b·∫°n mu·ªën.\n\n"
        f"V√≠ d·ª•:\n"
        f"```\n"
        f"user1@example.com:password1\n"
        f"user2@example.com:password2\n"
        f"```",
        parse_mode="Markdown"
    )

def add_money_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /add_money"""
    user_id = message.from_user.id
    
    # Ph√¢n t√≠ch c√∫ ph√°p l·ªánh
    args = message.text.split()
    
    if len(args) < 3:
        bot.send_message(
            user_id,
            "‚ùå S·ª≠ d·ª•ng sai c√∫ ph√°p. Vui l√≤ng s·ª≠ d·ª•ng: /add_money [user_id] [s·ªë ti·ªÅn]"
        )
        return
    
    try:
        target_user_id = int(args[1])
        amount = float(args[2])
    except ValueError:
        bot.send_message(user_id, "‚ùå ID ng∆∞·ªùi d√πng v√† s·ªë ti·ªÅn ph·∫£i l√† s·ªë.")
        return
    
    if amount <= 0:
        bot.send_message(user_id, "‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0.")
        return
    
    # Ki·ªÉm tra ng∆∞·ªùi d√πng t·ªìn t·∫°i
    target_user = db.get_user(target_user_id)
    if not target_user:
        bot.send_message(user_id, f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}.")
        return
    
    # Th√™m ti·ªÅn cho ng∆∞·ªùi d√πng
    success = db.add_money(target_user_id, amount)
    if success:
        new_balance = db.get_user(target_user_id).get('balance', 0)
        bot.send_message(
            user_id,
            f"‚úÖ ƒê√£ th√™m {amount:,} {config.CURRENCY} cho ng∆∞·ªùi d√πng {target_user.get('username', target_user_id)}.\n"
            f"S·ªë d∆∞ m·ªõi: {new_balance:,} {config.CURRENCY}"
        )
        
        # Th√¥ng b√°o cho ng∆∞·ªùi d√πng
        bot.send_message(
            target_user_id,
            f"üí∞ T√†i kho·∫£n c·ªßa b·∫°n v·ª´a ƒë∆∞·ª£c c·ªông {amount:,} {config.CURRENCY}.\n"
            f"S·ªë d∆∞ hi·ªán t·∫°i: {new_balance:,} {config.CURRENCY}"
        )
    else:
        bot.send_message(user_id, "‚ùå Kh√¥ng th·ªÉ th√™m ti·ªÅn cho ng∆∞·ªùi d√πng n√†y.")

def user_list_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /user_list"""
    user_id = message.from_user.id
    
    users = db.get_all_users()
    
    if not users:
        bot.send_message(user_id, "üë• Ch∆∞a c√≥ ng∆∞·ªùi d√πng n√†o.")
        return
    
    # L∆∞u tr·∫°ng th√°i ƒë·ªÉ x·ª≠ l√Ω ph√¢n trang
    user_states[user_id] = {
        'state': 'viewing_user_list',
        'page': 0,
        'users': users,
        'search_query': ''
    }
    
    # Hi·ªÉn th·ªã trang ƒë·∫ßu ti√™n
    display_user_list_page(bot, user_id, message.message_id)

def display_user_list_page(bot: TeleBot, user_id: int, message_id: int = None) -> None:
    """Hi·ªÉn th·ªã m·ªôt trang danh s√°ch ng∆∞·ªùi d√πng"""
    state = user_states.get(user_id, {})
    users = state.get('users', [])
    page = state.get('page', 0)
    search_query = state.get('search_query', '').lower()
    
    # L·ªçc ng∆∞·ªùi d√πng theo t·ª´ kh√≥a t√¨m ki·∫øm n·∫øu c√≥
    if search_query:
        filtered_users = []
        for user in users:
            username = str(user.get('username', '')).lower()
            user_id_str = str(user.get('id', ''))
            if search_query in username or search_query in user_id_str:
                filtered_users.append(user)
        users = filtered_users
    
    # S·ªë ng∆∞·ªùi d√πng m·ªói trang
    per_page = 5
    total_pages = (len(users) + per_page - 1) // per_page
    
    if total_pages == 0:
        text = "üîç Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o ph√π h·ª£p."
        markup = keyboards.user_list_navigation_keyboard(0, 0, search_query)
    else:
        # L·∫•y ng∆∞·ªùi d√πng cho trang hi·ªán t·∫°i
        start_idx = page * per_page
        end_idx = min(start_idx + per_page, len(users))
        current_users = users[start_idx:end_idx]
        
        # T·∫°o n·ªôi dung tin nh·∫Øn
        text = f"üë• *Danh s√°ch ng∆∞·ªùi d√πng* (Trang {page+1}/{total_pages})\n\n"
        
        for i, user in enumerate(current_users, 1):
            username = user.get('username', 'Kh√¥ng c√≥')
            user_id = user.get('id', 'N/A')
            balance = user.get('balance', 0)
            banned = "üö´" if user.get('banned', False) else "‚úÖ"
            
            text += f"{i}. {banned} @{username} (ID: `{user_id}`)\n   üí∞ {balance:,} {config.CURRENCY}\n\n"
        
        # T·∫°o b√†n ph√≠m ƒëi·ªÅu h∆∞·ªõng
        markup = keyboards.user_list_navigation_keyboard(page, total_pages, search_query)
    
    # G·ª≠i ho·∫∑c c·∫≠p nh·∫≠t tin nh·∫Øn
    if message_id:
        try:
            bot.edit_message_text(
                text,
                user_id,
                message_id,
                parse_mode="Markdown",
                reply_markup=markup
            )
        except Exception as e:
            logger.error(f"Error updating user list message: {e}")
            # N·∫øu kh√¥ng th·ªÉ c·∫≠p nh·∫≠t, g·ª≠i tin nh·∫Øn m·ªõi
            bot.send_message(
                user_id,
                text,
                parse_mode="Markdown",
                reply_markup=markup
            )
    else:
        bot.send_message(
            user_id,
            text,
            parse_mode="Markdown",
            reply_markup=markup
        )

def ban_user_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /ban_user"""
    user_id = message.from_user.id
    
    # Ki·ªÉm tra quy·ªÅn admin
    if not is_admin(user_id):
        bot.send_message(user_id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.")
        return
    
    # Ph√¢n t√≠ch c√∫ ph√°p l·ªánh
    args = message.text.split()
    
    if len(args) < 2:
        bot.send_message(
            user_id,
            "‚ùå S·ª≠ d·ª•ng sai c√∫ ph√°p. Vui l√≤ng s·ª≠ d·ª•ng: /ban_user [user_id]"
        )
        return
    
    try:
        target_user_id = int(args[1])
    except ValueError:
        bot.send_message(user_id, "‚ùå ID ng∆∞·ªùi d√πng ph·∫£i l√† m·ªôt s·ªë.")
        return
    
    # Ki·ªÉm tra ng∆∞·ªùi d√πng t·ªìn t·∫°i
    target_user = db.get_user(target_user_id)
    if not target_user:
        bot.send_message(user_id, f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}.")
        return
    
    # Kh√¥ng th·ªÉ c·∫•m admin
    if target_user_id in config.ADMIN_IDS:
        bot.send_message(user_id, "‚ùå Kh√¥ng th·ªÉ c·∫•m qu·∫£n tr·ªã vi√™n.")
        return
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ b·ªã c·∫•m ch∆∞a
    if target_user.get('banned', False):
        bot.send_message(user_id, f"‚ùå Ng∆∞·ªùi d√πng {target_user.get('username', target_user_id)} ƒë√£ b·ªã c·∫•m r·ªìi.")
        return
    
    # S·ª≠ d·ª•ng h√†m ban_user t·ª´ database
    logger.info(f"Admin {message.from_user.username} (ID: {user_id}) is banning user {target_user_id}")
    success = db.ban_user(target_user_id)
    
    if success:
        # G·ª≠i th√¥ng b√°o th√†nh c√¥ng
        bot.send_message(
            user_id,
            f"‚úÖ ƒê√£ c·∫•m ng∆∞·ªùi d√πng {target_user.get('username', target_user_id)} th√†nh c√¥ng."
        )
        
        # Th√¥ng b√°o cho ng∆∞·ªùi d√πng
        try:
            bot.send_message(
                target_user_id,
                "‚õî T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã c·∫•m. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n."
            )
            logger.info(f"Notification sent to banned user {target_user_id}")
        except Exception as e:
            logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi d√πng b·ªã c·∫•m: {e}")
    else:
        bot.send_message(user_id, f"‚ùå Kh√¥ng th·ªÉ c·∫•m ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}. H√£y ki·ªÉm tra l·∫°i ho·∫∑c th·ª≠ l·∫°i sau.")

def unban_user_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /unban_user"""
    user_id = message.from_user.id
    
    # Ki·ªÉm tra quy·ªÅn admin
    if not is_admin(user_id):
        bot.send_message(user_id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.")
        return
    
    # Ph√¢n t√≠ch c√∫ ph√°p l·ªánh
    args = message.text.split()
    
    if len(args) < 2:
        bot.send_message(
            user_id,
            "‚ùå S·ª≠ d·ª•ng sai c√∫ ph√°p. Vui l√≤ng s·ª≠ d·ª•ng: /unban_user [user_id]"
        )
        return
    
    try:
        target_user_id = int(args[1])
    except ValueError:
        bot.send_message(user_id, "‚ùå ID ng∆∞·ªùi d√πng ph·∫£i l√† m·ªôt s·ªë.")
        return
    
    # Ki·ªÉm tra ng∆∞·ªùi d√πng t·ªìn t·∫°i
    target_user = db.get_user(target_user_id)
    if not target_user:
        bot.send_message(user_id, f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}.")
        return
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ b·ªã c·∫•m kh√¥ng
    if not target_user.get('banned', False):
        bot.send_message(user_id, f"‚ùå Ng∆∞·ªùi d√πng {target_user.get('username', target_user_id)} kh√¥ng b·ªã c·∫•m.")
        return
    
    # S·ª≠ d·ª•ng h√†m unban_user t·ª´ database
    logger.info(f"Admin {message.from_user.username} (ID: {user_id}) is unbanning user {target_user_id}")
    success = db.unban_user(target_user_id)
    
    if success:
        # G·ª≠i th√¥ng b√°o th√†nh c√¥ng
        bot.send_message(
            user_id,
            f"‚úÖ ƒê√£ b·ªè c·∫•m ng∆∞·ªùi d√πng {target_user.get('username', target_user_id)} th√†nh c√¥ng."
        )
        
        # Th√¥ng b√°o cho ng∆∞·ªùi d√πng
        try:
            bot.send_message(
                target_user_id,
                "üéâ T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c b·ªè c·∫•m. B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng bot b√¨nh th∆∞·ªùng."
            )
            logger.info(f"Notification sent to unbanned user {target_user_id}")
        except Exception as e:
            logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi d√πng ƒë∆∞·ª£c b·ªè c·∫•m: {e}")
    else:
        bot.send_message(user_id, f"‚ùå Kh√¥ng th·ªÉ b·ªè c·∫•m ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}. H√£y ki·ªÉm tra l·∫°i ho·∫∑c th·ª≠ l·∫°i sau.")

def broadcast_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /broadcast - G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi d√πng"""
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    
    logger.info(f"Admin {username} (ID: {user_id}) started broadcast")
    
    # L∆∞u tr·∫°ng th√°i ƒë·ªÉ nh·∫≠n n·ªôi dung th√¥ng b√°o
    user_states[user_id] = {
        'state': 'waiting_for_broadcast',
        'data': {}
    }
    
    bot.send_message(
        user_id,
        "üì£ *G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi d√πng*\n\n"
        "Vui l√≤ng nh·∫≠p n·ªôi dung th√¥ng b√°o b·∫°n mu·ªën g·ª≠i.\n"
        "B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng Markdown.\n\n"
        "G·ª≠i /cancel ƒë·ªÉ h·ªßy.",
        parse_mode="Markdown"
    )

def handle_state(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω tr·∫°ng th√°i ng∆∞·ªùi d√πng"""
    # L·∫•y th√¥ng tin ng∆∞·ªùi d√πng
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    
    # L·∫•y tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng
    state = user_states.get(user_id, {}).get('state', None)
    
    if not state:
        return
    
    # X·ª≠ l√Ω c√°c tr·∫°ng th√°i kh√°c nhau
    if state == 'waiting_for_create_product_name':
        # X·ª≠ l√Ω nh·∫≠p t√™n s·∫£n ph·∫©m
        user_states[user_id]['state'] = 'waiting_for_product_price'
        bot.send_message(
            user_id,
            f"üëç ƒê√£ l∆∞u t√™n s·∫£n ph·∫©m: *{user_states[user_id]['data']['name']}*\n\n"
            f"Vui l√≤ng nh·∫≠p gi√° cho s·∫£n ph·∫©m (s·ªë):",
            parse_mode="Markdown"
        )
    
    elif state == 'waiting_for_product_price':
        # X·ª≠ l√Ω gi√° s·∫£n ph·∫©m
        try:
            price = float(message.text.strip())
            if price < 0:
                bot.send_message(user_id, "‚ùå Gi√° s·∫£n ph·∫©m kh√¥ng th·ªÉ √¢m.")
                return
        except ValueError:
            bot.send_message(user_id, "‚ùå Gi√° s·∫£n ph·∫©m ph·∫£i l√† m·ªôt s·ªë.")
            return
        
        # L·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m
        product_name = user_states[user_id]['data']['name']
        
        # Chuy·ªÉn sang tr·∫°ng th√°i ch·ªù m√¥ t·∫£
        user_states[user_id]['data']['price'] = price
        user_states[user_id]['state'] = 'waiting_for_product_description'
        
        bot.send_message(
            user_id,
            f"üëç ƒê√£ l∆∞u gi√° s·∫£n ph·∫©m: *{price:,}* {config.CURRENCY}\n\n"
            f"Vui l√≤ng nh·∫≠p m√¥ t·∫£ cho s·∫£n ph·∫©m:",
            parse_mode="Markdown"
        )
    
    elif state == 'waiting_for_product_description':
        # X·ª≠ l√Ω m√¥ t·∫£ s·∫£n ph·∫©m
        product_data = user_states[user_id]['data']
        product_data['description'] = message.text.strip()
        
        # T·∫°o s·∫£n ph·∫©m m·ªõi
        new_id = db.create_product(product_data)
        
        # X√≥a tr·∫°ng th√°i
        del user_states[user_id]
        
        bot.send_message(
            user_id,
            f"‚úÖ ƒê√£ t·∫°o s·∫£n ph·∫©m m·ªõi th√†nh c√¥ng!\n\n"
            f"ID: {new_id}\n"
            f"T√™n: {product_data['name']}\n"
            f"Gi√°: {product_data['price']:,} {config.CURRENCY}\n"
            f"M√¥ t·∫£: {text}",
            reply_markup=keyboards.back_button("back_to_product_list")
        )
    
    elif state == 'edit_product_name':
        # X·ª≠ l√Ω t√™n s·∫£n ph·∫©m m·ªõi
        product_id = user_states[user_id]['product_id']
        product_data = user_states[user_id]['data']
        
        if text.lower() != 'gi·ªØ nguy√™n':
            product_data['name'] = text
        
        # Chuy·ªÉn sang tr·∫°ng th√°i ch·ªânh s·ª≠a gi√°
        user_states[user_id]['state'] = 'edit_product_price'
        
        bot.send_message(
            user_id,
            f"üëç T√™n s·∫£n ph·∫©m: *{product_data['name']}*\n\n"
            f"Vui l√≤ng nh·∫≠p gi√° m·ªõi cho s·∫£n ph·∫©m (ho·∫∑c g√µ 'gi·ªØ nguy√™n' ƒë·ªÉ kh√¥ng thay ƒë·ªïi):",
            parse_mode="Markdown"
        )
    
    elif state == 'edit_product_price':
        # X·ª≠ l√Ω gi√° s·∫£n ph·∫©m m·ªõi
        product_id = user_states[user_id]['product_id']
        product_data = user_states[user_id]['data']
        
        if text.lower() != 'gi·ªØ nguy√™n':
            try:
                price = float(text)
                if price < 0:
                    bot.send_message(user_id, "‚ùå Gi√° s·∫£n ph·∫©m kh√¥ng th·ªÉ √¢m.")
                    return
                product_data['price'] = price
            except ValueError:
                bot.send_message(user_id, "‚ùå Gi√° s·∫£n ph·∫©m ph·∫£i l√† m·ªôt s·ªë. Vui l√≤ng nh·∫≠p l·∫°i.")
                return
        
        # Chuy·ªÉn sang tr·∫°ng th√°i ch·ªânh s·ª≠a m√¥ t·∫£
        user_states[user_id]['state'] = 'edit_product_description'
        
        bot.send_message(
            user_id,
            f"üëç Gi√° s·∫£n ph·∫©m: *{product_data['price']:,}* {config.CURRENCY}\n\n"
            f"Vui l√≤ng nh·∫≠p m√¥ t·∫£ m·ªõi cho s·∫£n ph·∫©m (ho·∫∑c g√µ 'gi·ªØ nguy√™n' ƒë·ªÉ kh√¥ng thay ƒë·ªïi):",
            parse_mode="Markdown"
        )
    
    elif state == 'edit_product_description':
        # X·ª≠ l√Ω m√¥ t·∫£ s·∫£n ph·∫©m m·ªõi
        product_id = user_states[user_id]['product_id']
        product_data = user_states[user_id]['data']
        
        if text.lower() != 'gi·ªØ nguy√™n':
            product_data['description'] = text
        
        # C·∫≠p nh·∫≠t s·∫£n ph·∫©m trong c∆° s·ªü d·ªØ li·ªáu
        try:
            db.create_product(product_data)
            
            # X√≥a tr·∫°ng th√°i
            del user_states[user_id]
            
            bot.send_message(
                user_id,
                f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!\n\n"
                f"ID: {product_id}\n"
                f"T√™n: {product_data['name']}\n"
                f"Gi√°: {product_data['price']:,} {config.CURRENCY}\n"
                f"M√¥ t·∫£: {product_data.get('description', 'Kh√¥ng c√≥')}",
                reply_markup=keyboards.back_button("back_to_product_list")
            )
        except Exception as e:
            logger.error(f"L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m: {e}")
            bot.send_message(
                user_id,
                "‚ùå ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i sau."
            )
    
    elif state == 'waiting_for_accounts':
        # X·ª≠ l√Ω upload t√†i kho·∫£n
        product_id = user_states[user_id]['product_id']
        product = db.get_product(product_id)
        
        if not product:
            bot.send_message(user_id, "‚ùå S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i.")
            del user_states[user_id]
            return
        
        # Ph√¢n t√≠ch danh s√°ch t√†i kho·∫£n
        accounts = text.strip().split('\n')
        accounts = [account.strip() for account in accounts if account.strip()]
        
        if not accounts:
            bot.send_message(user_id, "‚ùå Danh s√°ch t√†i kho·∫£n kh√¥ng h·ª£p l·ªá.")
            return
        
        # Th√™m t√†i kho·∫£n v√†o c∆° s·ªü d·ªØ li·ªáu
        count = db.add_accounts(product_id, accounts)
        
        # X√≥a tr·∫°ng th√°i
        del user_states[user_id]
        
        bot.send_message(
            user_id,
            f"‚úÖ ƒê√£ th√™m {count} t√†i kho·∫£n cho s·∫£n ph·∫©m *{product['name']}* th√†nh c√¥ng!",
            parse_mode="Markdown"
        )
    
    elif state == 'waiting_for_user_id_to_add_money':
        # X·ª≠ l√Ω ID ng∆∞·ªùi d√πng ƒë·ªÉ th√™m ti·ªÅn
        try:
            target_user_id = int(text.strip())
            target_user = db.get_user(target_user_id)
            
            if not target_user:
                bot.send_message(
                    user_id,
                    "‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID n√†y. Vui l√≤ng ki·ªÉm tra l·∫°i."
                )
                return
            
            # L∆∞u ID ng∆∞·ªùi d√πng v√† chuy·ªÉn sang tr·∫°ng th√°i nh·∫≠p s·ªë ti·ªÅn
            user_states[user_id] = {
                'state': 'waiting_for_add_money_amount',
                'target_user_id': target_user_id
            }
            
            bot.send_message(
                user_id,
                f"üí∞ Th√™m ti·ªÅn cho ng∆∞·ªùi d√πng:\n\n"
                f"ID: {target_user['id']}\n"
                f"Username: @{target_user.get('username', 'Kh√¥ng c√≥')}\n"
                f"S·ªë d∆∞ hi·ªán t·∫°i: {target_user.get('balance', 0):,} {config.CURRENCY}\n\n"
                f"Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn mu·ªën th√™m:"
            )
        except ValueError:
            bot.send_message(
                user_id,
                "‚ùå ID ng∆∞·ªùi d√πng ph·∫£i l√† m·ªôt s·ªë. Vui l√≤ng nh·∫≠p l·∫°i."
            )

    elif state == 'waiting_for_add_money_amount':
        # X·ª≠ l√Ω s·ªë ti·ªÅn c·∫ßn th√™m
        try:
            amount = int(text.strip())
            if amount <= 0:
                bot.send_message(
                    user_id,
                    "‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0. Vui l√≤ng nh·∫≠p l·∫°i."
                )
                return
            
            target_user_id = user_states[user_id]['target_user_id']
            target_user = db.get_user(target_user_id)
            
            if not target_user:
                bot.send_message(
                    user_id,
                    "‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i."
                )
                del user_states[user_id]
                return
            
            # C·∫≠p nh·∫≠t s·ªë d∆∞
            current_balance = target_user.get('balance', 0)
            new_balance = current_balance + amount
            
            if db.update_user(target_user_id, {'balance': new_balance}):
                # X√≥a tr·∫°ng th√°i
                del user_states[user_id]
                
                bot.send_message(
                    user_id,
                    f"‚úÖ ƒê√£ th√™m {amount:,} {config.CURRENCY} cho ng∆∞·ªùi d√πng @{target_user.get('username', 'Kh√¥ng c√≥')}.\n"
                    f"S·ªë d∆∞ m·ªõi: {new_balance:,} {config.CURRENCY}",
                    reply_markup=keyboards.back_button("back_to_user_management")
                )
                
                # Th√¥ng b√°o cho ng∆∞·ªùi d√πng
                try:
                    bot.send_message(
                        target_user_id,
                        f"üí∞ T√†i kho·∫£n c·ªßa b·∫°n v·ª´a ƒë∆∞·ª£c c·ªông th√™m {amount:,} {config.CURRENCY}.\n"
                        f"S·ªë d∆∞ hi·ªán t·∫°i: {new_balance:,} {config.CURRENCY}"
                    )
                except Exception as e:
                    logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi d√πng {target_user_id}: {e}")
            else:
                bot.send_message(
                    user_id,
                    "‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë d∆∞. Vui l√≤ng th·ª≠ l·∫°i sau."
                )
                del user_states[user_id]
        except ValueError:
            bot.send_message(
                user_id,
                "‚ùå S·ªë ti·ªÅn ph·∫£i l√† m·ªôt s·ªë. Vui l√≤ng nh·∫≠p l·∫°i."
            )
    
    elif state == 'searching_user':
        # X·ª≠ l√Ω t√¨m ki·∫øm ng∆∞·ªùi d√πng
        search_query = message.text.strip().lower()
        user_states[user_id]['search_query'] = search_query
        user_states[user_id]['page'] = 0
        user_states[user_id]['state'] = 'viewing_user_list'
        
        bot.delete_message(user_id, message.message_id)
        display_user_list_page(bot, user_id)

    elif state == 'waiting_for_broadcast':
        # X·ª≠ l√Ω broadcast message
        broadcast_message = text
        
        # X√≥a tr·∫°ng th√°i
        del user_states[user_id]
        
        # Hi·ªÉn th·ªã tin nh·∫Øn x√°c nh·∫≠n
        bot.send_message(
            user_id,
            "üîÑ ƒêang g·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi d√πng... Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t m·ªôt ch√∫t th·ªùi gian."
        )
        
        # Th·ª±c hi·ªán g·ª≠i th√¥ng b√°o
        users = db.get_all_users()
        success_count = 0
        fail_count = 0
        
        for user_item in users:
            try:
                target_id = user_item.get('id')
                if target_id != user_id:  # Kh√¥ng g·ª≠i cho ch√≠nh m√¨nh
                    bot.send_message(
                        target_id,
                        f"üì£ *TH√îNG B√ÅO T·ª™ QU·∫¢N TR·ªä VI√äN*\n\n{broadcast_message}",
                        parse_mode="Markdown"
                    )
                    success_count += 1
            except Exception as e:
                logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi d√πng {user_item.get('id')}: {e}")
                fail_count += 1
        
        # G·ª≠i th√¥ng b√°o k·∫øt qu·∫£
        bot.send_message(
            user_id,
            f"‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o th√†nh c√¥ng:\n"
            f"- S·ªë ng∆∞·ªùi nh·∫≠n ƒë∆∞·ª£c: {success_count}\n"
            f"- S·ªë l·ªói: {fail_count}"
        )
    
    elif state == 'waiting_for_ban_user_id':
        # X·ª≠ l√Ω ID ng∆∞·ªùi d√πng ƒë·ªÉ c·∫•m
        try:
            target_user_id = int(text.strip())
            
            # Ki·ªÉm tra ng∆∞·ªùi d√πng t·ªìn t·∫°i
            target_user = db.get_user(target_user_id)
            if not target_user:
                bot.send_message(user_id, f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}.")
                return
            
            # Ki·ªÉm tra n·∫øu l√† admin
            if target_user_id in config.ADMIN_IDS:
                bot.send_message(user_id, "‚ùå Kh√¥ng th·ªÉ c·∫•m qu·∫£n tr·ªã vi√™n.")
                return
            
            # Ki·ªÉm tra n·∫øu ƒë√£ b·ªã c·∫•m
            if target_user.get('banned', False):
                bot.send_message(user_id, f"‚ùå Ng∆∞·ªùi d√πng {target_user.get('username', target_user_id)} ƒë√£ b·ªã c·∫•m r·ªìi.")
                return
            
            # C·∫•m ng∆∞·ªùi d√πng
            success = db.ban_user(target_user_id)
            
            # X√≥a tr·∫°ng th√°i
            del user_states[user_id]
            
            if success:
                bot.send_message(
                    user_id,
                    f"‚úÖ ƒê√£ c·∫•m ng∆∞·ªùi d√πng {target_user.get('username', target_user_id)} th√†nh c√¥ng."
                )
                
                # Th√¥ng b√°o cho ng∆∞·ªùi d√πng b·ªã c·∫•m
                try:
                    bot.send_message(
                        target_user_id,
                        "‚õî T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã c·∫•m. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n."
                    )
                except Exception as e:
                    logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi d√πng b·ªã c·∫•m: {e}")
            else:
                bot.send_message(
                    user_id,
                    f"‚ùå Kh√¥ng th·ªÉ c·∫•m ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}. H√£y ki·ªÉm tra l·∫°i ho·∫∑c th·ª≠ l·∫°i sau."
                )
        except ValueError:
            bot.send_message(user_id, "‚ùå ID ng∆∞·ªùi d√πng ph·∫£i l√† m·ªôt s·ªë.")
    
    elif state == 'waiting_for_unban_user_id':
        # X·ª≠ l√Ω ID ng∆∞·ªùi d√πng ƒë·ªÉ b·ªè c·∫•m
        try:
            target_user_id = int(text.strip())
            
            # Ki·ªÉm tra ng∆∞·ªùi d√πng t·ªìn t·∫°i
            target_user = db.get_user(target_user_id)
            if not target_user:
                bot.send_message(user_id, f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}.")
                return
            
            # Ki·ªÉm tra n·∫øu ch∆∞a b·ªã c·∫•m
            if not target_user.get('banned', False):
                bot.send_message(user_id, f"‚ùå Ng∆∞·ªùi d√πng {target_user.get('username', target_user_id)} kh√¥ng b·ªã c·∫•m.")
                return
            
            # B·ªè c·∫•m ng∆∞·ªùi d√πng
            success = db.unban_user(target_user_id)
            
            # X√≥a tr·∫°ng th√°i
            del user_states[user_id]
            
            if success:
                bot.send_message(
                    user_id,
                    f"‚úÖ ƒê√£ b·ªè c·∫•m ng∆∞·ªùi d√πng {target_user.get('username', target_user_id)} th√†nh c√¥ng."
                )
                
                # Th√¥ng b√°o cho ng∆∞·ªùi d√πng ƒë∆∞·ª£c b·ªè c·∫•m
                try:
                    bot.send_message(
                        target_user_id,
                        "üéâ T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c b·ªè c·∫•m. B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng bot b√¨nh th∆∞·ªùng."
                    )
                except Exception as e:
                    logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi d√πng ƒë∆∞·ª£c b·ªè c·∫•m: {e}")
            else:
                bot.send_message(
                    user_id,
                    f"‚ùå Kh√¥ng th·ªÉ b·ªè c·∫•m ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}. H√£y ki·ªÉm tra l·∫°i ho·∫∑c th·ª≠ l·∫°i sau."
                )
        except ValueError:
            bot.send_message(user_id, "‚ùå ID ng∆∞·ªùi d√πng ph·∫£i l√† m·ªôt s·ªë.")
    
    # Th√™m c√°c tr·∫°ng th√°i kh√°c ·ªü ƒë√¢y

    # Th√™m x·ª≠ l√Ω cho tr·∫°ng th√°i ch·ªù nh·∫≠p s·ªë ti·ªÅn n·∫°p t√πy ch·ªçn
    elif state == 'waiting_for_deposit_amount':
        # X·ª≠ l√Ω nh·∫≠p s·ªë ti·ªÅn n·∫°p t√πy ch·ªçn
        try:
            # X√≥a d·∫•u ph·∫©y n·∫øu c√≥ v√† chuy·ªÉn ƒë·ªïi sang s·ªë nguy√™n
            amount_text = message.text.strip().replace(',', '')
            amount = int(amount_text)
            
            # Ki·ªÉm tra s·ªë ti·ªÅn t·ªëi thi·ªÉu
            if amount < 10000:
                bot.send_message(
                    user_id,
                    "‚ùå S·ªë ti·ªÅn t·ªëi thi·ªÉu l√† 10,000 VNƒê. Vui l√≤ng nh·∫≠p l·∫°i.",
                    reply_markup=keyboards.back_button("deposit_money")
                )
                return
            
            # T·∫°o QR code
            qr_image_data = generate_qr_code(user_id, amount)
            
            if qr_image_data:
                # T·∫°o caption
                caption = (
                    f"üí≥ *M√£ QR thanh to√°n*\n\n"
                    f"S·ªë ti·ªÅn: {amount:,} {config.CURRENCY}\n"
                    f"Ng∆∞·ªùi nh·∫≠n: {config.BANK_ACCOUNT_NAME}\n"
                    f"S·ªë t√†i kho·∫£n: {config.BANK_ACCOUNT_NO}\n"
                    f"N·ªôi dung: NAP TIEN USER {user_id}\n\n"
                    f"‚ö†Ô∏è Vui l√≤ng chuy·ªÉn ƒë√∫ng s·ªë ti·ªÅn v√† n·ªôi dung ƒë·ªÉ h·ªá th·ªëng x√°c nh·∫≠n t·ª± ƒë·ªông.\n"
                    f"üëâ Sau khi chuy·ªÉn kho·∫£n, vui l√≤ng ƒë·ª£i 1-5 ph√∫t ƒë·ªÉ h·ªá th·ªëng c·∫≠p nh·∫≠t."
                )
                
                # L∆∞u QR code t·∫°m th·ªùi
                qr_filename = f"qr_{user_id}_{int(datetime.datetime.now().timestamp())}.png"
                with open(qr_filename, "wb") as f:
                    f.write(qr_image_data)
                
                # G·ª≠i QR code
                with open(qr_filename, "rb") as f:
                    bot.send_photo(
                        user_id,
                        f,
                        caption=caption,
                        parse_mode="Markdown",
                        reply_markup=keyboards.back_button("account_menu")
                    )
                
                # X√≥a file t·∫°m
                try:
                    os.remove(qr_filename)
                except:
                    pass
                
                # X√≥a tr·∫°ng th√°i ng∆∞·ªùi d√πng
                if user_id in user_states:
                    del user_states[user_id]
                
                # Th√¥ng b√°o cho admin v·ªÅ giao d·ªãch m·ªõi
                admin_notification = (
                    f"üí∞ *Y√™u c·∫ßu n·∫°p ti·ªÅn m·ªõi (s·ªë ti·ªÅn t√πy ch·ªçn)*\n\n"
                    f"üí∞ *Y√™u c·∫ßu n·∫°p ti·ªÅn m·ªõi*\n\n"
                    f"User: @{username} (ID: `{user_id}`)\n"
                    f"S·ªë ti·ªÅn: {amount:,} {config.CURRENCY}\n"
                    f"Th·ªùi gian: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
                    f"N·ªôi dung chuy·ªÉn kho·∫£n: `NAP TIEN USER {user_id}`"
                )
                notify_admins(bot, admin_notification, "Markdown")
                
            else:
                # Th√¥ng b√°o l·ªói n·∫øu kh√¥ng t·∫°o ƒë∆∞·ª£c QR
                bot.answer_callback_query(
                    call.id,
                    "Kh√¥ng th·ªÉ t·∫°o m√£ QR. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá admin.",
                    show_alert=True
                )
                
                # Quay l·∫°i menu t√†i kho·∫£n
                bot.edit_message_text(
                    f"üë§ *Qu·∫£n l√Ω t√†i kho·∫£n*\n\n"
                    f"Xin ch√†o, {username}!\n"
                    f"S·ªë d∆∞ hi·ªán t·∫°i: {user.get('balance', 0):,} {config.CURRENCY}\n\n"
                    f"Ch·ªçn m·ªôt trong c√°c t√πy ch·ªçn b√™n d∆∞·ªõi:",
                    call.message.chat.id,
                    call.message.message_id,
                    parse_mode="Markdown",
                    reply_markup=keyboards.account_menu()
                )
                
        except Exception as e:
            logger.error(f"Error processing deposit: {str(e)}")
            bot.answer_callback_query(
                call.id,
                "C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.",
                show_alert=True
            )
    
    elif data == "custom_amount":
        # Y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p s·ªë ti·ªÅn t√πy ch·ªçn
        bot.edit_message_text(
            "üí∞ *Nh·∫≠p s·ªë ti·ªÅn n·∫°p*\n\n"
            "Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn b·∫°n mu·ªën n·∫°p (VD: 150000).\n"
            "S·ªë ti·ªÅn t·ªëi thi·ªÉu l√† 10,000 VNƒê.",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=keyboards.back_button("deposit_money")
        )
        
        # L∆∞u tr·∫°ng th√°i ch·ªù nh·∫≠p s·ªë ti·ªÅn
        user_states[user_id] = {
            'state': 'waiting_for_deposit_amount'
        }
    
    # X·ª≠ l√Ω ph√¢n trang
    elif data.startswith("product_page_"):
        page = int(data.split("_")[2])
        if is_admin(user_id):
            products = db.get_all_products()
            bot.edit_message_text(
                "üìã Danh s√°ch s·∫£n ph·∫©m:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.product_list_keyboard(products, page=page, admin=True)
            )
        else:
            products = [p for p in db.get_all_products() if not p.get('is_free', False)]
            bot.edit_message_text(
                "üîê Danh s√°ch t√†i kho·∫£n tr·∫£ ph√≠:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.product_list_keyboard(products, page=page)
            )
    
    elif data.startswith("user_page_") and is_admin(user_id):
        page = int(data.split("_")[2])
        users = db.get_all_users()
        bot.edit_message_text(
            "üìã Danh s√°ch ng∆∞·ªùi d√πng:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.user_list_keyboard(users, page=page)
        )
    
    # Th√™m x·ª≠ l√Ω cho c√°c n√∫t admin
    elif data.startswith("add_money_") and is_admin(user_id):
        # Th√™m ti·ªÅn cho ng∆∞·ªùi d√πng
        target_user_id = int(data.split("_")[2])
        target_user = db.get_user(target_user_id)
        
        if target_user:
            # L∆∞u tr·∫°ng th√°i ƒë·ªÉ nh·∫≠n s·ªë ti·ªÅn
            user_states[user_id] = {
                'state': 'waiting_for_add_money',
                'target_user_id': target_user_id
            }
            
            bot.edit_message_text(
                f"üí∞ Th√™m ti·ªÅn cho ng∆∞·ªùi d√πng:\n\n"
                f"ID: {target_user['id']}\n"
                f"Username: @{target_user.get('username', 'Kh√¥ng c√≥')}\n"
                f"S·ªë d∆∞ hi·ªán t·∫°i: {target_user.get('balance', 0):,} {config.CURRENCY}\n\n"
                f"Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn mu·ªën th√™m:"
            )
    
    elif data.startswith("ban_user_") and is_admin(user_id):
        # C·∫•m ng∆∞·ªùi d√πng
        target_user_id = int(data.split("_")[2])
        target_user = db.get_user(target_user_id)
        
        if target_user:
            # Kh√¥ng cho ph√©p c·∫•m admin
            if is_admin(target_user_id):
                bot.answer_callback_query(call.id, "‚õî Kh√¥ng th·ªÉ c·∫•m qu·∫£n tr·ªã vi√™n kh√°c.", show_alert=True)
                return
            
            # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ b·ªã c·∫•m
            if target_user.get('banned', False):
                bot.answer_callback_query(call.id, "‚ùå Ng∆∞·ªùi d√πng n√†y ƒë√£ b·ªã c·∫•m r·ªìi.", show_alert=True)
                return
            
            # C·∫•m ng∆∞·ªùi d√πng v·ªõi ph∆∞∆°ng ph√°p tr·ª±c ti·∫øp nh·∫•t
            logger.info(f"Admin {username} (ID: {user_id}) is banning user {target_user_id} via callback")
            
            try:
                # ƒê·ªçc d·ªØ li·ªáu hi·ªán t·∫°i
                import json
                import os
                
                users_file_path = config.USERS_FILE
                logger.info(f"Reading users data from {users_file_path}")
                
                if not os.path.exists(users_file_path):
                    logger.error(f"Users file does not exist: {users_file_path}")
                    bot.answer_callback_query(call.id, "‚ùå File d·ªØ li·ªáu ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.", show_alert=True)
                    return
                
                # ƒê·ªçc d·ªØ li·ªáu tr·ª±c ti·∫øp t·ª´ file
                try:
                    with open(users_file_path, 'r', encoding='utf-8') as file:
                        users_data = json.load(file)
                        logger.info(f"Successfully read users data. Found {len(users_data)} users.")
                except json.JSONDecodeError as e:
                    logger.error(f"JSON decode error: {e}")
                    bot.answer_callback_query(call.id, "‚ùå L·ªói ƒë·ªãnh d·∫°ng file d·ªØ li·ªáu.", show_alert=True)
                    return
                except Exception as e:
                    logger.error(f"Error reading users file: {e}")
                    bot.answer_callback_query(call.id, f"‚ùå L·ªói khi ƒë·ªçc file d·ªØ li·ªáu: {str(e)}", show_alert=True)
                    return
                
                # T√¨m v√† c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng
                user_found = False
                for i, user in enumerate(users_data):
                    if user.get('id') == target_user_id:
                        logger.info(f"Found user {target_user_id} at index {i}")
                        users_data[i]['banned'] = True
                        user_found = True
                        break
                
                if not user_found:
                    logger.error(f"User {target_user_id} not found in users data")
                    bot.answer_callback_query(call.id, f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID {target_user_id} trong d·ªØ li·ªáu.", show_alert=True)
                    return
                
                # Ghi d·ªØ li·ªáu tr·ªü l·∫°i file
                try:
                    with open(users_file_path, 'w', encoding='utf-8') as file:
                        json.dump(users_data, file, ensure_ascii=False, indent=2)
                        logger.info(f"Successfully wrote updated data to {users_file_path}")
                except Exception as e:
                    logger.error(f"Error writing to users file: {e}")
                    bot.answer_callback_query(call.id, f"‚ùå L·ªói khi ghi file d·ªØ li·ªáu: {str(e)}", show_alert=True)
                    return
                
                # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                bot.edit_message_text(
                    f"‚úÖ ƒê√£ c·∫•m ng∆∞·ªùi d√πng th√†nh c√¥ng!\n\n"
                    f"ID: {target_user['id']}\n"
                    f"Username: @{target_user.get('username', 'Kh√¥ng c√≥')}",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=keyboards.back_button("back_to_user_list")
                )
                
                # Th√¥ng b√°o cho ng∆∞·ªùi d√πng
                try:
                    bot.send_message(
                        target_user_id,
                        "‚õî T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã c·∫•m. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n."
                    )
                    logger.info(f"Notification sent to banned user {target_user_id}")
                except Exception as e:
                    logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi d√πng b·ªã c·∫•m: {e}")
            
            except Exception as e:
                logger.error(f"Unexpected error in ban user callback: {e}", exc_info=True)
                bot.answer_callback_query(call.id, f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}", show_alert=True)
        else:
            bot.answer_callback_query(call.id, f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}.", show_alert=True)
    
    elif data.startswith("unban_user_") and is_admin(user_id):
        # B·ªè c·∫•m ng∆∞·ªùi d√πng
        target_user_id = int(data.split("_")[2])
        target_user = db.get_user(target_user_id)
        
        if target_user:
            # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng kh√¥ng b·ªã c·∫•m
            if not target_user.get('banned', False):
                bot.answer_callback_query(call.id, "‚ùå Ng∆∞·ªùi d√πng n√†y kh√¥ng b·ªã c·∫•m.", show_alert=True)
                return
            
            # B·ªè c·∫•m ng∆∞·ªùi d√πng s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p tr·ª±c ti·∫øp nh·∫•t
            logger.info(f"Admin {username} (ID: {user_id}) is unbanning user {target_user_id} via callback")
            
            try:
                # ƒê·ªçc d·ªØ li·ªáu ng∆∞·ªùi d√πng
                users = db._read_data(config.USERS_FILE)
                
                # C·∫≠p nh·∫≠t tr·∫°ng th√°i banned
                user_found = False
                for i, user in enumerate(users):
                    if user.get('id') == target_user_id:
                        users[i]['banned'] = False
                        user_found = True
                        break
                
                if not user_found:
                    bot.answer_callback_query(call.id, "‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y ng∆∞·ªùi d√πng trong c∆° s·ªü d·ªØ li·ªáu.", show_alert=True)
                    return
                
                # L∆∞u d·ªØ li·ªáu ƒë√£ c·∫≠p nh·∫≠t
                db._write_data(config.USERS_FILE, users)
                
                # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                bot.edit_message_text(
                    f"‚úÖ ƒê√£ b·ªè c·∫•m ng∆∞·ªùi d√πng th√†nh c√¥ng!\n\n"
                    f"ID: {target_user['id']}\n"
                    f"Username: @{target_user.get('username', 'Kh√¥ng c√≥')}",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=keyboards.back_button("back_to_user_list")
                )
                
                # Th√¥ng b√°o cho ng∆∞·ªùi d√πng
                try:
                    bot.send_message(
                        target_user_id,
                        "‚úÖ T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c b·ªè c·∫•m. B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng bot b√¨nh th∆∞·ªùng."
                    )
                except Exception as e:
                    logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi d√πng ƒë∆∞·ª£c b·ªè c·∫•m: {e}")
            
            except Exception as e:
                logger.error(f"Error unbanning user: {e}")
                bot.answer_callback_query(call.id, f"‚ùå ƒê√£ x·∫£y ra l·ªói khi b·ªè c·∫•m ng∆∞·ªùi d√πng: {str(e)}", show_alert=True)
        else:
            bot.answer_callback_query(call.id, f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}.", show_alert=True)
    
    elif data.startswith("upload_product_") and is_admin(user_id):
        # Upload t√†i kho·∫£n cho s·∫£n ph·∫©m
        product_id = int(data.split("_")[2])
        product = db.get_product(product_id)
        
        if product:
            # L∆∞u tr·∫°ng th√°i ƒë·ªÉ nh·∫≠n danh s√°ch t√†i kho·∫£n
            user_states[user_id] = {
                'state': 'waiting_for_accounts',
                'product_id': product_id
            }
            
            bot.edit_message_text(
                f"üì§ *Upload t√†i kho·∫£n cho s·∫£n ph·∫©m*\n\n"
                f"ID: {product['id']}\n"
                f"T√™n: {product['name']}\n\n"
                f"Vui l√≤ng nh·∫≠p danh s√°ch t√†i kho·∫£n, m·ªói t√†i kho·∫£n m·ªôt d√≤ng.\n"
                f"ƒê·ªãnh d·∫°ng: username:password ho·∫∑c email:password",
                call.message.chat.id,
                call.message.message_id,
                parse_mode="Markdown"
            )
    
    elif data == "broadcast" and is_admin(user_id):
        # B·∫Øt ƒë·∫ßu qu√° tr√¨nh g·ª≠i th√¥ng b√°o
        user_states[user_id] = {
            'state': 'waiting_for_broadcast',
            'data': {}
        }
        
        bot.edit_message_text(
            "üì£ *G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi d√πng*\n\n"
            "Vui l√≤ng nh·∫≠p n·ªôi dung th√¥ng b√°o b·∫°n mu·ªën g·ª≠i.\n"
            "B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng Markdown.\n\n"
            "G·ª≠i /cancel ƒë·ªÉ h·ªßy.",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown"
        )
    
    # Th√™m x·ª≠ l√Ω cho n√∫t "Th√™m ti·ªÅn" trong menu qu·∫£n l√Ω ng∆∞·ªùi d√πng
    elif data == "add_money" and is_admin(user_id):
        # Hi·ªÉn th·ªã form nh·∫≠p ID ng∆∞·ªùi d√πng ƒë·ªÉ th√™m ti·ªÅn
        user_states[user_id] = {
            'state': 'waiting_for_user_id_to_add_money',
            'data': {}
        }
        
        bot.edit_message_text(
            "üí∞ *Th√™m ti·ªÅn cho ng∆∞·ªùi d√πng*\n\n"
            "Vui l√≤ng nh·∫≠p ID ng∆∞·ªùi d√πng b·∫°n mu·ªën th√™m ti·ªÅn:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown"
        )
    
    # Th√™m x·ª≠ l√Ω cho n√∫t xem chi ti·∫øt ng∆∞·ªùi d√πng
    elif data.startswith("view_user_") and is_admin(user_id):
        # Xem chi ti·∫øt ng∆∞·ªùi d√πng
        target_user_id = int(data.split("_")[2])
        target_user = db.get_user(target_user_id)
        
        if target_user:
            # Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng
            purchases = target_user.get('purchases', [])
            purchase_count = len(purchases)
            total_spent = sum(p.get('price', 0) for p in purchases)
            status = 'üö´ B·ªã c·∫•m' if target_user.get('banned', False) else '‚úÖ Ho·∫°t ƒë·ªông'
            
            user_info = (
                f"üë§ *Th√¥ng tin ng∆∞·ªùi d√πng*\n\n"
                f"ID: `{target_user['id']}`\n"
                f"Username: @{target_user.get('username', 'Kh√¥ng c√≥')}\n"
                f"T√™n: {target_user.get('first_name', '')} {target_user.get('last_name', '')}\n"
                f"S·ªë d∆∞: {target_user.get('balance', 0)} VNƒê\n"
                f"Tr·∫°ng th√°i: {status}"
            )
            
            bot.edit_message_text(
                user_info,
                call.message.chat.id,
                call.message.message_id,
                parse_mode="Markdown",
                reply_markup=keyboards.user_detail_keyboard(target_user_id)
            )
    
    elif data == "add_admin" and is_admin(user_id):
        # Y√™u c·∫ßu admin nh·∫≠p ID ng∆∞·ªùi d√πng ƒë·ªÉ th√™m l√†m admin
        user_states[user_id] = {
            'state': 'waiting_for_admin_id',
            'data': {}
        }
        
        bot.edit_message_text(
            "üëë *Th√™m qu·∫£n tr·ªã vi√™n m·ªõi*\n\n"
            "Vui l√≤ng nh·∫≠p ID ng∆∞·ªùi d√πng b·∫°n mu·ªën th√™m l√†m qu·∫£n tr·ªã vi√™n:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown"
        )
    
    # S·ª≠a ph·∫ßn x·ª≠ l√Ω n√∫t edit_product trong h√†m handle_callback_query
    elif data.startswith("edit_product_") and is_admin(user_id):
        # L·∫•y ID s·∫£n ph·∫©m
        product_id = int(data.split("_")[2])
        product = db.get_product(product_id)
        
        if product:
            # L∆∞u tr·∫°ng th√°i ƒë·ªÉ ch·ªânh s·ª≠a s·∫£n ph·∫©m
            user_states[user_id] = {
                'state': 'edit_product_name',
                'product_id': product_id,
                'data': {
                    'id': product_id,
                    'name': product.get('name', ''),
                    'price': product.get('price', 0),
                    'description': product.get('description', '')
                }
            }
            
            bot.edit_message_text(
                f"‚úèÔ∏è *Ch·ªânh s·ª≠a s·∫£n ph·∫©m*\n\n"
                f"ID: {product['id']}\n"
                f"T√™n hi·ªán t·∫°i: {product['name']}\n"
                f"Gi√° hi·ªán t·∫°i: {product['price']:,} {config.CURRENCY}\n"
                f"M√¥ t·∫£ hi·ªán t·∫°i: {product.get('description', 'Kh√¥ng c√≥')}\n\n"
                f"Vui l√≤ng nh·∫≠p t√™n m·ªõi cho s·∫£n ph·∫©m (ho·∫∑c g√µ 'gi·ªØ nguy√™n' ƒë·ªÉ kh√¥ng thay ƒë·ªïi):",
                call.message.chat.id,
                call.message.message_id,
                parse_mode="Markdown"
            )
    
    elif data == "create_product" and is_admin(user_id):
        # B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫°o s·∫£n ph·∫©m m·ªõi
        user_states[user_id] = {
            'state': 'waiting_for_product_name',
            'data': {}
        }
        
        bot.edit_message_text(
            "‚ûï *T·∫°o s·∫£n ph·∫©m m·ªõi*\n\n"
            "Vui l√≤ng nh·∫≠p t√™n s·∫£n ph·∫©m:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown"
        )
    
    elif data == "toggle_premium_visibility" and is_admin(user_id):
        # L·∫•y c√†i ƒë·∫∑t hi·ªán t·∫°i
        settings = db.get_visibility_settings()
        show_premium = settings.get('show_premium', True)
        
        # ƒê·∫£o ng∆∞·ª£c tr·∫°ng th√°i
        new_status = not show_premium
        db.update_visibility_setting('show_premium', new_status)
        
        status_text = "b·∫≠t" if new_status else "t·∫Øt"
        
        # Th√¥ng b√°o cho admin
        bot.answer_callback_query(
            call.id,
            f"ƒê√£ {status_text} hi·ªÉn th·ªã t√†i kho·∫£n tr·∫£ ph√≠",
            show_alert=True
        )
        
        # C·∫≠p nh·∫≠t menu admin
        bot.edit_message_text(
            "‚öôÔ∏è *B·∫£ng ƒëi·ªÅu khi·ªÉn qu·∫£n tr·ªã*\n\n"
            f"Hi·ªÉn th·ªã t√†i kho·∫£n tr·∫£ ph√≠: {'B·∫≠t' if new_status else 'T·∫Øt'}",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=keyboards.admin_panel_keyboard()
        )
    
    # Th√™m x·ª≠ l√Ω cho n√∫t x√≥a s·∫£n ph·∫©m
    elif data.startswith("delete_product_") and is_admin(user_id):
        # X√≥a s·∫£n ph·∫©m
        product_id = int(data.split("_")[2])
        product = db.get_product(product_id)
        
        if product:
            # X√°c nh·∫≠n x√≥a s·∫£n ph·∫©m
            bot.edit_message_text(
                f"üóëÔ∏è *X√°c nh·∫≠n x√≥a s·∫£n ph·∫©m*\n\n"
                f"ID: {product['id']}\n"
                f"T√™n: {product['name']}\n"
                f"Gi√°: {product['price']:,} {config.CURRENCY}\n\n"
                f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m n√†y?",
                call.message.chat.id,
                call.message.message_id,
                parse_mode="Markdown",
                reply_markup=keyboards.confirm_delete_product_keyboard(product_id)
            )
    
    # Th√™m x·ª≠ l√Ω cho n√∫t x√°c nh·∫≠n x√≥a s·∫£n ph·∫©m
    elif data.startswith("confirm_delete_product_") and is_admin(user_id):
        # X√°c nh·∫≠n x√≥a s·∫£n ph·∫©m
        product_id = int(data.split("_")[3])
        
        # X√≥a s·∫£n ph·∫©m
        if db.delete_product(product_id):
            bot.edit_message_text(
                "‚úÖ ƒê√£ x√≥a s·∫£n ph·∫©m th√†nh c√¥ng!",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.back_button("back_to_product_list")
            )
        else:
            bot.edit_message_text(
                "‚ùå Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i sau.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.back_button("back_to_product_list")
            )
    
    # Th√™m x·ª≠ l√Ω cho n√∫t h·ªßy x√≥a s·∫£n ph·∫©m
    elif data == "cancel_delete_product" and is_admin(user_id):
        # H·ªßy x√≥a s·∫£n ph·∫©m
        bot.edit_message_text(
            "‚ùå ƒê√£ h·ªßy x√≥a s·∫£n ph·∫©m.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.back_button("back_to_product_list")
        )
    
    # Th√™m x·ª≠ l√Ω cho n√∫t t√¨m ki·∫øm ng∆∞·ªùi d√πng
    elif data.startswith("user_list_page_"):
        # X·ª≠ l√Ω ph√¢n trang danh s√°ch ng∆∞·ªùi d√πng
        page = int(data.split("_")[3])
        user_states[user_id]['page'] = page
        display_user_list_page(bot, user_id, call.message.message_id)

    elif data == "user_list_search":
        # B·∫Øt ƒë·∫ßu t√¨m ki·∫øm ng∆∞·ªùi d√πng
        user_states[user_id]['state'] = 'searching_user'
        bot.edit_message_text(
            "üîç *T√¨m ki·∫øm ng∆∞·ªùi d√πng*\n\n"
            "Vui l√≤ng nh·∫≠p t√™n ng∆∞·ªùi d√πng ho·∫∑c ID ƒë·ªÉ t√¨m ki·∫øm:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown"
        )

    elif data == "user_list_refresh":
        # L√†m m·ªõi danh s√°ch ng∆∞·ªùi d√πng
        users = db.get_all_users()
        user_states[user_id] = {
            'state': 'viewing_user_list',
            'page': 0,
            'users': users,
            'search_query': ''
        }
        display_user_list_page(bot, user_id, call.message.message_id)
    
    elif data == "my_purchases":
        # Hi·ªÉn th·ªã danh s√°ch t√†i kho·∫£n ƒë√£ mua
        user = db.get_user(user_id)
        purchases = user.get('purchases', [])
        
        if not purchases:
            bot.edit_message_text(
                "üõí B·∫°n ch∆∞a mua t√†i kho·∫£n n√†o.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.back_button("account_menu")
            )
            return
        
        # L∆∞u tr·∫°ng th√°i ƒë·ªÉ x·ª≠ l√Ω ph√¢n trang
        user_states[user_id] = {
            'state': 'viewing_purchases',
            'page': 0,
            'purchases': purchases
        }
        
        bot.edit_message_text(
            "üõí *T√†i kho·∫£n ƒë√£ mua*\n\nCh·ªçn m·ªôt t√†i kho·∫£n ƒë·ªÉ xem chi ti·∫øt:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=keyboards.purchase_history_keyboard(purchases)
        )
    
    elif data.startswith("view_purchase_"):
        # Xem chi ti·∫øt t√†i kho·∫£n ƒë√£ mua
        purchase_idx = int(data.split("_")[2])
        
        # L·∫•y th√¥ng tin mua h√†ng t·ª´ tr·∫°ng th√°i ng∆∞·ªùi d√πng
        state = user_states.get(user_id, {})
        purchases = state.get('purchases', [])
        
        if not purchases or purchase_idx >= len(purchases):
            # N·∫øu kh√¥ng c√≥ th√¥ng tin trong tr·∫°ng th√°i, l·∫•y t·ª´ c∆° s·ªü d·ªØ li·ªáu
            user = db.get_user(user_id)
            purchases = user.get('purchases', [])
        
        if purchase_idx >= len(purchases):
            bot.answer_callback_query(call.id, "‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n.", show_alert=True)
            return
        
        purchase = purchases[purchase_idx]
        product_name = purchase.get('product_name', 'Kh√¥ng t√™n')
        price = purchase.get('price', 0)
        account_info = purchase.get('account_data', 'Kh√¥ng c√≥ th√¥ng tin')
        
        # ƒê·ªãnh d·∫°ng th·ªùi gian mua
        timestamp = purchase.get('timestamp', '')
        if timestamp:
            try:
                import datetime
                dt = datetime.datetime.fromisoformat(timestamp)
                date_str = dt.strftime('%d/%m/%Y %H:%M:%S')
            except:
                date_str = 'Kh√¥ng r√µ'
        else:
            date_str = 'Kh√¥ng r√µ'
        
        bot.edit_message_text(
            f"üõí *Chi ti·∫øt t√†i kho·∫£n ƒë√£ mua*\n\n"
            f"S·∫£n ph·∫©m: {product_name}\n"
            f"Gi√°: {price:,} {config.CURRENCY}\n"
            f"Ng√†y mua: {date_str}\n\n"
            f"üìù *Th√¥ng tin t√†i kho·∫£n:*\n"
            f"`{account_info}`",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=keyboards.back_button("back_to_purchases")
        )
    
    elif data == "back_to_purchases":
        # Quay l·∫°i danh s√°ch t√†i kho·∫£n ƒë√£ mua
        state = user_states.get(user_id, {})
        page = state.get('page', 0)
        purchases = state.get('purchases', [])
        
        if not purchases:
            # N·∫øu kh√¥ng c√≥ th√¥ng tin trong tr·∫°ng th√°i, l·∫•y t·ª´ c∆° s·ªü d·ªØ li·ªáu
            user = db.get_user(user_id)
            purchases = user.get('purchases', [])
        
        bot.edit_message_text(
            "üõí *T√†i kho·∫£n ƒë√£ mua*\n\nCh·ªçn m·ªôt t√†i kho·∫£n ƒë·ªÉ xem chi ti·∫øt:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=keyboards.purchase_history_keyboard(purchases, page)
        )
    
    elif data.startswith("purchase_page_"):
        # X·ª≠ l√Ω ph√¢n trang danh s√°ch t√†i kho·∫£n ƒë√£ mua
        page = int(data.split("_")[2])
        
        state = user_states.get(user_id, {})
        purchases = state.get('purchases', [])
        
        if not purchases:
            # N·∫øu kh√¥ng c√≥ th√¥ng tin trong tr·∫°ng th√°i, l·∫•y t·ª´ c∆° s·ªü d·ªØ li·ªáu
            user = db.get_user(user_id)
            purchases = user.get('purchases', [])
        
        # C·∫≠p nh·∫≠t trang hi·ªán t·∫°i
        if user_id in user_states:
            user_states[user_id]['page'] = page
        else:
            user_states[user_id] = {
                'state': 'viewing_purchases',
                'page': page,
                'purchases': purchases
            }
        
        bot.edit_message_text(
            "üõí *T√†i kho·∫£n ƒë√£ mua*\n\nCh·ªçn m·ªôt t√†i kho·∫£n ƒë·ªÉ xem chi ti·∫øt:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=keyboards.purchase_history_keyboard(purchases, page)
        )
    
    # ƒê√°nh d·∫•u callback ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
    bot.answer_callback_query(call.id)

def add_admin_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /add_admin - Th√™m admin m·ªõi"""
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    
    logger.info(f"Admin {username} (ID: {user_id}) started add_admin process")
    
    # Ph√¢n t√≠ch c√∫ ph√°p l·ªánh
    args = message.text.split()
    
    if len(args) < 2:
        bot.send_message(
            user_id,
            "‚ùå S·ª≠ d·ª•ng sai c√∫ ph√°p. Vui l√≤ng s·ª≠ d·ª•ng: /add_admin [user_id]\n"
            "V√≠ d·ª•: /add_admin 123456789"
        )
        return
    
    try:
        new_admin_id = int(args[1])
    except ValueError:
        bot.send_message(user_id, "‚ùå ID ng∆∞·ªùi d√πng ph·∫£i l√† m·ªôt s·ªë.")
        return
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ l√† admin ch∆∞a
    if is_admin(new_admin_id):
        bot.send_message(user_id, "‚ùå Ng∆∞·ªùi d√πng n√†y ƒë√£ l√† admin.")
        return
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ t·ªìn t·∫°i kh√¥ng
    new_admin = db.get_user(new_admin_id)
    if not new_admin:
        bot.send_message(user_id, "‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID n√†y.")
        return
    
    # Th√™m ng∆∞·ªùi d√πng v√†o danh s√°ch admin
    admin_ids = config.ADMIN_IDS.copy()
    admin_ids.append(new_admin_id)
    
    # C·∫≠p nh·∫≠t file config.py
    try:
        with open('config.py', 'r', encoding='utf-8') as file:
            config_content = file.read()
        
        # T√¨m v√† thay th·∫ø d√≤ng ADMIN_IDS
        import re
        new_admin_line = f"ADMIN_IDS = {str(admin_ids)}"
        config_content = re.sub(r'ADMIN_IDS = \[.*?\]', new_admin_line, config_content, flags=re.DOTALL)
        
        with open('config.py', 'w', encoding='utf-8') as file:
            file.write(config_content)
        
        # C·∫≠p nh·∫≠t bi·∫øn ADMIN_IDS trong config
        config.ADMIN_IDS = admin_ids
        
        bot.send_message(
            user_id,
            f"‚úÖ ƒê√£ th√™m ng∆∞·ªùi d√πng ID: {new_admin_id} (@{new_admin.get('username', 'Kh√¥ng c√≥')}) l√†m admin th√†nh c√¥ng!\n\n"
            f"‚ö†Ô∏è L∆∞u √Ω: B·∫°n c·∫ßn kh·ªüi ƒë·ªông l·∫°i bot ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi."
        )
        
        # Th√¥ng b√°o cho ng∆∞·ªùi d√πng m·ªõi ƒë∆∞·ª£c th√™m l√†m admin
        try:
            bot.send_message(
                new_admin_id,
                "üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë∆∞·ª£c th√™m l√†m qu·∫£n tr·ªã vi√™n c·ªßa bot.\n"
                "S·ª≠ d·ª•ng /help ƒë·ªÉ xem c√°c l·ªánh qu·∫£n tr·ªã vi√™n."
            )
        except Exception as e:
            logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi d√πng {new_admin_id}: {e}")
            
    except Exception as e:
        logger.error(f"L·ªói khi c·∫≠p nh·∫≠t file config.py: {e}")
        bot.send_message(
            user_id,
            "‚ùå ƒê√£ x·∫£y ra l·ªói khi th√™m admin. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c th√™m th·ªß c√¥ng v√†o file config.py."
        )

# Th√™m h√†m ti·ªán √≠ch ƒë·ªÉ g·ª≠i th√¥ng b√°o cho t·∫•t c·∫£ admin
def notify_admins(bot: TeleBot, message: str, parse_mode: str = None) -> None:
    """G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ admin"""
    for admin_id in config.ADMIN_IDS:
        try:
            bot.send_message(admin_id, message, parse_mode=parse_mode)
        except Exception as e:
            logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn admin {admin_id}: {e}")

def debug_user_command(bot: TeleBot, message: Message) -> None:
    """L·ªánh debug ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu ng∆∞·ªùi d√πng"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        return
    
    args = message.text.split()
    if len(args) < 2:
        bot.send_message(user_id, "S·ª≠ d·ª•ng: /debug_user [user_id]")
        return
    
    try:
        target_user_id = int(args[1])
        user = db.get_user(target_user_id)
        if user:
            bot.send_message(user_id, f"User data: {json.dumps(user, indent=2)}")
        else:
            bot.send_message(user_id, f"User with ID {target_user_id} not found")
    except Exception as e:
        bot.send_message(user_id, f"Error: {str(e)}")

def check_ban_command(bot: TeleBot, message: Message) -> None:
    """L·ªánh ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i c·∫•m c·ªßa ng∆∞·ªùi d√πng"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        bot.send_message(user_id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.")
        return
    
    args = message.text.split()
    if len(args) < 2:
        bot.send_message(user_id, "S·ª≠ d·ª•ng: /check_ban [user_id]")
        return
    
    try:
        target_user_id = int(args[1])
        user = db.get_user(target_user_id)
        if user:
            is_banned = is_user_banned(target_user_id)
            bot.send_message(user_id, f"User {target_user_id} banned status: {is_banned}")
        else:
            bot.send_message(user_id, f"User with ID {target_user_id} not found")
    except Exception as e:
        bot.send_message(user_id, f"Error: {str(e)}")

def is_user_banned(user_id: int) -> bool:
    """Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ b·ªã c·∫•m kh√¥ng"""
    return db.is_user_banned(user_id)

def force_ban_command(bot: TeleBot, message: Message) -> None:
    """L·ªánh c·∫•m ng∆∞·ªùi d√πng tr·ª±c ti·∫øp"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        bot.send_message(user_id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.")
        return
    
    args = message.text.split()
    if len(args) < 2:
        bot.send_message(user_id, "S·ª≠ d·ª•ng: /force_ban [user_id]")
        return
    
    try:
        target_user_id = int(args[1])
        
        # Ki·ªÉm tra ng∆∞·ªùi d√πng t·ªìn t·∫°i
        target_user = db.get_user(target_user_id)
        if not target_user:
            bot.send_message(user_id, f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}.")
            return
        
        # S·ª≠ d·ª•ng h√†m ban_user t·ª´ database
        success = db.ban_user(target_user_id)
        
        if success:
            bot.send_message(user_id, f"‚úÖ ƒê√£ c·∫•m ng∆∞·ªùi d√πng {target_user_id} th√†nh c√¥ng!")
            
            # Th√¥ng b√°o cho ng∆∞·ªùi d√πng
            try:
                bot.send_message(
                    target_user_id,
                    "‚õî T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã c·∫•m. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n."
                )
            except Exception:
                pass  # Kh√¥ng c·∫ßn x·ª≠ l√Ω ngo·∫°i l·ªá ·ªü ƒë√¢y
        else:
            bot.send_message(user_id, f"‚ùå Kh√¥ng th·ªÉ c·∫•m ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}.")
    except Exception as e:
        bot.send_message(user_id, f"Error: {str(e)}")

def generate_qr_code(user_id: int, amount: int = 0) -> Optional[bytes]:
    """
    T·∫°o QR code chuy·ªÉn kho·∫£n ng√¢n h√†ng s·ª≠ d·ª•ng API VietQR
    
    Args:
        user_id: ID ng∆∞·ªùi d√πng (ƒë·ªÉ t·∫°o n·ªôi dung giao d·ªãch)
        amount: S·ªë ti·ªÅn c·∫ßn chuy·ªÉn, m·∫∑c ƒë·ªãnh l√† 0 ƒë·ªÉ ng∆∞·ªùi d√πng t·ª± nh·∫≠p
    
    Returns:
        bytes: D·ªØ li·ªáu h√¨nh ·∫£nh QR code ho·∫∑c None n·∫øu c√≥ l·ªói
    """
    try:
        # T·∫°o n·ªôi dung chuy·ªÉn kho·∫£n v·ªõi ID ng∆∞·ªùi d√πng ƒë·ªÉ d·ªÖ ƒë·ªëi so√°t
        add_info = f"NAP TIEN USER {user_id}"
        
        # Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i ƒë·∫øn API
        payload = {
            "accountNo": config.BANK_ACCOUNT_NO,
            "accountName": config.BANK_ACCOUNT_NAME,
            "acqId": config.BANK_ACQ_ID,
            "addInfo": add_info,
            "amount": str(amount) if amount > 0 else "",
            "template": "compact"
        }
        
        # Headers cho API
        headers = {
            "x-client-id": config.VIETQR_CLIENT_ID,
            "x-api-key": config.VIETQR_API_KEY,
            "Content-Type": "application/json"
        }
        
        # G·ª≠i request ƒë·∫øn API
        response = requests.post(
            config.VIETQR_API_URL,
            json=payload,
            headers=headers
        )
        
        # Ki·ªÉm tra ph·∫£n h·ªìi
        if response.status_code == 200:
            data = response.json()
            if data.get("code") == "00" and data.get("data"):
                # L·∫•y d·ªØ li·ªáu base64 c·ªßa QR code
                qr_data = data.get("data", {}).get("qrDataBase64", "")
                if qr_data:
                    # Chuy·ªÉn base64 th√†nh bytes
                    return base64.b64decode(qr_data)
        
        # Log l·ªói n·∫øu c√≥
        logger.error(f"VietQR API Error: {response.status_code}, {response.text}")
        
    except Exception as e:
        logger.error(f"Error generating QR code: {str(e)}")
    
    return None

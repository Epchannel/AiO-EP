from telebot import TeleBot
from telebot.types import Message, CallbackQuery, InputMediaPhoto
import config
from database import Database
import keyboards
import re
import datetime
from typing import Dict, List, Optional, Any
import logging
import time
import json
import os
import requests
import base64
from io import BytesIO
import telebot.apihelper
from modules.files import FileManager

# Thi·∫øt l·∫≠p logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

db = Database()

# L∆∞u tr·∫°ng th√°i c·ªßa ng∆∞·ªùi d√πng
user_states = {}

# Kh·ªüi t·∫°o file_manager
file_manager = None

def is_admin(user_id: int) -> bool:
    """Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ ph·∫£i l√† admin kh√¥ng"""
    return user_id in config.ADMIN_IDS

def register_handlers(bot: TeleBot) -> None:
    """ƒêƒÉng k√Ω t·∫•t c·∫£ c√°c handler cho bot"""
    global file_manager
    file_manager = FileManager(bot, db)
    
    # Command handlers
    bot.register_message_handler(lambda msg: start_command(bot, msg), commands=['start'])
    bot.register_message_handler(lambda msg: help_command(bot, msg), commands=['help'])
    bot.register_message_handler(lambda msg: dashboard_command(bot, msg), commands=['dashboard'])
    
    # Admin command handlers
    bot.register_message_handler(lambda msg: create_product_command(bot, msg), commands=['create_product'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: product_list_command(bot, msg), commands=['product_list'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: upload_product_command(bot, msg), commands=['upload_product'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: add_money_command(bot, msg), commands=['add_money'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: user_list_command(bot, msg), commands=['user_list'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: ban_user_command(bot, msg), commands=['ban_user'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: unban_user_command(bot, msg), commands=['unban_user'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: broadcast_command(bot, msg), commands=['broadcast'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: add_admin_command(bot, msg), commands=['add_admin'], func=lambda msg: is_admin(msg.from_user.id))
    
    # Debug commands
    bot.register_message_handler(lambda msg: debug_user_command(bot, msg), commands=['debug_user'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: check_ban_command(bot, msg), commands=['check_ban'], func=lambda msg: is_admin(msg.from_user.id))
    bot.register_message_handler(lambda msg: force_ban_command(bot, msg), commands=['force_ban'], func=lambda msg: is_admin(msg.from_user.id))
    
    # Callback query handlers
    bot.register_callback_query_handler(lambda call: handle_callback_query(bot, call), func=lambda call: True)
    
    # State handlers
    bot.register_message_handler(lambda msg: handle_state(bot, msg), content_types=['text'], func=lambda msg: msg.from_user.id in user_states)

def start_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /start"""
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    
    logger.info(f"User {username} (ID: {user_id}) started the bot")
    
    # Import datetime ƒë·ªÉ s·ª≠ d·ª•ng trong h√†m n√†y
    import datetime
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i ch∆∞a
    user = db.get_user(user_id)
    if not user:
        # T·∫°o ng∆∞·ªùi d√πng m·ªõi
        user_data = {
            'id': user_id,
            'username': username,
            'balance': 0,
            'banned': False,
            'purchases': [],
            'created_at': datetime.datetime.now().isoformat()
        }
        # Th√™m ng∆∞·ªùi d√πng v√†o database
        success = db.add_user(user_data)
        
        if success:
            # S·ª≠ d·ª•ng user_data thay v√¨ g·ªçi l·∫°i get_user
            user = user_data
            
            # Th√¥ng b√°o cho admin v·ªÅ ng∆∞·ªùi d√πng m·ªõi
            admin_notification = (
                f"üë§ *Ng∆∞·ªùi d√πng m·ªõi tham gia!*\n\n"
                f"ID: `{user_id}`\n"
                f"Username: @{username}\n"
                f"Th·ªùi gian: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            )
            notify_admins(bot, admin_notification, parse_mode="Markdown")
        else:
            # Th·ª≠ l·∫•y l·∫°i th√¥ng tin ng∆∞·ªùi d√πng
            user = db.get_user(user_id)
            if not user:
                # N·∫øu v·∫´n kh√¥ng t√¨m th·∫•y, ƒë√¢y l√† l·ªói th·ª±c s·ª±
                logger.error(f"Failed to add new user {username} (ID: {user_id}) to database")
                bot.send_message(user_id, "C√≥ l·ªói x·∫£y ra khi ƒëƒÉng k√Ω t√†i kho·∫£n. Vui l√≤ng th·ª≠ l·∫°i sau.")
                return
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ b·ªã c·∫•m kh√¥ng - in ra log ƒë·ªÉ debug
    is_banned = user.get('banned', False)
    logger.info(f"User {username} (ID: {user_id}) banned status: {is_banned}")
    
    if is_banned:
        bot.send_message(user_id, "‚õî T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã c·∫•m. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.")
        return
    
    # G·ª≠i tin nh·∫Øn ch√†o m·ª´ng
    welcome_text = (
        f"üëã Ch√†o m·ª´ng, {username}!\n\n"
        f"ƒê√¢y l√† bot mua b√°n t√†i kho·∫£n. S·ª≠ d·ª•ng c√°c n√∫t b√™n d∆∞·ªõi ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng.\n\n"
        f"S·ªë d∆∞ hi·ªán t·∫°i: {user.get('balance', 0):,} {config.CURRENCY}"
    )
    
    bot.send_message(
        user_id,
        welcome_text,
        reply_markup=keyboards.main_menu(is_admin(user_id))
    )

def help_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /help"""
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    
    logger.info(f"User {username} (ID: {user_id}) requested help")
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ b·ªã c·∫•m kh√¥ng
    user = db.get_user(user_id)
    if user and user.get('banned', False):
        bot.send_message(user_id, "‚õî T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã c·∫•m. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.")
        return
    
    help_text = (
        "üîç *H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng bot*\n\n"
        "*C√°c l·ªánh c∆° b·∫£n:*\n"
        "/start - Kh·ªüi ƒë·ªông bot\n"
        "/help - Hi·ªÉn th·ªã tr·ª£ gi√∫p\n"
        "/dashboard - M·ªü b·∫£ng ƒëi·ªÅu khi·ªÉn\n\n"
        
        "*C√°ch s·ª≠ d·ª•ng:*\n"
        "1. Ch·ªçn lo·∫°i t√†i kho·∫£n (tr·∫£ ph√≠/mi·ªÖn ph√≠)\n"
        "2. Ch·ªçn s·∫£n ph·∫©m b·∫°n mu·ªën mua\n"
        "3. X√°c nh·∫≠n giao d·ªãch\n"
        "4. Nh·∫≠n th√¥ng tin t√†i kho·∫£n\n\n"
        
        "*N·∫°p ti·ªÅn:*\n"
        "Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n ƒë·ªÉ n·∫°p ti·ªÅn v√†o t√†i kho·∫£n c·ªßa b·∫°n."
    )
    
    # Ch·ªâ hi·ªÉn th·ªã l·ªánh qu·∫£n tr·ªã vi√™n cho admin
    if is_admin(user_id):
        help_text += (
            "\n\n*L·ªánh qu·∫£n tr·ªã vi√™n:*\n"
            "/create\\_product [t√™n] [gi√°] - T·∫°o/s·ª≠a s·∫£n ph·∫©m\n"
            "/product\\_list - Xem danh s√°ch s·∫£n ph·∫©m\n"
            "/upload\\_product [product_id] - Upload t√†i kho·∫£n cho s·∫£n ph·∫©m\n"
            "/add\\_money [user_id] [s·ªë ti·ªÅn] - Th√™m ti·ªÅn cho ng∆∞·ªùi d√πng\n"
            "/user\\_list - Xem danh s√°ch ng∆∞·ªùi d√πng\n"
            "/ban\\_user [user_id] - C·∫•m ng∆∞·ªùi d√πng\n"
            "/unban\\_user [user_id] - B·ªè c·∫•m ng∆∞·ªùi d√πng\n"
            "/broadcast - G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi d√πng\n"
            "/add\\_admin [user_id] - Th√™m qu·∫£n tr·ªã vi√™n m·ªõi\n"
            "/debug\\_user [user_id] - Xem th√¥ng tin debug c·ªßa ng∆∞·ªùi d√πng\n"
            "/check\\_ban [user_id] - Ki·ªÉm tra tr·∫°ng th√°i c·∫•m c·ªßa ng∆∞·ªùi d√πng\n"
            "/force\\_ban [user_id] - C·∫•m ng∆∞·ªùi d√πng (ph∆∞∆°ng ph√°p thay th·∫ø)\n"
        )
    
    bot.send_message(
        user_id,
        help_text,
        parse_mode="Markdown",
        reply_markup=keyboards.back_button()
    )

def dashboard_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /dashboard"""
    user_id = message.from_user.id
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ b·ªã c·∫•m kh√¥ng
    user = db.get_user(user_id)
    if user and user.get('banned', False):
        bot.send_message(user_id, "‚õî T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã c·∫•m. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.")
        return
    
    bot.send_message(
        user_id,
        "üéõÔ∏è *B·∫£ng ƒëi·ªÅu khi·ªÉn*\n\nCh·ªçn m·ªôt t√πy ch·ªçn b√™n d∆∞·ªõi:",
        parse_mode="Markdown",
        reply_markup=keyboards.main_menu(is_admin(user_id))
    )

def create_product_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /create_product"""
    user_id = message.from_user.id
    
    # Ph√¢n t√≠ch c√∫ ph√°p l·ªánh
    args = message.text.split(maxsplit=2)
    
    if len(args) < 3:
        bot.send_message(
            user_id,
            "‚ùå S·ª≠ d·ª•ng sai c√∫ ph√°p. Vui l√≤ng s·ª≠ d·ª•ng: /create_product [t√™n] [gi√°]\n"
            "V√≠ d·ª•: /create_product \"Netflix Premium\" 50000"
        )
        return
    
    name = args[1]
    try:
        price = float(args[2])
    except ValueError:
        bot.send_message(user_id, "‚ùå Gi√° ph·∫£i l√† m·ªôt s·ªë.")
        return
    
    # T·∫°o s·∫£n ph·∫©m m·ªõi
    product_data = {
        'name': name,
        'price': price,
        'is_free': price <= 0,
        'description': f"S·∫£n ph·∫©m: {name}"
    }
    
    product_id = db.create_product(product_data)
    
    bot.send_message(
        user_id,
        f"‚úÖ ƒê√£ t·∫°o s·∫£n ph·∫©m th√†nh c√¥ng!\n\n"
        f"ID: {product_id}\n"
        f"T√™n: {name}\n"
        f"Gi√°: {price:,} {config.CURRENCY}\n"
        f"Lo·∫°i: {'Mi·ªÖn ph√≠' if price <= 0 else 'Tr·∫£ ph√≠'}"
    )

def product_list_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /product_list"""
    user_id = message.from_user.id
    
    products = db.get_all_products()
    
    if not products:
        bot.send_message(user_id, "üì¶ Ch∆∞a c√≥ s·∫£n ph·∫©m n√†o.")
        return
    
    bot.send_message(
        user_id,
        "üìã *Danh s√°ch s·∫£n ph·∫©m*\n\nCh·ªçn m·ªôt s·∫£n ph·∫©m ƒë·ªÉ xem chi ti·∫øt:",
        parse_mode="Markdown",
        reply_markup=keyboards.product_list_keyboard(products, admin=True)
    )

def upload_product_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /upload_product"""
    user_id = message.from_user.id
    
    # Ph√¢n t√≠ch c√∫ ph√°p l·ªánh
    args = message.text.split()
    
    if len(args) < 2:
        bot.send_message(
            user_id,
            "‚ùå S·ª≠ d·ª•ng sai c√∫ ph√°p. Vui l√≤ng s·ª≠ d·ª•ng: /upload_product [product_id]"
        )
        return
    
    try:
        product_id = int(args[1])
    except ValueError:
        bot.send_message(user_id, "‚ùå ID s·∫£n ph·∫©m ph·∫£i l√† m·ªôt s·ªë.")
        return
    
    # Ki·ªÉm tra s·∫£n ph·∫©m t·ªìn t·∫°i
    product = db.get_product(product_id)
    if not product:
        bot.send_message(user_id, f"‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID {product_id}.")
        return
    
    # L∆∞u tr·∫°ng th√°i ng∆∞·ªùi d√πng ƒë·ªÉ x·ª≠ l√Ω tin nh·∫Øn ti·∫øp theo
    user_states[user_id] = {
        'state': 'waiting_for_accounts',
        'product_id': product_id
    }
    
    bot.send_message(
        user_id,
        f"üì§ Vui l√≤ng g·ª≠i danh s√°ch t√†i kho·∫£n cho s·∫£n ph·∫©m *{product['name']}*.\n\n"
        f"M·ªói t√†i kho·∫£n tr√™n m·ªôt d√≤ng, ƒë·ªãnh d·∫°ng: `username:password` ho·∫∑c b·∫•t k·ª≥ ƒë·ªãnh d·∫°ng n√†o b·∫°n mu·ªën.\n\n"
        f"V√≠ d·ª•:\n"
        f"```\n"
        f"user1@example.com:password1\n"
        f"user2@example.com:password2\n"
        f"```",
        parse_mode="Markdown"
    )

def add_money_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /add_money"""
    user_id = message.from_user.id
    
    # Ph√¢n t√≠ch c√∫ ph√°p l·ªánh
    args = message.text.split()
    
    if len(args) < 3:
        bot.send_message(
            user_id,
            "‚ùå S·ª≠ d·ª•ng sai c√∫ ph√°p. Vui l√≤ng s·ª≠ d·ª•ng: /add_money [user_id] [s·ªë ti·ªÅn]"
        )
        return
    
    try:
        target_user_id = int(args[1])
        amount = float(args[2])
    except ValueError:
        bot.send_message(user_id, "‚ùå ID ng∆∞·ªùi d√πng v√† s·ªë ti·ªÅn ph·∫£i l√† s·ªë.")
        return
    
    if amount <= 0:
        bot.send_message(user_id, "‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0.")
        return
    
    # Ki·ªÉm tra ng∆∞·ªùi d√πng t·ªìn t·∫°i
    target_user = db.get_user(target_user_id)
    if not target_user:
        bot.send_message(user_id, f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}.")
        return
    
    # Th√™m ti·ªÅn cho ng∆∞·ªùi d√πng
    success = db.add_money(target_user_id, amount)
    if success:
        new_balance = db.get_user(target_user_id).get('balance', 0)
        bot.send_message(
            user_id,
            f"‚úÖ ƒê√£ th√™m {amount:,} {config.CURRENCY} cho ng∆∞·ªùi d√πng {target_user.get('username', target_user_id)}.\n"
            f"S·ªë d∆∞ m·ªõi: {new_balance:,} {config.CURRENCY}"
        )
        
        # Th√¥ng b√°o cho ng∆∞·ªùi d√πng
        bot.send_message(
            target_user_id,
            f"üí∞ T√†i kho·∫£n c·ªßa b·∫°n v·ª´a ƒë∆∞·ª£c c·ªông {amount:,} {config.CURRENCY}.\n"
            f"S·ªë d∆∞ hi·ªán t·∫°i: {new_balance:,} {config.CURRENCY}"
        )
    else:
        bot.send_message(user_id, "‚ùå Kh√¥ng th·ªÉ th√™m ti·ªÅn cho ng∆∞·ªùi d√πng n√†y.")

def user_list_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /user_list"""
    user_id = message.from_user.id
    
    users = db.get_all_users()
    
    if not users:
        bot.send_message(user_id, "üë• Ch∆∞a c√≥ ng∆∞·ªùi d√πng n√†o.")
        return
    
    # S·∫Øp x·∫øp ng∆∞·ªùi d√πng theo username (a-z)
    # ƒê·∫£m b·∫£o s·∫Øp x·∫øp kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng v√† x·ª≠ l√Ω tr∆∞·ªùng h·ª£p username l√† None
    users = sorted(users, key=lambda x: str(x.get('username', '')).lower() if x.get('username') is not None else '')
    
    # L∆∞u tr·∫°ng th√°i ƒë·ªÉ x·ª≠ l√Ω ph√¢n trang
    user_states[user_id] = {
        'state': 'viewing_user_list',
        'page': 0,
        'users': users,
        'search_query': ''
    }
    
    # Hi·ªÉn th·ªã trang ƒë·∫ßu ti√™n
    display_user_list_page(bot, user_id, message.message_id)

def display_user_list_page(bot: TeleBot, user_id: int, message_id: int = None) -> None:
    """Hi·ªÉn th·ªã m·ªôt trang danh s√°ch ng∆∞·ªùi d√πng"""
    try:
        state = user_states.get(user_id, {})
        users = state.get('users', [])
        page = state.get('page', 0)
        search_query = state.get('search_query', '').lower()
        
        # S·∫Øp x·∫øp ng∆∞·ªùi d√πng theo username (a-z)
        # ƒê·∫£m b·∫£o s·∫Øp x·∫øp kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng v√† x·ª≠ l√Ω tr∆∞·ªùng h·ª£p username l√† None
        users = sorted(users, key=lambda x: str(x.get('username', '')).lower() if x.get('username') is not None else '')
        
        # C·∫≠p nh·∫≠t users ƒë√£ s·∫Øp x·∫øp v√†o state
        if user_id in user_states:
            user_states[user_id]['users'] = users
        
        # L·ªçc ng∆∞·ªùi d√πng theo t·ª´ kh√≥a t√¨m ki·∫øm n·∫øu c√≥
        if search_query:
            filtered_users = []
            for user in users:
                username = str(user.get('username', '')).lower()
                user_id_str = str(user.get('id', ''))
                if search_query in username or search_query in user_id_str:
                    filtered_users.append(user)
            users = filtered_users
        
        # S·ªë ng∆∞·ªùi d√πng m·ªói trang - tƒÉng l√™n 10
        per_page = 10
        total_pages = max(1, (len(users) + per_page - 1) // per_page)
        
        # ƒê·∫£m b·∫£o page kh√¥ng v∆∞·ª£t qu√° total_pages
        page = min(page, total_pages - 1)
        if page < 0:
            page = 0
        
        if len(users) == 0:
            text = "üîç Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o ph√π h·ª£p."
            markup = keyboards.user_list_navigation_keyboard(0, 0, search_query)
        else:
            # L·∫•y ng∆∞·ªùi d√πng cho trang hi·ªán t·∫°i
            start_idx = page * per_page
            end_idx = min(start_idx + per_page, len(users))
            current_users = users[start_idx:end_idx]
            
            # T·∫°o n·ªôi dung tin nh·∫Øn
            text = f"üë• *Danh s√°ch ng∆∞·ªùi d√πng* (Trang {page+1}/{total_pages})\n\n"
            
            for i, user in enumerate(current_users, 1):
                # Escape special characters in username to prevent Markdown parsing issues
                username = user.get('username', 'Kh√¥ng c√≥')
                # Replace any Markdown special characters with escaped versions
                username = username.replace('_', '\\_').replace('*', '\\*').replace('`', '\\`').replace('[', '\\[')
                
                user_id_val = user.get('id', 'N/A')
                balance = user.get('balance', 0)
                banned = "üö´" if user.get('banned', False) else "‚úÖ"
                
                text += f"{i}. {banned} @{username} (ID: `{user_id_val}`)\n   üí∞ {balance:,} {config.CURRENCY}\n\n"
            
            # T·∫°o b√†n ph√≠m ƒëi·ªÅu h∆∞·ªõng
            markup = keyboards.user_list_navigation_keyboard(page, total_pages, search_query)
        
        # G·ª≠i ho·∫∑c c·∫≠p nh·∫≠t tin nh·∫Øn
        if message_id:
            try:
                bot.edit_message_text(
                    text,
                    user_id,
                    message_id,
                    parse_mode="Markdown",
                    reply_markup=markup
                )
            except telebot.apihelper.ApiTelegramException as e:
                # B·ªè qua l·ªói "message is not modified"
                if "message is not modified" not in str(e):
                    logger.error(f"Error updating user list message: {e}")
                    # N·∫øu l·ªói li√™n quan ƒë·∫øn Markdown, th·ª≠ g·ª≠i l·∫°i kh√¥ng c√≥ parse_mode
                    if "can't parse entities" in str(e):
                        try:
                            bot.edit_message_text(
                                text.replace('*', '').replace('`', ''),  # Remove Markdown formatting
                                user_id,
                                message_id,
                                reply_markup=markup
                            )
                            return
                        except Exception as inner_e:
                            logger.error(f"Error sending plain text message: {inner_e}")
                    
                    # N·∫øu v·∫´n kh√¥ng th·ªÉ, g·ª≠i tin nh·∫Øn m·ªõi
                    bot.send_message(
                        user_id,
                        text,
                        parse_mode="Markdown",
                        reply_markup=markup
                    )
            except Exception as e:
                logger.error(f"Error updating user list message: {e}")
                # N·∫øu kh√¥ng th·ªÉ c·∫≠p nh·∫≠t, g·ª≠i tin nh·∫Øn m·ªõi
                bot.send_message(
                    user_id,
                    text,
                    parse_mode="Markdown",
                    reply_markup=markup
                )
        else:
            bot.send_message(
                user_id,
                text,
                parse_mode="Markdown",
                reply_markup=markup
            )
    except Exception as e:
        logger.error(f"Error in display_user_list_page: {e}")
        try:
            # Send a simple message without Markdown formatting
            bot.send_message(
                user_id,
                "‚ùå ƒê√£ x·∫£y ra l·ªói khi hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i sau.",
                reply_markup=keyboards.back_button("admin_panel")
            )
        except:
            pass

def ban_user_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /ban_user"""
    user_id = message.from_user.id
    
    # Ki·ªÉm tra quy·ªÅn admin
    if not is_admin(user_id):
        bot.send_message(user_id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.")
        return
    
    # Ph√¢n t√≠ch c√∫ ph√°p l·ªánh
    args = message.text.split()
    
    if len(args) < 2:
        bot.send_message(
            user_id,
            "‚ùå S·ª≠ d·ª•ng sai c√∫ ph√°p. Vui l√≤ng s·ª≠ d·ª•ng: /ban_user [user_id]"
        )
        return
    
    try:
        target_user_id = int(args[1])
    except ValueError:
        bot.send_message(user_id, "‚ùå ID ng∆∞·ªùi d√πng ph·∫£i l√† m·ªôt s·ªë.")
        return
    
    # Ki·ªÉm tra ng∆∞·ªùi d√πng t·ªìn t·∫°i
    target_user = db.get_user(target_user_id)
    if not target_user:
        bot.send_message(user_id, f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}.")
        return
    
    # Kh√¥ng th·ªÉ c·∫•m admin
    if target_user_id in config.ADMIN_IDS:
        bot.send_message(user_id, "‚ùå Kh√¥ng th·ªÉ c·∫•m qu·∫£n tr·ªã vi√™n.")
        return
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ b·ªã c·∫•m ch∆∞a
    if target_user.get('banned', False):
        bot.send_message(user_id, f"‚ùå Ng∆∞·ªùi d√πng {target_user.get('username', target_user_id)} ƒë√£ b·ªã c·∫•m r·ªìi.")
        return
    
    # S·ª≠ d·ª•ng h√†m ban_user t·ª´ database
    logger.info(f"Admin {message.from_user.username} (ID: {user_id}) is banning user {target_user_id}")
    success = db.ban_user(target_user_id)
    
    if success:
        # G·ª≠i th√¥ng b√°o th√†nh c√¥ng
        bot.send_message(
            user_id,
            f"‚úÖ ƒê√£ c·∫•m ng∆∞·ªùi d√πng {target_user.get('username', target_user_id)} th√†nh c√¥ng."
        )
        
        # Th√¥ng b√°o cho ng∆∞·ªùi d√πng
        try:
            bot.send_message(
                target_user_id,
                "‚õî T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã c·∫•m. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n."
            )
            logger.info(f"Notification sent to banned user {target_user_id}")
        except Exception as e:
            logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi d√πng b·ªã c·∫•m: {e}")
    else:
        bot.send_message(user_id, f"‚ùå Kh√¥ng th·ªÉ c·∫•m ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}. H√£y ki·ªÉm tra l·∫°i ho·∫∑c th·ª≠ l·∫°i sau.")

def unban_user_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /unban_user"""
    user_id = message.from_user.id
    
    # Ki·ªÉm tra quy·ªÅn admin
    if not is_admin(user_id):
        bot.send_message(user_id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.")
        return
    
    # Ph√¢n t√≠ch c√∫ ph√°p l·ªánh
    args = message.text.split()
    
    if len(args) < 2:
        bot.send_message(
            user_id,
            "‚ùå S·ª≠ d·ª•ng sai c√∫ ph√°p. Vui l√≤ng s·ª≠ d·ª•ng: /unban_user [user_id]"
        )
        return
    
    try:
        target_user_id = int(args[1])
    except ValueError:
        bot.send_message(user_id, "‚ùå ID ng∆∞·ªùi d√πng ph·∫£i l√† m·ªôt s·ªë.")
        return
    
    # Ki·ªÉm tra ng∆∞·ªùi d√πng t·ªìn t·∫°i
    target_user = db.get_user(target_user_id)
    if not target_user:
        bot.send_message(user_id, f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}.")
        return
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ b·ªã c·∫•m kh√¥ng
    if not target_user.get('banned', False):
        bot.send_message(user_id, f"‚ùå Ng∆∞·ªùi d√πng {target_user.get('username', target_user_id)} kh√¥ng b·ªã c·∫•m.")
        return
    
    # S·ª≠ d·ª•ng h√†m unban_user t·ª´ database
    logger.info(f"Admin {message.from_user.username} (ID: {user_id}) is unbanning user {target_user_id}")
    success = db.unban_user(target_user_id)
    
    if success:
        # G·ª≠i th√¥ng b√°o th√†nh c√¥ng
        bot.send_message(
            user_id,
            f"‚úÖ ƒê√£ b·ªè c·∫•m ng∆∞·ªùi d√πng {target_user.get('username', target_user_id)} th√†nh c√¥ng."
        )
        
        # Th√¥ng b√°o cho ng∆∞·ªùi d√πng
        try:
            bot.send_message(
                target_user_id,
                "üéâ T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c b·ªè c·∫•m. B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng bot b√¨nh th∆∞·ªùng."
            )
            logger.info(f"Notification sent to unbanned user {target_user_id}")
        except Exception as e:
            logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi d√πng ƒë∆∞·ª£c b·ªè c·∫•m: {e}")
    else:
        bot.send_message(user_id, f"‚ùå Kh√¥ng th·ªÉ b·ªè c·∫•m ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}. H√£y ki·ªÉm tra l·∫°i ho·∫∑c th·ª≠ l·∫°i sau.")

def broadcast_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /broadcast - G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi d√πng"""
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    
    logger.info(f"Admin {username} (ID: {user_id}) started broadcast")
    
    # L∆∞u tr·∫°ng th√°i ƒë·ªÉ nh·∫≠n n·ªôi dung th√¥ng b√°o
    user_states[user_id] = {
        'state': 'waiting_for_broadcast',
        'data': {}
    }
    
    bot.send_message(
        user_id,
        "üì£ *G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi d√πng*\n\n"
        "Vui l√≤ng nh·∫≠p n·ªôi dung th√¥ng b√°o b·∫°n mu·ªën g·ª≠i.\n"
        "B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng Markdown.\n\n"
        "G·ª≠i /cancel ƒë·ªÉ h·ªßy.",
        parse_mode="Markdown"
    )

def handle_state(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω tin nh·∫Øn d·ª±a tr√™n tr·∫°ng th√°i c·ªßa ng∆∞·ªùi d√πng"""
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    text = message.text
    
    logger.info(f"User {username} (ID: {user_id}) sent message in state {user_states.get(user_id, {}).get('state')}: {text}")
    
    if user_id not in user_states:
        return
    
    state = user_states[user_id]['state']
    
    # Ki·ªÉm tra l·ªánh h·ªßy
    if text == '/cancel':
        del user_states[user_id]
        bot.send_message(user_id, "‚ùå ƒê√£ h·ªßy thao t√°c.")
        return
    
    # X·ª≠ l√Ω c√°c tr·∫°ng th√°i
    if state == 'waiting_for_product_name':
        # L∆∞u t√™n s·∫£n ph·∫©m v√† chuy·ªÉn sang tr·∫°ng th√°i ch·ªù gi√°
        user_states[user_id]['data']['name'] = text
        user_states[user_id]['state'] = 'waiting_for_product_price'
        
        bot.send_message(
            user_id,
            f"üëç ƒê√£ l∆∞u t√™n s·∫£n ph·∫©m: *{text}*\n\n"
            f"Vui l√≤ng nh·∫≠p gi√° cho s·∫£n ph·∫©m (s·ªë):",
            parse_mode="Markdown"
        )
    
    elif state == 'waiting_for_product_price':
        # X·ª≠ l√Ω gi√° s·∫£n ph·∫©m
        try:
            price = float(text)
            if price < 0:
                bot.send_message(user_id, "‚ùå Gi√° s·∫£n ph·∫©m kh√¥ng th·ªÉ √¢m.")
                return
        except ValueError:
            bot.send_message(user_id, "‚ùå Gi√° s·∫£n ph·∫©m ph·∫£i l√† m·ªôt s·ªë.")
            return
        
        # L·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m
        product_name = user_states[user_id]['data']['name']
        
        # Chuy·ªÉn sang tr·∫°ng th√°i ch·ªù m√¥ t·∫£
        user_states[user_id]['data']['price'] = price
        user_states[user_id]['state'] = 'waiting_for_product_description'
        
        bot.send_message(
            user_id,
            f"üëç ƒê√£ l∆∞u gi√° s·∫£n ph·∫©m: *{price:,}* {config.CURRENCY}\n\n"
            f"Vui l√≤ng nh·∫≠p m√¥ t·∫£ cho s·∫£n ph·∫©m:",
            parse_mode="Markdown"
        )
    
    elif state == 'waiting_for_product_description':
        # X·ª≠ l√Ω m√¥ t·∫£ s·∫£n ph·∫©m
        product_data = user_states[user_id]['data']
        product_data['description'] = text
        
        # T·∫°o s·∫£n ph·∫©m m·ªõi
        new_id = db.create_product(product_data)
        
        # X√≥a tr·∫°ng th√°i
        del user_states[user_id]
        
        bot.send_message(
            user_id,
            f"‚úÖ ƒê√£ t·∫°o s·∫£n ph·∫©m m·ªõi th√†nh c√¥ng!\n\n"
            f"ID: {new_id}\n"
            f"T√™n: {product_data['name']}\n"
            f"Gi√°: {product_data['price']:,} {config.CURRENCY}\n"
            f"M√¥ t·∫£: {text}",
            reply_markup=keyboards.back_button("back_to_product_list")
        )
    
    elif state == 'edit_product_name':
        # X·ª≠ l√Ω t√™n s·∫£n ph·∫©m m·ªõi
        product_id = user_states[user_id]['product_id']
        product_data = user_states[user_id]['data']
        
        if text.lower() != 'gi·ªØ nguy√™n':
            product_data['name'] = text
        
        # Chuy·ªÉn sang tr·∫°ng th√°i ch·ªânh s·ª≠a gi√°
        user_states[user_id]['state'] = 'edit_product_price'
        
        bot.send_message(
            user_id,
            f"üëç T√™n s·∫£n ph·∫©m: *{product_data['name']}*\n\n"
            f"Vui l√≤ng nh·∫≠p gi√° m·ªõi cho s·∫£n ph·∫©m (ho·∫∑c g√µ 'gi·ªØ nguy√™n' ƒë·ªÉ kh√¥ng thay ƒë·ªïi):",
            parse_mode="Markdown"
        )
    
    elif state == 'edit_product_price':
        # X·ª≠ l√Ω gi√° s·∫£n ph·∫©m m·ªõi
        product_id = user_states[user_id]['product_id']
        product_data = user_states[user_id]['data']
        
        if text.lower() != 'gi·ªØ nguy√™n':
            try:
                price = float(text)
                if price < 0:
                    bot.send_message(user_id, "‚ùå Gi√° s·∫£n ph·∫©m kh√¥ng th·ªÉ √¢m.")
                    return
                product_data['price'] = price
            except ValueError:
                bot.send_message(user_id, "‚ùå Gi√° s·∫£n ph·∫©m ph·∫£i l√† m·ªôt s·ªë. Vui l√≤ng nh·∫≠p l·∫°i.")
                return
        
        # Chuy·ªÉn sang tr·∫°ng th√°i ch·ªânh s·ª≠a m√¥ t·∫£
        user_states[user_id]['state'] = 'edit_product_description'
        
        bot.send_message(
            user_id,
            f"üëç Gi√° s·∫£n ph·∫©m: *{product_data['price']:,}* {config.CURRENCY}\n\n"
            f"Vui l√≤ng nh·∫≠p m√¥ t·∫£ m·ªõi cho s·∫£n ph·∫©m (ho·∫∑c g√µ 'gi·ªØ nguy√™n' ƒë·ªÉ kh√¥ng thay ƒë·ªïi):",
            parse_mode="Markdown"
        )
    
    elif state == 'edit_product_description':
        # X·ª≠ l√Ω m√¥ t·∫£ s·∫£n ph·∫©m m·ªõi
        product_id = user_states[user_id]['product_id']
        product_data = user_states[user_id]['data']
        
        if text.lower() != 'gi·ªØ nguy√™n':
            product_data['description'] = text
        
        # C·∫≠p nh·∫≠t s·∫£n ph·∫©m trong c∆° s·ªü d·ªØ li·ªáu
        try:
            db.create_product(product_data)
            
            # X√≥a tr·∫°ng th√°i
            del user_states[user_id]
            
            bot.send_message(
                user_id,
                f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!\n\n"
                f"ID: {product_id}\n"
                f"T√™n: {product_data['name']}\n"
                f"Gi√°: {product_data['price']:,} {config.CURRENCY}\n"
                f"M√¥ t·∫£: {product_data.get('description', 'Kh√¥ng c√≥')}",
                reply_markup=keyboards.back_button("back_to_product_list")
            )
        except Exception as e:
            logger.error(f"L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m: {e}")
            bot.send_message(
                user_id,
                "‚ùå ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i sau."
            )
    
    elif state == 'waiting_for_accounts':
        # X·ª≠ l√Ω upload t√†i kho·∫£n
        product_id = user_states[user_id]['product_id']
        product = db.get_product(product_id)
        
        if not product:
            bot.send_message(user_id, "‚ùå S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i.")
            del user_states[user_id]
            return
        
        # Ph√¢n t√≠ch danh s√°ch t√†i kho·∫£n
        accounts = text.strip().split('\n')
        accounts = [account.strip() for account in accounts if account.strip()]
        
        if not accounts:
            bot.send_message(user_id, "‚ùå Danh s√°ch t√†i kho·∫£n kh√¥ng h·ª£p l·ªá.")
            return
        
        # Th√™m t√†i kho·∫£n v√†o c∆° s·ªü d·ªØ li·ªáu
        count = db.add_accounts(product_id, accounts)
        
        # X√≥a tr·∫°ng th√°i
        del user_states[user_id]
        
        bot.send_message(
            user_id,
            f"‚úÖ ƒê√£ th√™m {count} t√†i kho·∫£n cho s·∫£n ph·∫©m *{product['name']}* th√†nh c√¥ng!",
            parse_mode="Markdown"
        )
    
    elif state == 'waiting_for_user_id_to_add_money':
        # X·ª≠ l√Ω ID ng∆∞·ªùi d√πng ƒë·ªÉ th√™m ti·ªÅn
        try:
            target_user_id = int(text.strip())
            target_user = db.get_user(target_user_id)
            
            if not target_user:
                bot.send_message(
                    user_id,
                    "‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID n√†y. Vui l√≤ng ki·ªÉm tra l·∫°i."
                )
                return
            
            # L∆∞u ID ng∆∞·ªùi d√πng v√† chuy·ªÉn sang tr·∫°ng th√°i nh·∫≠p s·ªë ti·ªÅn
            user_states[user_id] = {
                'state': 'waiting_for_add_money_amount',
                'target_user_id': target_user_id
            }
            
            bot.send_message(
                user_id,
                f"üí∞ Th√™m ti·ªÅn cho ng∆∞·ªùi d√πng:\n\n"
                f"ID: {target_user['id']}\n"
                f"Username: @{target_user.get('username', 'Kh√¥ng c√≥')}\n"
                f"S·ªë d∆∞ hi·ªán t·∫°i: {target_user.get('balance', 0):,} {config.CURRENCY}\n\n"
                f"Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn mu·ªën th√™m:"
            )
        except ValueError:
            bot.send_message(
                user_id,
                "‚ùå ID ng∆∞·ªùi d√πng ph·∫£i l√† m·ªôt s·ªë. Vui l√≤ng nh·∫≠p l·∫°i."
            )

    elif state == 'waiting_for_add_money_amount':
        # X·ª≠ l√Ω s·ªë ti·ªÅn c·∫ßn th√™m
        try:
            amount = int(text.strip())
            if amount <= 0:
                bot.send_message(
                    user_id,
                    "‚ùå S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0. Vui l√≤ng nh·∫≠p l·∫°i."
                )
                return
            
            target_user_id = user_states[user_id]['target_user_id']
            target_user = db.get_user(target_user_id)
            
            if not target_user:
                bot.send_message(
                    user_id,
                    "‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng. Vui l√≤ng th·ª≠ l·∫°i."
                )
                del user_states[user_id]
                return
            
            # C·∫≠p nh·∫≠t s·ªë d∆∞
            current_balance = target_user.get('balance', 0)
            new_balance = current_balance + amount
            
            if db.update_user(target_user_id, {'balance': new_balance}):
                # X√≥a tr·∫°ng th√°i
                del user_states[user_id]
                
                bot.send_message(
                    user_id,
                    f"‚úÖ ƒê√£ th√™m {amount:,} {config.CURRENCY} cho ng∆∞·ªùi d√πng @{target_user.get('username', 'Kh√¥ng c√≥')}.\n"
                    f"S·ªë d∆∞ m·ªõi: {new_balance:,} {config.CURRENCY}",
                    reply_markup=keyboards.back_button("back_to_user_management")
                )
                
                # Th√¥ng b√°o cho ng∆∞·ªùi d√πng
                try:
                    bot.send_message(
                        target_user_id,
                        f"üí∞ T√†i kho·∫£n c·ªßa b·∫°n v·ª´a ƒë∆∞·ª£c c·ªông th√™m {amount:,} {config.CURRENCY}.\n"
                        f"S·ªë d∆∞ hi·ªán t·∫°i: {new_balance:,} {config.CURRENCY}"
                    )
                except Exception as e:
                    logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi d√πng {target_user_id}: {e}")
            else:
                bot.send_message(
                    user_id,
                    "‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë d∆∞. Vui l√≤ng th·ª≠ l·∫°i sau."
                )
                del user_states[user_id]
        except ValueError:
            bot.send_message(
                user_id,
                "‚ùå S·ªë ti·ªÅn ph·∫£i l√† m·ªôt s·ªë. Vui l√≤ng nh·∫≠p l·∫°i."
            )
    
    elif state == 'searching_user':
        # X·ª≠ l√Ω t√¨m ki·∫øm ng∆∞·ªùi d√πng
        search_query = message.text.strip().lower()
        user_states[user_id]['search_query'] = search_query
        user_states[user_id]['page'] = 0
        user_states[user_id]['state'] = 'viewing_user_list'
        
        bot.delete_message(user_id, message.message_id)
        display_user_list_page(bot, user_id)

    elif state == 'waiting_for_broadcast':
        # X·ª≠ l√Ω broadcast message
        broadcast_message = text
        
        # X√≥a tr·∫°ng th√°i
        del user_states[user_id]
        
        # Hi·ªÉn th·ªã tin nh·∫Øn x√°c nh·∫≠n
        bot.send_message(
            user_id,
            "üîÑ ƒêang g·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi d√πng... Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t m·ªôt ch√∫t th·ªùi gian."
        )
        
        # Th·ª±c hi·ªán g·ª≠i th√¥ng b√°o
        users = db.get_all_users()
        success_count = 0
        fail_count = 0
        skipped_count = 0
        
        for user_item in users:
            try:
                target_id = user_item.get('id')
                # B·ªè qua ng∆∞·ªùi d√πng b·ªã c·∫•m
                if user_item.get('banned', False):
                    skipped_count += 1
                    continue
                
                if target_id != user_id:  # Kh√¥ng g·ª≠i cho ch√≠nh m√¨nh
                    # Th·ª≠ g·ª≠i v·ªõi Markdown
                    try:
                        bot.send_message(
                            target_id,
                            f"üì£ *TH√îNG B√ÅO T·ª™ QU·∫¢N TR·ªä VI√äN*\n\n{broadcast_message}",
                            parse_mode="Markdown"
                        )
                    except telebot.apihelper.ApiTelegramException as e:
                        # N·∫øu l·ªói Markdown, th·ª≠ g·ª≠i l·∫°i kh√¥ng c√≥ ƒë·ªãnh d·∫°ng
                        if "can't parse entities" in str(e):
                            bot.send_message(
                                target_id,
                                f"üì£ TH√îNG B√ÅO T·ª™ QU·∫¢N TR·ªä VI√äN\n\n{broadcast_message}"
                            )
                    success_count += 1
            except Exception as e:
                logger.error(f"L·ªói khi g·ª≠i th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi d√πng {user_item.get('id')}: {e}")
                fail_count += 1
        
        # G·ª≠i th√¥ng b√°o k·∫øt qu·∫£
        bot.send_message(
            user_id,
            f"‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o th√†nh c√¥ng:\n"
            f"- S·ªë ng∆∞·ªùi nh·∫≠n ƒë∆∞·ª£c: {success_count}\n"
            f"- S·ªë ng∆∞·ªùi b·ªã b·ªè qua (b·ªã c·∫•m): {skipped_count}\n"
            f"- S·ªë l·ªói: {fail_count}"
        )
    
    elif state == 'waiting_for_ban_user_id':
        # X·ª≠ l√Ω ID ng∆∞·ªùi d√πng ƒë·ªÉ c·∫•m
        try:
            target_user_id = int(text.strip())
            
            # Ki·ªÉm tra ng∆∞·ªùi d√πng t·ªìn t·∫°i
            target_user = db.get_user(target_user_id)
            if not target_user:
                bot.send_message(user_id, f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}.")
                return
            
            # Ki·ªÉm tra n·∫øu l√† admin
            if target_user_id in config.ADMIN_IDS:
                bot.send_message(user_id, "‚ùå Kh√¥ng th·ªÉ c·∫•m qu·∫£n tr·ªã vi√™n.")
                return
            
            # Ki·ªÉm tra n·∫øu ƒë√£ b·ªã c·∫•m
            if target_user.get('banned', False):
                bot.send_message(user_id, f"‚ùå Ng∆∞·ªùi d√πng {target_user.get('username', target_user_id)} ƒë√£ b·ªã c·∫•m r·ªìi.")
                return
            
            # C·∫•m ng∆∞·ªùi d√πng
            success = db.ban_user(target_user_id)
            
            # X√≥a tr·∫°ng th√°i
            del user_states[user_id]
            
            if success:
                bot.send_message(
                    user_id,
                    f"‚úÖ ƒê√£ c·∫•m ng∆∞·ªùi d√πng {target_user.get('username', target_user_id)} th√†nh c√¥ng."
                )
                
                # Th√¥ng b√°o cho ng∆∞·ªùi d√πng b·ªã c·∫•m
                try:
                    bot.send_message(
                        target_user_id,
                        "‚õî T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã c·∫•m. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n."
                    )
                except Exception as e:
                    logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi d√πng b·ªã c·∫•m: {e}")
            else:
                bot.send_message(
                    user_id,
                    f"‚ùå Kh√¥ng th·ªÉ c·∫•m ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}. H√£y ki·ªÉm tra l·∫°i ho·∫∑c th·ª≠ l·∫°i sau."
                )
        except ValueError:
            bot.send_message(user_id, "‚ùå ID ng∆∞·ªùi d√πng ph·∫£i l√† m·ªôt s·ªë.")
    
    elif state == 'waiting_for_unban_user_id':
        # X·ª≠ l√Ω ID ng∆∞·ªùi d√πng ƒë·ªÉ b·ªè c·∫•m
        try:
            target_user_id = int(text.strip())
            
            # Ki·ªÉm tra ng∆∞·ªùi d√πng t·ªìn t·∫°i
            target_user = db.get_user(target_user_id)
            if not target_user:
                bot.send_message(user_id, f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}.")
                return
            
            # Ki·ªÉm tra n·∫øu ch∆∞a b·ªã c·∫•m
            if not target_user.get('banned', False):
                bot.send_message(user_id, f"‚ùå Ng∆∞·ªùi d√πng {target_user.get('username', target_user_id)} kh√¥ng b·ªã c·∫•m.")
                return
            
            # B·ªè c·∫•m ng∆∞·ªùi d√πng
            success = db.unban_user(target_user_id)
            
            # X√≥a tr·∫°ng th√°i
            del user_states[user_id]
            
            if success:
                bot.send_message(
                    user_id,
                    f"‚úÖ ƒê√£ b·ªè c·∫•m ng∆∞·ªùi d√πng {target_user.get('username', target_user_id)} th√†nh c√¥ng."
                )
                
                # Th√¥ng b√°o cho ng∆∞·ªùi d√πng ƒë∆∞·ª£c b·ªè c·∫•m
                try:
                    bot.send_message(
                        target_user_id,
                        "üéâ T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c b·ªè c·∫•m. B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng bot b√¨nh th∆∞·ªùng."
                    )
                except Exception as e:
                    logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi d√πng ƒë∆∞·ª£c b·ªè c·∫•m: {e}")
            else:
                bot.send_message(
                    user_id,
                    f"‚ùå Kh√¥ng th·ªÉ b·ªè c·∫•m ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}. H√£y ki·ªÉm tra l·∫°i ho·∫∑c th·ª≠ l·∫°i sau."
                )
        except ValueError:
            bot.send_message(user_id, "‚ùå ID ng∆∞·ªùi d√πng ph·∫£i l√† m·ªôt s·ªë.")
    
    elif state == 'waiting_for_download_url':
        # X·ª≠ l√Ω URL t·∫£i file
        # X√≥a tr·∫°ng th√°i ng∆∞·ªùi d√πng
        del user_states[user_id]
        
        # Chuy·ªÉn x·ª≠ l√Ω cho file_manager
        file_manager.process_download_url(message)
    
    # Th√™m c√°c tr·∫°ng th√°i kh√°c ·ªü ƒë√¢y

def handle_callback_query(bot: TeleBot, call: CallbackQuery) -> None:
    """X·ª≠ l√Ω callback query"""
    user_id = call.from_user.id
    username = call.from_user.username or f"user_{user_id}"
    data = call.data
    
    logger.info(f"User {username} (ID: {user_id}) pressed button: {data}")
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ b·ªã c·∫•m kh√¥ng
    user = db.get_user(user_id)
    if user and user.get('banned', False):
        bot.answer_callback_query(call.id, "‚õî T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã c·∫•m. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n.", show_alert=True)
        return
    
    # Th√™m c√°c h√†m ti·ªán √≠ch
    def get_statistics():
        """L·∫•y th·ªëng k√™ h·ªá th·ªëng"""
        # Import datetime trong ph·∫°m vi h√†m n√†y
        import datetime
        
        users = db.get_all_users()
        total_users = len(users)
        
        # ƒê·∫øm ng∆∞·ªùi d√πng m·ªõi trong ng√†y
        today = datetime.datetime.now().date()
        new_users_today = 0
        
        # Gi·∫£ s·ª≠ c√≥ tr∆∞·ªùng 'created_at' trong d·ªØ li·ªáu ng∆∞·ªùi d√πng
        for user in users:
            if 'created_at' in user:
                try:
                    created_date = datetime.datetime.fromisoformat(user['created_at']).date()
                    if created_date == today:
                        new_users_today += 1
                except (ValueError, TypeError):
                    pass
        
        # ƒê·∫øm t·ªïng ƒë∆°n h√†ng v√† doanh thu
        total_orders = 0
        revenue = 0
        for user in users:
            purchases = user.get('purchases', [])
            total_orders += len(purchases)
            for purchase in purchases:
                revenue += purchase.get('price', 0)
        
        return {
            'total_users': total_users,
            'new_users_today': new_users_today,
            'total_orders': total_orders,
            'revenue': revenue
        }
    
    def process_purchase(user_id, product_id):
        """X·ª≠ l√Ω qu√° tr√¨nh mua h√†ng"""
        try:
            # Import datetime ·ªü ƒë·∫ßu h√†m ƒë·ªÉ ƒë·∫£m b·∫£o n√≥ c√≥ s·∫µn trong ph·∫°m vi c·ªßa h√†m
            import datetime
            
            user = db.get_user(user_id)
            if not user:
                # T·∫°o user m·ªõi n·∫øu kh√¥ng t·ªìn t·∫°i
                user = {
                    'id': user_id,
                    'balance': 0,
                    'purchases': [],
                    'banned': False
                }
                db.add_user(user)
            
            product = db.get_product(product_id)
            if not product:
                return {
                    'success': False,
                    'message': 'S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i.'
                }
            
            # Ki·ªÉm tra s·ªë l∆∞·ª£ng t√†i kho·∫£n c√≤n l·∫°i
            available_accounts = db.count_available_accounts(product_id)
            if available_accounts <= 0:
                return {
                    'success': False,
                    'message': 'S·∫£n ph·∫©m ƒë√£ h·∫øt h√†ng.'
                }
            
            # Ki·ªÉm tra n·∫øu l√† s·∫£n ph·∫©m mi·ªÖn ph√≠, ng∆∞·ªùi d√πng ch·ªâ ƒë∆∞·ª£c nh·∫≠n 1 l·∫ßn
            if product.get('is_free', False):
                user_purchases = user.get('purchases', [])
                for purchase in user_purchases:
                    if purchase.get('product_id') == product_id:
                        return {
                            'success': False,
                            'message': 'B·∫°n ƒë√£ nh·∫≠n s·∫£n ph·∫©m mi·ªÖn ph√≠ n√†y r·ªìi. M·ªói ng∆∞·ªùi ch·ªâ ƒë∆∞·ª£c nh·∫≠n 1 l·∫ßn.'
                        }
            
            # Ki·ªÉm tra s·ªë d∆∞
            user_balance = user.get('balance', 0)
            product_price = product.get('price', 0)
            
            if product_price > 0 and user_balance < product_price:
                return {
                    'success': False,
                    'message': f'S·ªë d∆∞ kh√¥ng ƒë·ªß. B·∫°n c·∫ßn th√™m {product_price - user_balance:,} {config.CURRENCY}.'
                }
            
            # L·∫•y m·ªôt t√†i kho·∫£n
            account = db.get_available_account(product_id)
            if not account:
                return {
                    'success': False,
                    'message': 'Kh√¥ng th·ªÉ l·∫•y t√†i kho·∫£n. Vui l√≤ng th·ª≠ l·∫°i sau.'
                }
            
            # Tr·ª´ ti·ªÅn
            if product_price > 0:
                new_balance = user_balance - product_price
                db.update_user(user_id, {'balance': new_balance})
            else:
                new_balance = user_balance
            
            # L∆∞u l·ªãch s·ª≠ mua h√†ng
            purchase_data = {
                'product_id': product_id,
                'product_name': product.get('name', 'Unknown'),
                'price': product_price,
                'account_data': account.get('data', ''),
                'timestamp': datetime.datetime.now().isoformat()
            }
            
            user_purchases = user.get('purchases', [])
            user_purchases.append(purchase_data)
            db.update_user(user_id, {'purchases': user_purchases})
            
            # Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng
            return {
                'success': True,
                'product_name': product.get('name', 'Unknown'),
                'price': product_price,
                'new_balance': new_balance,
                'account_info': account.get('data', '')
            }
        except Exception as e:
            logger.error(f"Error in process_purchase: {e}")
            return {
                'success': False,
                'message': 'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω giao d·ªãch. Vui l√≤ng th·ª≠ l·∫°i sau.'
            }

    # X·ª≠ l√Ω c√°c callback data
    if data == "premium_accounts":
        # Hi·ªÉn th·ªã danh s√°ch t√†i kho·∫£n tr·∫£ ph√≠
        products = [p for p in db.get_all_products() if not p.get('is_free', False)]
        
        # L·ªçc s·∫£n ph·∫©m c√≥ h√†ng
        products_with_stock = []
        for product in products:
            if db.count_available_accounts(product.get('id', 0)) > 0:
                products_with_stock.append(product)
        
        if not products_with_stock:
            bot.edit_message_text(
                "üì¶ Hi·ªán t·∫°i kh√¥ng c√≥ s·∫£n ph·∫©m tr·∫£ ph√≠ n√†o c√≥ s·∫µn.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.back_button()
            )
            return
        
        bot.edit_message_text(
            "üîê *T√†i kho·∫£n tr·∫£ ph√≠*\n\nCh·ªçn m·ªôt s·∫£n ph·∫©m ƒë·ªÉ xem chi ti·∫øt:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=keyboards.product_list_keyboard(products_with_stock)
        )
    
    elif data == "free_accounts":
        # Hi·ªÉn th·ªã danh s√°ch t√†i kho·∫£n mi·ªÖn ph√≠
        products = [p for p in db.get_all_products() if p.get('is_free', False)]
        
        # L·ªçc s·∫£n ph·∫©m c√≥ h√†ng
        products_with_stock = []
        for product in products:
            if db.count_available_accounts(product.get('id', 0)) > 0:
                products_with_stock.append(product)
        
        if not products_with_stock:
            bot.edit_message_text(
                "üì¶ Hi·ªán t·∫°i kh√¥ng c√≥ s·∫£n ph·∫©m mi·ªÖn ph√≠ n√†o c√≥ s·∫µn.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.back_button()
            )
            return
        
        bot.edit_message_text(
            "üÜì *T√†i kho·∫£n mi·ªÖn ph√≠*\n\nCh·ªçn m·ªôt s·∫£n ph·∫©m ƒë·ªÉ xem chi ti·∫øt:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=keyboards.product_list_keyboard(products_with_stock)
        )
    
    elif data == "tutorial":
        # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        bot.edit_message_text(
            "üìö H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:\n\n"
            "1. Ch·ªçn lo·∫°i t√†i kho·∫£n (tr·∫£ ph√≠/mi·ªÖn ph√≠)\n"
            "2. Ch·ªçn s·∫£n ph·∫©m b·∫°n mu·ªën mua\n"
            "3. X√°c nh·∫≠n thanh to√°n\n"
            "ƒê·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£, vui l√≤ng li√™n h·ªá admin: @ngochacoder",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.back_button()
        )
    
    elif data == "balance":
        # Hi·ªÉn th·ªã s·ªë d∆∞ t√†i kho·∫£n
        user = db.get_user(user_id)
        balance = user.get('balance', 0)
        
        bot.edit_message_text(
            f"üí∞ S·ªë d∆∞ t√†i kho·∫£n c·ªßa b·∫°n: {balance:,} {config.CURRENCY}\n\n"
            "ƒê·ªÉ n·∫°p ti·ªÅn, vui l√≤ng li√™n h·ªá admin @ngochacoder.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.back_button("my_account")  # Thay ƒë·ªïi ·ªü ƒë√¢y
        )
    
    elif data == "admin_panel" and is_admin(user_id):
        # L·∫•y c√†i ƒë·∫∑t hi·ªÉn th·ªã
        settings = db.get_visibility_settings()
        show_premium = settings.get('show_premium', True)
        
        # Hi·ªÉn th·ªã b·∫£ng ƒëi·ªÅu khi·ªÉn qu·∫£n tr·ªã
        bot.edit_message_text(
            "‚öôÔ∏è *B·∫£ng ƒëi·ªÅu khi·ªÉn qu·∫£n tr·ªã*\n\n"
            f"Hi·ªÉn th·ªã t√†i kho·∫£n tr·∫£ ph√≠: {'B·∫≠t' if show_premium else 'T·∫Øt'}\n\n"
            "Ch·ªçn m·ªôt t√πy ch·ªçn b√™n d∆∞·ªõi:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=keyboards.admin_panel_keyboard()
        )
    
    elif data == "manage_products" and is_admin(user_id):
        # Hi·ªÉn th·ªã menu qu·∫£n l√Ω s·∫£n ph·∫©m
        bot.edit_message_text(
            "üì¶ Qu·∫£n l√Ω s·∫£n ph·∫©m",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.product_management()
        )
    
    elif data == "manage_users" and is_admin(user_id):
        # Hi·ªÉn th·ªã menu qu·∫£n l√Ω ng∆∞·ªùi d√πng
        bot.edit_message_text(
            "üë• *Qu·∫£n l√Ω ng∆∞·ªùi d√πng*\n\n"
            "Ch·ªçn m·ªôt t√πy ch·ªçn b√™n d∆∞·ªõi:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=keyboards.user_management()
        )
    
    elif data == "statistics" and is_admin(user_id):
        # Hi·ªÉn th·ªã th·ªëng k√™
        stats = get_statistics()
        bot.edit_message_text(
            f"üìä Th·ªëng k√™:\n\n"
            f"T·ªïng ng∆∞·ªùi d√πng: {stats['total_users']}\n"
            f"Ng∆∞·ªùi d√πng m·ªõi h√¥m nay: {stats['new_users_today']}\n"
            f"T·ªïng ƒë∆°n h√†ng: {stats['total_orders']}\n"
            f"Doanh thu: {stats['revenue']} VNƒê",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.back_button("back_to_admin")
        )
    
    elif data == "product_list" and is_admin(user_id):
        # Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m cho admin
        products = db.get_all_products()
        bot.edit_message_text(
            "üìã Danh s√°ch s·∫£n ph·∫©m:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.product_list_keyboard(products, admin=True)
        )
    
    elif data == "user_list":
        # Hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng
        try:
            users = db.get_all_users()
            
            if not users:
                bot.edit_message_text(
                    "üë• Ch∆∞a c√≥ ng∆∞·ªùi d√πng n√†o.",
                    call.message.chat.id,
                    call.message.message_id
                )
                return
            
            # S·∫Øp x·∫øp ng∆∞·ªùi d√πng theo username (a-z)
            # ƒê·∫£m b·∫£o s·∫Øp x·∫øp kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng v√† x·ª≠ l√Ω tr∆∞·ªùng h·ª£p username l√† None
            users = sorted(users, key=lambda x: str(x.get('username', '')).lower() if x.get('username') is not None else '')
            
            # L∆∞u tr·∫°ng th√°i ƒë·ªÉ x·ª≠ l√Ω ph√¢n trang
            user_states[user_id] = {
                'state': 'viewing_user_list',
                'page': 0,
                'users': users,
                'search_query': ''
            }
            
            # Hi·ªÉn th·ªã trang ƒë·∫ßu ti√™n
            display_user_list_page(bot, user_id, call.message.message_id)
        except Exception as e:
            logger.error(f"Error displaying user list: {e}")
            try:
                bot.answer_callback_query(call.id, "ƒê√£ x·∫£y ra l·ªói khi hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng.", show_alert=True)
            except:
                pass
    
    # X·ª≠ l√Ω c√°c callback c√≥ pattern
    elif data.startswith("view_product_"):
        # Xem chi ti·∫øt s·∫£n ph·∫©m
        product_id = int(data.split("_")[2])
        product = db.get_product(product_id)
        
        if product:
            available_accounts = db.count_available_accounts(product_id)
            bot.edit_message_text(
                f"üè∑Ô∏è {product['name']}\n\n"
                f"üìù M√¥ t·∫£: {product['description']}\n"
                f"üí∞ Gi√°: {product['price']} VNƒê\n"
                f"üì¶ C√≤n l·∫°i: {available_accounts} t√†i kho·∫£n",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.product_detail_keyboard(product_id)
            )
    
    elif data.startswith("admin_product_") and is_admin(user_id):
        # Xem chi ti·∫øt s·∫£n ph·∫©m (admin)
        product_id = int(data.split("_")[2])
        product = db.get_product(product_id)
        
        if product:
            available_accounts = db.count_available_accounts(product_id)
            bot.edit_message_text(
                f"üè∑Ô∏è {product['name']}\n\n"
                f"üìù M√¥ t·∫£: {product['description']}\n"
                f"üí∞ Gi√°: {product['price']} VNƒê\n"
                f"üì¶ C√≤n l·∫°i: {available_accounts} t√†i kho·∫£n\n"
                f"üÜî ID: {product['id']}",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.product_detail_keyboard(product_id, is_admin=True)
            )
    
    elif data.startswith("admin_user_") and is_admin(user_id):
        # Xem chi ti·∫øt ng∆∞·ªùi d√πng
        target_user_id = int(data.split("_")[2])
        target_user = db.get_user(target_user_id)
        
        if target_user:
            status = "üö´ ƒê√£ b·ªã c·∫•m" if target_user.get('banned', False) else "‚úÖ ƒêang ho·∫°t ƒë·ªông"
            bot.edit_message_text(
                f"üë§ Th√¥ng tin ng∆∞·ªùi d√πng:\n\n"
                f"ID: {target_user['id']}\n"
                f"Username: @{target_user.get('username', 'Kh√¥ng c√≥')}\n"
                f"T√™n: {target_user.get('first_name', '')} {target_user.get('last_name', '')}\n"
                f"S·ªë d∆∞: {target_user.get('balance', 0)} VNƒê\n"
                f"Tr·∫°ng th√°i: {status}",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.back_button("back_to_user_list")
            )
    
    elif data.startswith("buy_product_"):
        # Mua s·∫£n ph·∫©m
        product_id = int(data.split("_")[2])
        product = db.get_product(product_id)
        
        if product:
            bot.edit_message_text(
                f"üõí X√°c nh·∫≠n mua:\n\n"
                f"S·∫£n ph·∫©m: {product['name']}\n"
                f"Gi√°: {product['price']} VNƒê\n\n"
                f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën mua s·∫£n ph·∫©m n√†y?",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.confirm_purchase_keyboard(product_id)
            )
    
    elif data.startswith("confirm_purchase_"):
        # X√°c nh·∫≠n mua h√†ng
        product_id = int(data.split("_")[2])
        
        # X·ª≠ l√Ω mua h√†ng
        result = process_purchase(user_id, product_id)
        
        if result and result.get('success'):
            # G·ª≠i th√¥ng tin t√†i kho·∫£n cho ng∆∞·ªùi d√πng
            bot.edit_message_text(
                f"‚úÖ *Mua h√†ng th√†nh c√¥ng!*\n\n"
                f"S·∫£n ph·∫©m: {result['product_name']}\n"
                f"Gi√°: {result['price']:,} {config.CURRENCY}\n"
                f"S·ªë d∆∞ c√≤n l·∫°i: {result['new_balance']:,} {config.CURRENCY}\n\n"
                f"üìù *Th√¥ng tin t√†i kho·∫£n:*\n"
                f"`{result['account_info']}`\n\n"
                f"C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•!",
                call.message.chat.id,
                call.message.message_id,
                parse_mode="Markdown",
                reply_markup=keyboards.back_button()
            )
            
            
            # G·ª≠i th√¥ng b√°o cho admin v·ªÅ giao d·ªãch th√†nh c√¥ng
            # Import datetime
            import datetime
            current_time = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')

            # Escape any special characters in username and product name
            safe_username = username.replace('_', '\\_').replace('*', '\\*').replace('`', '\\`').replace('[', '\\[')
            safe_product_name = result['product_name'].replace('_', '\\_').replace('*', '\\*').replace('`', '\\`').replace('[', '\\[')

            admin_notification = (
                f"üí∞ *Giao d·ªãch m·ªõi th√†nh c√¥ng!*\n\n"
                f"Ng∆∞·ªùi d√πng: @{safe_username} (ID: `{user_id}`)\n"
                f"S·∫£n ph·∫©m: {safe_product_name}\n"
                f"Gi√°: {result['price']:,} {config.CURRENCY}\n"
                f"Th·ªùi gian: {current_time}"
            )
            notify_admins(bot, admin_notification, parse_mode="Markdown")
        else:
            # Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
            error_message = result.get('message', 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh') if result else 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh'
            bot.answer_callback_query(call.id, f"‚ùå {error_message}", show_alert=True)
            
            # Quay l·∫°i menu ch√≠nh
            bot.edit_message_text(
                f"üè† *Menu ch√≠nh*\n\nS·ªë d∆∞: {user.get('balance', 0):,} {config.CURRENCY}",
                call.message.chat.id,
                call.message.message_id,
                parse_mode="Markdown",
                reply_markup=keyboards.main_menu(is_admin(user_id))
            )
    
    # X·ª≠ l√Ω c√°c n√∫t quay l·∫°i
    elif data == "back_to_main":
        bot.edit_message_text(
            f"üè† *Menu ch√≠nh*\n\nS·ªë d∆∞: {user.get('balance', 0):,} {config.CURRENCY}",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=keyboards.main_menu(is_admin(user_id))
        )
    
    elif data == "back_to_admin":
        bot.edit_message_text(
            "‚öôÔ∏è Panel qu·∫£n tr·ªã vi√™n",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.admin_panel()
        )
    
    elif data == "back_to_product_management":
        bot.edit_message_text(
            "üì¶ Qu·∫£n l√Ω s·∫£n ph·∫©m",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.product_management()
        )
    
    elif data == "back_to_user_management":
        # Quay l·∫°i menu qu·∫£n l√Ω ng∆∞·ªùi d√πng
        bot.edit_message_text(
            "üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.user_management()
        )
    
    elif data == "ban_user" and is_admin(user_id):
        # L∆∞u tr·∫°ng th√°i ch·ªù nh·∫≠p ID ng∆∞·ªùi d√πng ƒë·ªÉ c·∫•m
        user_states[user_id] = {
            'state': 'waiting_for_ban_user_id',
            'data': {}
        }
        
        bot.send_message(
                                user_id,
            "üö´ *C·∫•m ng∆∞·ªùi d√πng*\n\n"
            "Vui l√≤ng nh·∫≠p ID ng∆∞·ªùi d√πng b·∫°n mu·ªën c·∫•m.\n"
            "V√≠ d·ª•: `123456789`\n\n"
            "G·ª≠i /cancel ƒë·ªÉ h·ªßy.",
            parse_mode="Markdown"
        )
        
        # S·ª≠a tin nh·∫Øn hi·ªán t·∫°i ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i
        bot.edit_message_text(
            "üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng\n\n"
            "üìù ƒêang ch·ªù nh·∫≠p ID ng∆∞·ªùi d√πng ƒë·ªÉ c·∫•m...",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.back_button("back_to_user_management")
        )
    
    elif data == "unban_user" and is_admin(user_id):
        # L∆∞u tr·∫°ng th√°i ch·ªù nh·∫≠p ID ng∆∞·ªùi d√πng ƒë·ªÉ b·ªè c·∫•m
        user_states[user_id] = {
            'state': 'waiting_for_unban_user_id',
            'data': {}
        }
        
        bot.send_message(
            user_id,
            "‚úÖ *B·ªè c·∫•m ng∆∞·ªùi d√πng*\n\n"
            "Vui l√≤ng nh·∫≠p ID ng∆∞·ªùi d√πng b·∫°n mu·ªën b·ªè c·∫•m.\n"
            "V√≠ d·ª•: `123456789`\n\n"
            "G·ª≠i /cancel ƒë·ªÉ h·ªßy.",
            parse_mode="Markdown"
        )
        
        # S·ª≠a tin nh·∫Øn hi·ªán t·∫°i ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i
        bot.edit_message_text(
            "üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng\n\n"
            "üìù ƒêang ch·ªù nh·∫≠p ID ng∆∞·ªùi d√πng ƒë·ªÉ b·ªè c·∫•m...",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.back_button("back_to_user_management")
        )
    
    elif data == "back_to_product_list":
        if is_admin(user_id):
            products = db.get_all_products()
            bot.edit_message_text(
                "üìã Danh s√°ch s·∫£n ph·∫©m:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.product_list_keyboard(products, admin=True)
            )
        else:
            products = [p for p in db.get_all_products() if not p.get('is_free', False)]
            
            # L·ªçc s·∫£n ph·∫©m c√≥ h√†ng
            products_with_stock = []
            for product in products:
                if db.count_available_accounts(product.get('id', 0)) > 0:
                    products_with_stock.append(product)
            
            if not products_with_stock:
                bot.edit_message_text(
                    "üì¶ Hi·ªán t·∫°i kh√¥ng c√≥ s·∫£n ph·∫©m tr·∫£ ph√≠ n√†o c√≥ s·∫µn.",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=keyboards.back_button("back_to_main")
                )
                return
            
            bot.edit_message_text(
                "üîê Danh s√°ch t√†i kho·∫£n tr·∫£ ph√≠:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.product_list_keyboard(products_with_stock)
            )
    
    elif data == "cancel_purchase":
        bot.edit_message_text(
            "üè† ƒê√£ h·ªßy giao d·ªãch. Quay l·∫°i menu ch√≠nh",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.main_menu(is_admin(user_id))
        )
    # X·ª≠ l√Ω ph√¢n trang
    elif data.startswith("product_page_"):
        page = int(data.split("_")[2])
        if is_admin(user_id):
            products = db.get_all_products()
            bot.edit_message_text(
                "üìã Danh s√°ch s·∫£n ph·∫©m:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.product_list_keyboard(products, page=page, admin=True)
            )
        else:
            products = [p for p in db.get_all_products() if not p.get('is_free', False)]
            
            # L·ªçc s·∫£n ph·∫©m c√≥ h√†ng
            products_with_stock = []
            for product in products:
                if db.count_available_accounts(product.get('id', 0)) > 0:
                    products_with_stock.append(product)
            
            bot.edit_message_text(
                "üîê Danh s√°ch t√†i kho·∫£n tr·∫£ ph√≠:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.product_list_keyboard(products_with_stock, page=page)
            )
    
    elif data.startswith("user_page_"):
        # X·ª≠ l√Ω ph√¢n trang danh s√°ch ng∆∞·ªùi d√πng
        try:
            page = int(data.split("_")[2])
            
            # C·∫≠p nh·∫≠t trang hi·ªán t·∫°i
            if user_id in user_states:
                user_states[user_id]['page'] = page
            
            # Hi·ªÉn th·ªã trang m·ªõi
            display_user_list_page(bot, user_id, call.message.message_id)
        except Exception as e:
            logger.error(f"Error navigating user list: {e}")
            try:
                bot.answer_callback_query(call.id, "ƒê√£ x·∫£y ra l·ªói khi ƒëi·ªÅu h∆∞·ªõng danh s√°ch.", show_alert=True)
            except:
                pass
    
    # Th√™m x·ª≠ l√Ω cho c√°c n√∫t admin
    elif data.startswith("add_money_") and is_admin(user_id):
        # Th√™m ti·ªÅn cho ng∆∞·ªùi d√πng
        target_user_id = int(data.split("_")[2])
        target_user = db.get_user(target_user_id)
        
        if target_user:
            # L∆∞u tr·∫°ng th√°i ƒë·ªÉ nh·∫≠n s·ªë ti·ªÅn
            user_states[user_id] = {
                'state': 'waiting_for_add_money',
                'target_user_id': target_user_id
            }
            
            bot.edit_message_text(
                f"üí∞ Th√™m ti·ªÅn cho ng∆∞·ªùi d√πng:\n\n"
                f"ID: {target_user['id']}\n"
                f"Username: @{target_user.get('username', 'Kh√¥ng c√≥')}\n"
                f"S·ªë d∆∞ hi·ªán t·∫°i: {target_user.get('balance', 0):,} {config.CURRENCY}\n\n"
                f"Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn mu·ªën th√™m:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.deposit_amount_keyboard()
            )
    
    elif data.startswith("ban_user_") and is_admin(user_id):
        # C·∫•m ng∆∞·ªùi d√πng
        target_user_id = int(data.split("_")[2])
        target_user = db.get_user(target_user_id)
        
        if target_user:
            # Kh√¥ng cho ph√©p c·∫•m admin
            if is_admin(target_user_id):
                bot.answer_callback_query(call.id, "‚õî Kh√¥ng th·ªÉ c·∫•m qu·∫£n tr·ªã vi√™n kh√°c.", show_alert=True)
                return
            
            # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ b·ªã c·∫•m
            if target_user.get('banned', False):
                bot.answer_callback_query(call.id, "‚ùå Ng∆∞·ªùi d√πng n√†y ƒë√£ b·ªã c·∫•m r·ªìi.", show_alert=True)
                return
            
            # C·∫•m ng∆∞·ªùi d√πng v·ªõi ph∆∞∆°ng ph√°p tr·ª±c ti·∫øp nh·∫•t
            logger.info(f"Admin {username} (ID: {user_id}) is banning user {target_user_id} via callback")
            
            try:
                # ƒê·ªçc d·ªØ li·ªáu hi·ªán t·∫°i
                import json
                import os
                
                users_file_path = config.USERS_FILE
                logger.info(f"Reading users data from {users_file_path}")
                
                if not os.path.exists(users_file_path):
                    logger.error(f"Users file does not exist: {users_file_path}")
                    bot.answer_callback_query(call.id, "‚ùå File d·ªØ li·ªáu ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.", show_alert=True)
                    return
                
                # ƒê·ªçc d·ªØ li·ªáu tr·ª±c ti·∫øp t·ª´ file
                try:
                    with open(users_file_path, 'r', encoding='utf-8') as file:
                        users_data = json.load(file)
                        logger.info(f"Successfully read users data. Found {len(users_data)} users.")
                except json.JSONDecodeError as e:
                    logger.error(f"JSON decode error: {e}")
                    bot.answer_callback_query(call.id, "‚ùå L·ªói ƒë·ªãnh d·∫°ng file d·ªØ li·ªáu.", show_alert=True)
                    return
                except Exception as e:
                    logger.error(f"Error reading users file: {e}")
                    bot.answer_callback_query(call.id, f"‚ùå L·ªói khi ƒë·ªçc file d·ªØ li·ªáu: {str(e)}", show_alert=True)
                    return
                
                # T√¨m v√† c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng
                user_found = False
                for i, user in enumerate(users_data):
                    if user.get('id') == target_user_id:
                        logger.info(f"Found user {target_user_id} at index {i}")
                        users_data[i]['banned'] = True
                        user_found = True
                        break
                
                if not user_found:
                    logger.error(f"User {target_user_id} not found in users data")
                    bot.answer_callback_query(call.id, f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID {target_user_id} trong d·ªØ li·ªáu.", show_alert=True)
                    return
                
                # Ghi d·ªØ li·ªáu tr·ªü l·∫°i file
                try:
                    with open(users_file_path, 'w', encoding='utf-8') as file:
                        json.dump(users_data, file, ensure_ascii=False, indent=2)
                        logger.info(f"Successfully wrote updated data to {users_file_path}")
                except Exception as e:
                    logger.error(f"Error writing to users file: {e}")
                    bot.answer_callback_query(call.id, f"‚ùå L·ªói khi ghi file d·ªØ li·ªáu: {str(e)}", show_alert=True)
                    return
                
                # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                bot.edit_message_text(
                    f"‚úÖ ƒê√£ c·∫•m ng∆∞·ªùi d√πng th√†nh c√¥ng!\n\n"
                    f"ID: {target_user['id']}\n"
                    f"Username: @{target_user.get('username', 'Kh√¥ng c√≥')}",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=keyboards.back_button("back_to_user_list")
                )
                
                # Th√¥ng b√°o cho ng∆∞·ªùi d√πng
                try:
                    bot.send_message(
                        target_user_id,
                        "‚õî T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã c·∫•m. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n."
                    )
                    logger.info(f"Notification sent to banned user {target_user_id}")
                except Exception as e:
                    logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi d√πng b·ªã c·∫•m: {e}")
            
            except Exception as e:
                logger.error(f"Unexpected error in ban user callback: {e}", exc_info=True)
                bot.answer_callback_query(call.id, f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}", show_alert=True)
        else:
            bot.answer_callback_query(call.id, f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}.", show_alert=True)
    
    elif data.startswith("unban_user_") and is_admin(user_id):
        # B·ªè c·∫•m ng∆∞·ªùi d√πng
        target_user_id = int(data.split("_")[2])
        target_user = db.get_user(target_user_id)
        
        if target_user:
            # Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng kh√¥ng b·ªã c·∫•m
            if not target_user.get('banned', False):
                bot.answer_callback_query(call.id, "‚ùå Ng∆∞·ªùi d√πng n√†y kh√¥ng b·ªã c·∫•m.", show_alert=True)
                return
            
            # B·ªè c·∫•m ng∆∞·ªùi d√πng s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p tr·ª±c ti·∫øp nh·∫•t
            logger.info(f"Admin {username} (ID: {user_id}) is unbanning user {target_user_id} via callback")
            
            try:
                # ƒê·ªçc d·ªØ li·ªáu ng∆∞·ªùi d√πng
                users = db._read_data(config.USERS_FILE)
                
                # C·∫≠p nh·∫≠t tr·∫°ng th√°i banned
                user_found = False
                for i, user in enumerate(users):
                    if user.get('id') == target_user_id:
                        users[i]['banned'] = False
                        user_found = True
                        break
                
                if not user_found:
                    bot.answer_callback_query(call.id, "‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y ng∆∞·ªùi d√πng trong c∆° s·ªü d·ªØ li·ªáu.", show_alert=True)
                    return
                
                # L∆∞u d·ªØ li·ªáu ƒë√£ c·∫≠p nh·∫≠t
                db._write_data(config.USERS_FILE, users)
                
                # Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
                bot.edit_message_text(
                    f"‚úÖ ƒê√£ b·ªè c·∫•m ng∆∞·ªùi d√πng th√†nh c√¥ng!\n\n"
                    f"ID: {target_user['id']}\n"
                    f"Username: @{target_user.get('username', 'Kh√¥ng c√≥')}",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=keyboards.back_button("back_to_user_list")
                )
                
                # Th√¥ng b√°o cho ng∆∞·ªùi d√πng
                try:
                    bot.send_message(
                        target_user_id,
                        "‚úÖ T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c b·ªè c·∫•m. B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng bot b√¨nh th∆∞·ªùng."
                    )
                except Exception as e:
                    logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi d√πng ƒë∆∞·ª£c b·ªè c·∫•m: {e}")
            
            except Exception as e:
                logger.error(f"Error unbanning user: {e}")
                bot.answer_callback_query(call.id, f"‚ùå ƒê√£ x·∫£y ra l·ªói khi b·ªè c·∫•m ng∆∞·ªùi d√πng: {str(e)}", show_alert=True)
        else:
            bot.answer_callback_query(call.id, f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}.", show_alert=True)
    
    elif data.startswith("upload_product_") and is_admin(user_id):
        # Upload t√†i kho·∫£n cho s·∫£n ph·∫©m
        product_id = int(data.split("_")[2])
        product = db.get_product(product_id)
        
        if product:
            # L∆∞u tr·∫°ng th√°i ƒë·ªÉ nh·∫≠n danh s√°ch t√†i kho·∫£n
            user_states[user_id] = {
                'state': 'waiting_for_accounts',
                'product_id': product_id
            }
            
            bot.edit_message_text(
                f"üì§ *Upload t√†i kho·∫£n cho s·∫£n ph·∫©m*\n\n"
                f"ID: {product['id']}\n"
                f"T√™n: {product['name']}\n\n"
                f"Vui l√≤ng nh·∫≠p danh s√°ch t√†i kho·∫£n, m·ªói t√†i kho·∫£n m·ªôt d√≤ng.\n"
                f"ƒê·ªãnh d·∫°ng: username:password ho·∫∑c email:password",
                call.message.chat.id,
                call.message.message_id,
                parse_mode="Markdown"
            )
    
    elif data == "broadcast" and is_admin(user_id):
        # B·∫Øt ƒë·∫ßu qu√° tr√¨nh g·ª≠i th√¥ng b√°o
        user_states[user_id] = {
            'state': 'waiting_for_broadcast',
            'data': {}
        }
        
        bot.edit_message_text(
            "üì£ *G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi d√πng*\n\n"
            "Vui l√≤ng nh·∫≠p n·ªôi dung th√¥ng b√°o b·∫°n mu·ªën g·ª≠i.\n"
            "B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng Markdown.\n\n"
            "G·ª≠i /cancel ƒë·ªÉ h·ªßy.",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown"
        )
    
    # Th√™m x·ª≠ l√Ω cho n√∫t "Th√™m ti·ªÅn" trong menu qu·∫£n l√Ω ng∆∞·ªùi d√πng
    elif data == "add_money" and is_admin(user_id):
        # Hi·ªÉn th·ªã form nh·∫≠p ID ng∆∞·ªùi d√πng ƒë·ªÉ th√™m ti·ªÅn
        user_states[user_id] = {
            'state': 'waiting_for_user_id_to_add_money',
            'data': {}
        }
        
        bot.edit_message_text(
            "üí∞ *Th√™m ti·ªÅn cho ng∆∞·ªùi d√πng*\n\n"
            "Vui l√≤ng nh·∫≠p ID ng∆∞·ªùi d√πng b·∫°n mu·ªën th√™m ti·ªÅn:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown"
        )
    
    # Th√™m x·ª≠ l√Ω cho n√∫t xem chi ti·∫øt ng∆∞·ªùi d√πng
    elif data.startswith("view_user_") and is_admin(user_id):
        # Xem chi ti·∫øt ng∆∞·ªùi d√πng
        target_user_id = int(data.split("_")[2])
        target_user = db.get_user(target_user_id)
        
        if target_user:
            # Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng
            purchases = target_user.get('purchases', [])
            purchase_count = len(purchases)
            total_spent = sum(p.get('price', 0) for p in purchases)
            status = 'üö´ B·ªã c·∫•m' if target_user.get('banned', False) else '‚úÖ Ho·∫°t ƒë·ªông'
            
            user_info = (
                f"üë§ *Th√¥ng tin ng∆∞·ªùi d√πng*\n\n"
                f"ID: `{target_user['id']}`\n"
                f"Username: @{target_user.get('username', 'Kh√¥ng c√≥')}\n"
                f"T√™n: {target_user.get('first_name', '')} {target_user.get('last_name', '')}\n"
                f"S·ªë d∆∞: {target_user.get('balance', 0)} VNƒê\n"
                f"Tr·∫°ng th√°i: {status}"
            )
            
            bot.edit_message_text(
                user_info,
                call.message.chat.id,
                call.message.message_id,
                parse_mode="Markdown",
                reply_markup=keyboards.user_detail_keyboard(target_user_id)
            )
    
    elif data == "add_admin" and is_admin(user_id):
        # Y√™u c·∫ßu admin nh·∫≠p ID ng∆∞·ªùi d√πng ƒë·ªÉ th√™m l√†m admin
        user_states[user_id] = {
            'state': 'waiting_for_admin_id',
            'data': {}
        }
        
        bot.edit_message_text(
            "üëë *Th√™m qu·∫£n tr·ªã vi√™n m·ªõi*\n\n"
            "Vui l√≤ng nh·∫≠p ID ng∆∞·ªùi d√πng b·∫°n mu·ªën th√™m l√†m qu·∫£n tr·ªã vi√™n:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown"
        )
    
    # S·ª≠a ph·∫ßn x·ª≠ l√Ω n√∫t edit_product trong h√†m handle_callback_query
    elif data.startswith("edit_product_") and is_admin(user_id):
        # L·∫•y ID s·∫£n ph·∫©m
        product_id = int(data.split("_")[2])
        product = db.get_product(product_id)
        
        if product:
            # L∆∞u tr·∫°ng th√°i ƒë·ªÉ ch·ªânh s·ª≠a s·∫£n ph·∫©m
            user_states[user_id] = {
                'state': 'edit_product_name',
                'product_id': product_id,
                'data': {
                    'id': product_id,
                    'name': product.get('name', ''),
                    'price': product.get('price', 0),
                    'description': product.get('description', '')
                }
            }
            
            bot.edit_message_text(
                f"‚úèÔ∏è *Ch·ªânh s·ª≠a s·∫£n ph·∫©m*\n\n"
                f"ID: {product['id']}\n"
                f"T√™n hi·ªán t·∫°i: {product['name']}\n"
                f"Gi√° hi·ªán t·∫°i: {product['price']:,} {config.CURRENCY}\n"
                f"M√¥ t·∫£ hi·ªán t·∫°i: {product.get('description', 'Kh√¥ng c√≥')}\n\n"
                f"Vui l√≤ng nh·∫≠p t√™n m·ªõi cho s·∫£n ph·∫©m (ho·∫∑c g√µ 'gi·ªØ nguy√™n' ƒë·ªÉ kh√¥ng thay ƒë·ªïi):",
                call.message.chat.id,
                call.message.message_id,
                parse_mode="Markdown"
            )
    
    elif data == "create_product" and is_admin(user_id):
        # B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫°o s·∫£n ph·∫©m m·ªõi
        user_states[user_id] = {
            'state': 'waiting_for_product_name',
            'data': {}
        }
        
        bot.edit_message_text(
            "‚ûï *T·∫°o s·∫£n ph·∫©m m·ªõi*\n\n"
            "Vui l√≤ng nh·∫≠p t√™n s·∫£n ph·∫©m:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown"
        )
    
    elif data == "toggle_premium_visibility" and is_admin(user_id):
        # L·∫•y c√†i ƒë·∫∑t hi·ªán t·∫°i
        settings = db.get_visibility_settings()
        show_premium = settings.get('show_premium', True)
        
        # ƒê·∫£o ng∆∞·ª£c tr·∫°ng th√°i
        new_status = not show_premium
        db.update_visibility_setting('show_premium', new_status)
        
        status_text = "b·∫≠t" if new_status else "t·∫Øt"
        
        # Th√¥ng b√°o cho admin
        bot.answer_callback_query(
            call.id,
            f"ƒê√£ {status_text} hi·ªÉn th·ªã t√†i kho·∫£n tr·∫£ ph√≠",
            show_alert=True
        )
        
        # C·∫≠p nh·∫≠t menu admin
        bot.edit_message_text(
            "‚öôÔ∏è *B·∫£ng ƒëi·ªÅu khi·ªÉn qu·∫£n tr·ªã*\n\n"
            f"Hi·ªÉn th·ªã t√†i kho·∫£n tr·∫£ ph√≠: {'B·∫≠t' if new_status else 'T·∫Øt'}",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=keyboards.admin_panel_keyboard()
        )
    
    # Th√™m x·ª≠ l√Ω cho n√∫t x√≥a s·∫£n ph·∫©m
    elif data.startswith("delete_product_") and is_admin(user_id):
        # X√≥a s·∫£n ph·∫©m
        product_id = int(data.split("_")[2])
        product = db.get_product(product_id)
        
        if product:
            # X√°c nh·∫≠n x√≥a s·∫£n ph·∫©m
            bot.edit_message_text(
                f"üóëÔ∏è *X√°c nh·∫≠n x√≥a s·∫£n ph·∫©m*\n\n"
                f"ID: {product['id']}\n"
                f"T√™n: {product['name']}\n"
                f"Gi√°: {product['price']:,} {config.CURRENCY}\n\n"
                f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m n√†y?",
                call.message.chat.id,
                call.message.message_id,
                parse_mode="Markdown",
                reply_markup=keyboards.confirm_delete_product_keyboard(product_id)
            )
    
    # Th√™m x·ª≠ l√Ω cho n√∫t x√°c nh·∫≠n x√≥a s·∫£n ph·∫©m
    elif data.startswith("confirm_delete_product_") and is_admin(user_id):
        # X√°c nh·∫≠n x√≥a s·∫£n ph·∫©m
        product_id = int(data.split("_")[3])
        
        # X√≥a s·∫£n ph·∫©m
        if db.delete_product(product_id):
            bot.edit_message_text(
                "‚úÖ ƒê√£ x√≥a s·∫£n ph·∫©m th√†nh c√¥ng!",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.back_button("back_to_product_list")
            )
        else:
            bot.edit_message_text(
                "‚ùå Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m. Vui l√≤ng th·ª≠ l·∫°i sau.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.back_button("back_to_product_list")
            )
    
    # Th√™m x·ª≠ l√Ω cho n√∫t h·ªßy x√≥a s·∫£n ph·∫©m
    elif data == "cancel_delete_product" and is_admin(user_id):
        # H·ªßy x√≥a s·∫£n ph·∫©m
        bot.edit_message_text(
            "‚ùå ƒê√£ h·ªßy x√≥a s·∫£n ph·∫©m.",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=keyboards.back_button("back_to_product_list")
        )
    
    # Th√™m x·ª≠ l√Ω cho n√∫t t√¨m ki·∫øm ng∆∞·ªùi d√πng
    elif data.startswith("user_list_page_"):
        # X·ª≠ l√Ω ph√¢n trang danh s√°ch ng∆∞·ªùi d√πng
        page = int(data.split("_")[3])
        user_states[user_id]['page'] = page
        display_user_list_page(bot, user_id, call.message.message_id)

    elif data == "user_list_search":
        # B·∫Øt ƒë·∫ßu t√¨m ki·∫øm ng∆∞·ªùi d√πng
        user_states[user_id]['state'] = 'searching_user'
        bot.edit_message_text(
            "üîç *T√¨m ki·∫øm ng∆∞·ªùi d√πng*\n\n"
            "Vui l√≤ng nh·∫≠p t√™n ng∆∞·ªùi d√πng ho·∫∑c ID ƒë·ªÉ t√¨m ki·∫øm:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown"
        )

    elif data == "user_list_refresh":
        # L√†m m·ªõi danh s√°ch ng∆∞·ªùi d√πng
        users = db.get_all_users()
        user_states[user_id] = {
            'state': 'viewing_user_list',
            'page': 0,
            'users': users,
            'search_query': ''
        }
        display_user_list_page(bot, user_id, call.message.message_id)
    
    elif data == "my_purchases":
        # Hi·ªÉn th·ªã danh s√°ch t√†i kho·∫£n ƒë√£ mua
        user = db.get_user(user_id)
        purchases = user.get('purchases', [])
        
        if not purchases:
            bot.edit_message_text(
                "üõí B·∫°n ch∆∞a mua t√†i kho·∫£n n√†o.",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=keyboards.back_button()
            )
            return
        
        # L∆∞u tr·∫°ng th√°i ƒë·ªÉ x·ª≠ l√Ω ph√¢n trang
        user_states[user_id] = {
            'state': 'viewing_purchases',
            'page': 0,
            'purchases': purchases
        }
        
        bot.edit_message_text(
            "üõí *T√†i kho·∫£n ƒë√£ mua*\n\nCh·ªçn m·ªôt t√†i kho·∫£n ƒë·ªÉ xem chi ti·∫øt:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=keyboards.purchase_history_keyboard(purchases)
        )
    
    elif data.startswith("view_purchase_"):
        # Xem chi ti·∫øt t√†i kho·∫£n ƒë√£ mua
        purchase_idx = int(data.split("_")[2])
        
        # L·∫•y th√¥ng tin mua h√†ng t·ª´ tr·∫°ng th√°i ng∆∞·ªùi d√πng
        state = user_states.get(user_id, {})
        purchases = state.get('purchases', [])
        
        if not purchases or purchase_idx >= len(purchases):
            # N·∫øu kh√¥ng c√≥ th√¥ng tin trong tr·∫°ng th√°i, l·∫•y t·ª´ c∆° s·ªü d·ªØ li·ªáu
            user = db.get_user(user_id)
            purchases = user.get('purchases', [])
        
        if purchase_idx >= len(purchases):
            bot.answer_callback_query(call.id, "‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n.", show_alert=True)
            return
        
        purchase = purchases[purchase_idx]
        product_name = purchase.get('product_name', 'Kh√¥ng t√™n')
        price = purchase.get('price', 0)
        account_info = purchase.get('account_data', 'Kh√¥ng c√≥ th√¥ng tin')
        
        # ƒê·ªãnh d·∫°ng th·ªùi gian mua
        timestamp = purchase.get('timestamp', '')
        if timestamp:
            try:
                import datetime
                dt = datetime.datetime.fromisoformat(timestamp)
                date_str = dt.strftime('%d/%m/%Y %H:%M:%S')
            except:
                date_str = 'Kh√¥ng r√µ'
        else:
            date_str = 'Kh√¥ng r√µ'
        
        bot.edit_message_text(
            f"üõí *Chi ti·∫øt t√†i kho·∫£n ƒë√£ mua*\n\n"
            f"S·∫£n ph·∫©m: {product_name}\n"
            f"Gi√°: {price:,} {config.CURRENCY}\n"
            f"Ng√†y mua: {date_str}\n\n"
            f"üìù *Th√¥ng tin t√†i kho·∫£n:*\n"
            f"`{account_info}`",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=keyboards.back_button("back_to_purchases")
        )
    
    elif data == "back_to_purchases":
        # Quay l·∫°i danh s√°ch t√†i kho·∫£n ƒë√£ mua
        state = user_states.get(user_id, {})
        page = state.get('page', 0)
        purchases = state.get('purchases', [])
        
        if not purchases:
            # N·∫øu kh√¥ng c√≥ th√¥ng tin trong tr·∫°ng th√°i, l·∫•y t·ª´ c∆° s·ªü d·ªØ li·ªáu
            user = db.get_user(user_id)
            purchases = user.get('purchases', [])
        
        bot.edit_message_text(
            "üõí *T√†i kho·∫£n ƒë√£ mua*\n\nCh·ªçn m·ªôt t√†i kho·∫£n ƒë·ªÉ xem chi ti·∫øt:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=keyboards.purchase_history_keyboard(purchases, page, "my_account")  # Th√™m tham s·ªë ƒë·ªÉ quay l·∫°i menu t√†i kho·∫£n
        )
    
    elif data.startswith("purchase_page_"):
        # X·ª≠ l√Ω ph√¢n trang danh s√°ch t√†i kho·∫£n ƒë√£ mua
        page = int(data.split("_")[2])
        
        state = user_states.get(user_id, {})
        purchases = state.get('purchases', [])
        
        if not purchases:
            # N·∫øu kh√¥ng c√≥ th√¥ng tin trong tr·∫°ng th√°i, l·∫•y t·ª´ c∆° s·ªü d·ªØ li·ªáu
            user = db.get_user(user_id)
            purchases = user.get('purchases', [])
        
        # C·∫≠p nh·∫≠t trang hi·ªán t·∫°i
        if user_id in user_states:
            user_states[user_id]['page'] = page
        else:
            user_states[user_id] = {
                'state': 'viewing_purchases',
                'page': page,
                'purchases': purchases
            }
        
        bot.edit_message_text(
            "üõí *T√†i kho·∫£n ƒë√£ mua*\n\nCh·ªçn m·ªôt t√†i kho·∫£n ƒë·ªÉ xem chi ti·∫øt:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=keyboards.purchase_history_keyboard(purchases, page)
        )
    
    elif data == "my_account":
        # Hi·ªÉn th·ªã menu t√†i kho·∫£n
        user = db.get_user(user_id)
        balance = user.get('balance', 0)
        
        # Escape username ƒë·ªÉ tr√°nh l·ªói Markdown
        safe_username = username.replace('_', '\\_').replace('*', '\\*').replace('`', '\\`').replace('[', '\\[')
        
        try:
            bot.edit_message_text(
                f"üë§ *Th√¥ng tin t√†i kho·∫£n*\n\n"
                f"ID: `{user_id}`\n"
                f"Username: @{safe_username}\n"
                f"S·ªë d∆∞: {balance:,} {config.CURRENCY}\n\n"
                f"Ch·ªçn m·ªôt t√πy ch·ªçn b√™n d∆∞·ªõi:",
                call.message.chat.id,
                call.message.message_id,
                parse_mode="Markdown",
                reply_markup=keyboards.account_menu()
            )
        except telebot.apihelper.ApiTelegramException as e:
            # N·∫øu v·∫´n l·ªói, th·ª≠ g·ª≠i kh√¥ng c√≥ parse_mode
            if "can't parse entities" in str(e):
                bot.edit_message_text(
                    f"üë§ Th√¥ng tin t√†i kho·∫£n\n\n"
                    f"ID: {user_id}\n"
                    f"Username: @{username}\n"
                    f"S·ªë d∆∞: {balance:,} {config.CURRENCY}\n\n"
                    f"Ch·ªçn m·ªôt t√πy ch·ªçn b√™n d∆∞·ªõi:",
                    call.message.chat.id,
                    call.message.message_id,
                    reply_markup=keyboards.account_menu()
                )
    
    elif data == "deposit_money":
        # Hi·ªÉn th·ªã form n·∫°p ti·ªÅn
        bot.edit_message_text(
            "üí∞ *N·∫°p ti·ªÅn v√†o t√†i kho·∫£n*\n\n"
            "Vui l√≤ng ch·ªçn s·ªë ti·ªÅn b·∫°n mu·ªën n·∫°p:",
            call.message.chat.id,
            call.message.message_id,
            parse_mode="Markdown",
            reply_markup=keyboards.deposit_amount_keyboard()
        )

    elif data.startswith("deposit_amount_"):
        # X·ª≠ l√Ω s·ªë ti·ªÅn n·∫°p
        try:
            amount = int(data.split("_")[2])
            
            # T·∫°o m√¥ t·∫£ giao d·ªãch
            description = f"Naptien {username} {user_id}"
            
            # T·∫°o m√£ QR
            qr_image = generate_payment_qr(user_id, amount, description)
            
            if qr_image:
                # G·ª≠i ·∫£nh QR code
                bot.delete_message(call.message.chat.id, call.message.message_id)
                
                # T·∫°o b√†n ph√≠m v·ªõi n√∫t li√™n h·ªá admin v√† quay l·∫°i
                contact_markup = keyboards.payment_contact_keyboard()
                
                bot.send_photo(
                    call.message.chat.id,
                    qr_image,
                    caption=f"üì± *Qu√©t m√£ QR ƒë·ªÉ n·∫°p ti·ªÅn*\n\n"
                    f"S·ªë ti·ªÅn: {amount:,} {config.CURRENCY}\n"
                    f"N·ªôi dung chuy·ªÉn kho·∫£n: `{description}`\n\n"
                    f"‚ö†Ô∏è *L∆∞u √Ω:*\n"
                    f"- Vui l√≤ng kh√¥ng thay ƒë·ªïi n·ªôi dung chuy·ªÉn kho·∫£n\n"
                    f"- Ti·ªÅn s·∫Ω ƒë∆∞·ª£c c·ªông v√†o t√†i kho·∫£n sau khi admin x√°c nh·∫≠n\n"
                    f"- S·ª≠ d·ª•ng n√∫t b√™n d∆∞·ªõi ƒë·ªÉ li√™n h·ªá admin n·∫øu c·∫ßn h·ªó tr·ª£",
                    parse_mode="Markdown",
                    reply_markup=contact_markup
                )
            else:
                bot.answer_callback_query(call.id, "‚ùå Kh√¥ng th·ªÉ t·∫°o m√£ QR. Vui l√≤ng th·ª≠ l·∫°i sau.", show_alert=True)
        except Exception as e:
            logger.error(f"Error processing deposit: {e}")
            bot.answer_callback_query(call.id, "‚ùå ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.", show_alert=True)
    
    # ƒê√°nh d·∫•u callback ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
    bot.answer_callback_query(call.id)
    
    # Add the file download handlers here, inside the function
    if data == "download_files":
        # S·ª≠ d·ª•ng file_manager ƒë·ªÉ hi·ªÉn th·ªã menu t·∫£i file
        file_manager.show_download_menu(call.message.chat.id, call.message.message_id)

    elif data == "file_list":
        # Hi·ªÉn th·ªã danh s√°ch file
        file_manager.show_file_list(call.message.chat.id, call.message.message_id)

    elif data == "search_file":
        # Hi·ªÉn th·ªã form t√¨m ki·∫øm file
        file_manager.search_file(call.message.chat.id, call.message.message_id)

    elif data == "popular_files":
        # Hi·ªÉn th·ªã danh s√°ch file ph·ªï bi·∫øn
        file_manager.show_popular_files(call.message.chat.id, call.message.message_id)

    elif data == "newest_files":
        # Hi·ªÉn th·ªã danh s√°ch file m·ªõi nh·∫•t
        file_manager.show_newest_files(call.message.chat.id, call.message.message_id)

    elif data == "download_from_url":
        # Hi·ªÉn th·ªã form nh·∫≠p URL ƒë·ªÉ t·∫£i file
        file_manager.download_from_url(call.message.chat.id, call.message.message_id)

def add_admin_command(bot: TeleBot, message: Message) -> None:
    """X·ª≠ l√Ω l·ªánh /add_admin - Th√™m admin m·ªõi"""
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    
    logger.info(f"Admin {username} (ID: {user_id}) started add_admin process")
    
    # Ph√¢n t√≠ch c√∫ ph√°p l·ªánh
    args = message.text.split()
    
    if len(args) < 2:
        bot.send_message(
            user_id,
            "‚ùå S·ª≠ d·ª•ng sai c√∫ ph√°p. Vui l√≤ng s·ª≠ d·ª•ng: /add_admin [user_id]\n"
            "V√≠ d·ª•: /add_admin 123456789"
        )
        return
    
    try:
        new_admin_id = int(args[1])
    except ValueError:
        bot.send_message(user_id, "‚ùå ID ng∆∞·ªùi d√πng ph·∫£i l√† m·ªôt s·ªë.")
        return
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ l√† admin ch∆∞a
    if is_admin(new_admin_id):
        bot.send_message(user_id, "‚ùå Ng∆∞·ªùi d√πng n√†y ƒë√£ l√† admin.")
        return
    
    # Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ t·ªìn t·∫°i kh√¥ng
    new_admin = db.get_user(new_admin_id)
    if not new_admin:
        bot.send_message(user_id, "‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID n√†y.")
        return
    
    # Th√™m ng∆∞·ªùi d√πng v√†o danh s√°ch admin
    admin_ids = config.ADMIN_IDS.copy()
    admin_ids.append(new_admin_id)
    
    # C·∫≠p nh·∫≠t file config.py
    try:
        with open('config.py', 'r', encoding='utf-8') as file:
            config_content = file.read()
        
        # T√¨m v√† thay th·∫ø d√≤ng ADMIN_IDS
        import re
        new_admin_line = f"ADMIN_IDS = {str(admin_ids)}"
        config_content = re.sub(r'ADMIN_IDS = \[.*?\]', new_admin_line, config_content, flags=re.DOTALL)
        
        with open('config.py', 'w', encoding='utf-8') as file:
            file.write(config_content)
        
        # C·∫≠p nh·∫≠t bi·∫øn ADMIN_IDS trong config
        config.ADMIN_IDS = admin_ids
        
        bot.send_message(
            user_id,
            f"‚úÖ ƒê√£ th√™m ng∆∞·ªùi d√πng ID: {new_admin_id} (@{new_admin.get('username', 'Kh√¥ng c√≥')}) l√†m admin th√†nh c√¥ng!\n\n"
            f"‚ö†Ô∏è L∆∞u √Ω: B·∫°n c·∫ßn kh·ªüi ƒë·ªông l·∫°i bot ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi."
        )
        
        # Th√¥ng b√°o cho ng∆∞·ªùi d√πng m·ªõi ƒë∆∞·ª£c th√™m l√†m admin
        try:
            bot.send_message(
                new_admin_id,
                "üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ ƒë∆∞·ª£c th√™m l√†m qu·∫£n tr·ªã vi√™n c·ªßa bot.\n"
                "S·ª≠ d·ª•ng /help ƒë·ªÉ xem c√°c l·ªánh qu·∫£n tr·ªã vi√™n."
            )
        except Exception as e:
            logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi d√πng {new_admin_id}: {e}")
            
    except Exception as e:
        logger.error(f"L·ªói khi c·∫≠p nh·∫≠t file config.py: {e}")
        bot.send_message(
            user_id,
            "‚ùå ƒê√£ x·∫£y ra l·ªói khi th√™m admin. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c th√™m th·ªß c√¥ng v√†o file config.py."
        )

# Th√™m h√†m ti·ªán √≠ch ƒë·ªÉ g·ª≠i th√¥ng b√°o cho t·∫•t c·∫£ admin
def notify_admins(bot: TeleBot, message: str, parse_mode: str = None) -> None:
    """G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ admin"""
    for admin_id in config.ADMIN_IDS:
        try:
            # Escape any problematic characters in the message if using Markdown
            if parse_mode == "Markdown":
                # Escape characters that could break Markdown formatting
                message = message.replace('_', '\\_').replace('*', '\\*').replace('`', '\\`').replace('[', '\\[')
                
            bot.send_message(admin_id, message, parse_mode=parse_mode)
        except Exception as e:
            logger.error(f"Kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o ƒë·∫øn admin {admin_id}: {e}")

def debug_user_command(bot: TeleBot, message: Message) -> None:
    """L·ªánh debug ƒë·ªÉ ki·ªÉm tra d·ªØ li·ªáu ng∆∞·ªùi d√πng"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        return
    
    args = message.text.split()
    if len(args) < 2:
        bot.send_message(user_id, "S·ª≠ d·ª•ng: /debug_user [user_id]")
        return
    
    try:
        target_user_id = int(args[1])
        user = db.get_user(target_user_id)
        if user:
            bot.send_message(user_id, f"User data: {json.dumps(user, indent=2)}")
        else:
            bot.send_message(user_id, f"User with ID {target_user_id} not found")
    except Exception as e:
        bot.send_message(user_id, f"Error: {str(e)}")

def check_ban_command(bot: TeleBot, message: Message) -> None:
    """L·ªánh ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i c·∫•m c·ªßa ng∆∞·ªùi d√πng"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        bot.send_message(user_id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.")
        return
    
    args = message.text.split()
    if len(args) < 2:
        bot.send_message(user_id, "S·ª≠ d·ª•ng: /check_ban [user_id]")
        return
    
    try:
        target_user_id = int(args[1])
        user = db.get_user(target_user_id)
        if user:
            is_banned = is_user_banned(target_user_id)
            bot.send_message(user_id, f"User {target_user_id} banned status: {is_banned}")
        else:
            bot.send_message(user_id, f"User with ID {target_user_id} not found")
    except Exception as e:
        bot.send_message(user_id, f"Error: {str(e)}")

def is_user_banned(user_id: int) -> bool:
    """Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ b·ªã c·∫•m kh√¥ng"""
    return db.is_user_banned(user_id)

def force_ban_command(bot: TeleBot, message: Message) -> None:
    """L·ªánh c·∫•m ng∆∞·ªùi d√πng tr·ª±c ti·∫øp"""
    user_id = message.from_user.id
    
    if not is_admin(user_id):
        bot.send_message(user_id, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.")
        return
    
    args = message.text.split()
    if len(args) < 2:
        bot.send_message(user_id, "S·ª≠ d·ª•ng: /force_ban [user_id]")
        return
    
    try:
        target_user_id = int(args[1])
        
        # Ki·ªÉm tra ng∆∞·ªùi d√πng t·ªìn t·∫°i
        target_user = db.get_user(target_user_id)
        if not target_user:
            bot.send_message(user_id, f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}.")
            return
        
        # S·ª≠ d·ª•ng h√†m ban_user t·ª´ database
        success = db.ban_user(target_user_id)
        
        if success:
            bot.send_message(user_id, f"‚úÖ ƒê√£ c·∫•m ng∆∞·ªùi d√πng {target_user_id} th√†nh c√¥ng!")
            
            # Th√¥ng b√°o cho ng∆∞·ªùi d√πng
            try:
                bot.send_message(
                    target_user_id,
                    "‚õî T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã c·∫•m. Vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n."
                )
            except Exception:
                pass  # Kh√¥ng c·∫ßn x·ª≠ l√Ω ngo·∫°i l·ªá ·ªü ƒë√¢y
        else:
            bot.send_message(user_id, f"‚ùå Kh√¥ng th·ªÉ c·∫•m ng∆∞·ªùi d√πng v·ªõi ID {target_user_id}.")
    except Exception as e:
        bot.send_message(user_id, f"Error: {str(e)}")

def generate_payment_qr(user_id: int, amount: int = 0, description: str = "") -> Optional[BytesIO]:
    """T·∫°o m√£ QR thanh to√°n s·ª≠ d·ª•ng VietQR API"""
    try:
        # T·∫°o m√¥ t·∫£ giao d·ªãch
        if not description:
            description = f"Nap tien ID {user_id}"
        
        # Chu·∫©n b·ªã d·ªØ li·ªáu cho API
        url = config.VIETQR_API_URL
        payload = {
            "accountNo": config.BANK_ACCOUNT_NO,
            "accountName": config.BANK_ACCOUNT_NAME,
            "acqId": config.BANK_ACQ_ID,
            "addInfo": description,
            "amount": str(amount),
            "template": "compact"
        }
        headers = {
            "x-client-id": config.VIETQR_CLIENT_ID,
            "x-api-key": config.VIETQR_API_KEY,
            "Content-Type": "application/json"
        }
        
        # G·ª≠i y√™u c·∫ßu ƒë·∫øn API
        response = requests.post(url, headers=headers, data=json.dumps(payload))
        
        # Ki·ªÉm tra ph·∫£n h·ªìi
        if response.status_code == 200:
            data = response.json()
            qr_data_uri = data.get("data", {}).get("qrDataURL", "")
            
            if qr_data_uri.startswith("data:image"):
                # Chuy·ªÉn ƒë·ªïi base64 th√†nh d·ªØ li·ªáu h√¨nh ·∫£nh
                image_data = base64.b64decode(qr_data_uri.split(",", 1)[1])
                image_buffer = BytesIO(image_data)
                image_buffer.name = "payment_qr.png"
                return image_buffer
        
        logger.error(f"Error generating QR code: {response.text}")
        return None
    except Exception as e:
        logger.error(f"Error in generate_payment_qr: {e}")
        return None

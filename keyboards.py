from typing import List, Dict, Any
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import Database

def main_menu(is_admin: bool = False) -> InlineKeyboardMarkup:
    """T·∫°o b√†n ph√≠m menu ch√≠nh"""
    db = Database()
    
    # L·∫•y c√†i ƒë·∫∑t hi·ªÉn th·ªã
    settings = db.get_visibility_settings()
    show_premium = settings.get('show_premium', True)
    
    markup = InlineKeyboardMarkup()
    
    # Ch·ªâ hi·ªÉn th·ªã n√∫t "T√†i kho·∫£n tr·∫£ ph√≠" n·∫øu c√†i ƒë·∫∑t cho ph√©p
    if show_premium:
        markup.row(
            InlineKeyboardButton("üîê T√†i kho·∫£n tr·∫£ ph√≠", callback_data="premium_accounts"),
            InlineKeyboardButton("üÜì T√†i kho·∫£n mi·ªÖn ph√≠", callback_data="free_accounts")
        )
    else:
        # N·∫øu kh√¥ng hi·ªÉn th·ªã t√†i kho·∫£n tr·∫£ ph√≠, ch·ªâ hi·ªÉn th·ªã t√†i kho·∫£n mi·ªÖn ph√≠
        markup.row(
            InlineKeyboardButton("üÜì T√†i kho·∫£n mi·ªÖn ph√≠", callback_data="free_accounts")
        )
    
    markup.row(
        InlineKeyboardButton("üìö H∆∞·ªõng d·∫´n", callback_data="tutorial"),
        InlineKeyboardButton("üë§ T√†i kho·∫£n", callback_data="my_account")
    )
    
    if is_admin:
        markup.row(
            InlineKeyboardButton("‚öôÔ∏è Qu·∫£n tr·ªã vi√™n", callback_data="admin_panel")
        )
    
    return markup

def admin_panel() -> InlineKeyboardMarkup:
    """T·∫°o b√†n ph√≠m panel qu·∫£n tr·ªã"""
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üì¶ Qu·∫£n l√Ω s·∫£n ph·∫©m", callback_data="manage_products"),
        InlineKeyboardButton("üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng", callback_data="manage_users")
    )
    markup.row(
        InlineKeyboardButton("üìä Th·ªëng k√™", callback_data="statistics"),
        InlineKeyboardButton("üîô Quay l·∫°i", callback_data="back_to_main")
    )
    return markup

def product_management() -> InlineKeyboardMarkup:
    """T·∫°o b√†n ph√≠m qu·∫£n l√Ω s·∫£n ph·∫©m"""
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("‚ûï T·∫°o s·∫£n ph·∫©m", callback_data="create_product"),
        InlineKeyboardButton("üìã Danh s√°ch s·∫£n ph·∫©m", callback_data="product_list")
    )
    markup.row(
        InlineKeyboardButton("üîô Quay l·∫°i", callback_data="back_to_admin")
    )
    return markup

def user_management() -> InlineKeyboardMarkup:
    """T·∫°o b√†n ph√≠m qu·∫£n l√Ω ng∆∞·ªùi d√πng"""
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üìã Danh s√°ch ng∆∞·ªùi d√πng", callback_data="user_list"),
        InlineKeyboardButton("üí∞ Th√™m ti·ªÅn", callback_data="add_money")
    )
    markup.row(
        InlineKeyboardButton("üö´ C·∫•m ng∆∞·ªùi d√πng", callback_data="ban_user"),
        InlineKeyboardButton("‚úÖ B·ªè c·∫•m ng∆∞·ªùi d√πng", callback_data="unban_user")
    )
    markup.row(
        InlineKeyboardButton("üîô Quay l·∫°i", callback_data="back_to_admin")
    )
    return markup

def product_list_keyboard(products: List[Dict[str, Any]], page: int = 0, admin: bool = False) -> InlineKeyboardMarkup:
    """T·∫°o b√†n ph√≠m danh s√°ch s·∫£n ph·∫©m v·ªõi hi·ªÉn th·ªã 2 c·ªôt"""
    markup = InlineKeyboardMarkup()
    
    # Hi·ªÉn th·ªã 10 s·∫£n ph·∫©m m·ªói trang (thay v√¨ 5)
    items_per_page = 10
    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, len(products))
    
    # L·∫•y danh s√°ch s·∫£n ph·∫©m cho trang hi·ªán t·∫°i
    current_products = products[start_idx:end_idx]
    
    # Hi·ªÉn th·ªã s·∫£n ph·∫©m theo 2 c·ªôt
    for i in range(0, len(current_products), 2):
        row_buttons = []
        
        # S·∫£n ph·∫©m ƒë·∫ßu ti√™n trong h√†ng
        product = current_products[i]
        product_id = product.get('id', 0)
        product_name = product.get('name', 'Kh√¥ng t√™n')
        
        # L·∫•y s·ªë l∆∞·ª£ng t√†i kho·∫£n c√≤n l·∫°i
        db = Database()
        available_count = db.count_available_accounts(product_id)
        
        # Th√™m s·ªë l∆∞·ª£ng v√†o t√™n s·∫£n ph·∫©m
        display_name = f"{product_name} ({available_count})"
        
        # T·∫°o n√∫t cho s·∫£n ph·∫©m ƒë·∫ßu ti√™n
        callback_data = f"admin_product_{product_id}" if admin else f"view_product_{product_id}"
        row_buttons.append(InlineKeyboardButton(display_name, callback_data=callback_data))
        
        # N·∫øu c√≤n s·∫£n ph·∫©m th·ª© hai trong h√†ng
        if i + 1 < len(current_products):
            product = current_products[i + 1]
            product_id = product.get('id', 0)
            product_name = product.get('name', 'Kh√¥ng t√™n')
            
            # L·∫•y s·ªë l∆∞·ª£ng t√†i kho·∫£n c√≤n l·∫°i
            available_count = db.count_available_accounts(product_id)
            
            # Th√™m s·ªë l∆∞·ª£ng v√†o t√™n s·∫£n ph·∫©m
            display_name = f"{product_name} ({available_count})"
            
            # T·∫°o n√∫t cho s·∫£n ph·∫©m th·ª© hai
            callback_data = f"admin_product_{product_id}" if admin else f"view_product_{product_id}"
            row_buttons.append(InlineKeyboardButton(display_name, callback_data=callback_data))
        
        # Th√™m h√†ng v√†o b√†n ph√≠m
        markup.row(*row_buttons)
    
    # N√∫t ƒëi·ªÅu h∆∞·ªõng trang
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è Tr∆∞·ªõc", callback_data=f"product_page_{page-1}"))
    
    if end_idx < len(products):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è Sau", callback_data=f"product_page_{page+1}"))
    
    if nav_buttons:
        markup.row(*nav_buttons)
    
    # N√∫t quay l·∫°i
    if admin:
        markup.row(InlineKeyboardButton("üîô Quay l·∫°i", callback_data="back_to_product_management"))
    else:
        markup.row(InlineKeyboardButton("üîô Quay l·∫°i", callback_data="back_to_main"))
    
    return markup

def user_list_keyboard(users: List[Dict[str, Any]], page: int = 0) -> InlineKeyboardMarkup:
    """T·∫°o b√†n ph√≠m danh s√°ch ng∆∞·ªùi d√πng v·ªõi hi·ªÉn th·ªã 2 c·ªôt"""
    markup = InlineKeyboardMarkup()
    
    # Hi·ªÉn th·ªã 10 ng∆∞·ªùi d√πng m·ªói trang (thay v√¨ 5)
    items_per_page = 10
    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, len(users))
    
    # L·∫•y danh s√°ch ng∆∞·ªùi d√πng cho trang hi·ªán t·∫°i
    current_users = users[start_idx:end_idx]
    
    # Hi·ªÉn th·ªã ng∆∞·ªùi d√πng theo 2 c·ªôt
    for i in range(0, len(current_users), 2):
        row_buttons = []
        
        # Ng∆∞·ªùi d√πng ƒë·∫ßu ti√™n trong h√†ng
        user = current_users[i]
        user_name = user.get('username', 'Kh√¥ng t√™n')
        user_id = user.get('id', 0)
        banned = "üö´ " if user.get('banned', False) else ""
        
        # T·∫°o n√∫t cho ng∆∞·ªùi d√πng ƒë·∫ßu ti√™n
        row_buttons.append(InlineKeyboardButton(
            f"{banned}{user_name}", 
            callback_data=f"admin_user_{user_id}"
        ))
        
        # N·∫øu c√≤n ng∆∞·ªùi d√πng th·ª© hai trong h√†ng
        if i + 1 < len(current_users):
            user = current_users[i + 1]
            user_name = user.get('username', 'Kh√¥ng t√™n')
            user_id = user.get('id', 0)
            banned = "üö´ " if user.get('banned', False) else ""
            
            # T·∫°o n√∫t cho ng∆∞·ªùi d√πng th·ª© hai
            row_buttons.append(InlineKeyboardButton(
                f"{banned}{user_name}", 
                callback_data=f"admin_user_{user_id}"
            ))
        
        # Th√™m h√†ng v√†o b√†n ph√≠m
        markup.row(*row_buttons)
    
    # N√∫t ƒëi·ªÅu h∆∞·ªõng trang
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è Tr∆∞·ªõc", callback_data=f"user_page_{page-1}"))
    
    if end_idx < len(users):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è Sau", callback_data=f"user_page_{page+1}"))
    
    if nav_buttons:
        markup.row(*nav_buttons)
    
    # N√∫t quay l·∫°i
    markup.row(InlineKeyboardButton("üîô Quay l·∫°i", callback_data="back_to_user_management"))
    
    return markup

def product_detail_keyboard(product_id: int, is_admin: bool = False) -> InlineKeyboardMarkup:
    """T·∫°o b√†n ph√≠m chi ti·∫øt s·∫£n ph·∫©m"""
    markup = InlineKeyboardMarkup()
    
    if is_admin:
        markup.row(
            InlineKeyboardButton("‚úèÔ∏è Ch·ªânh s·ª≠a", callback_data=f"edit_product_{product_id}"),
            InlineKeyboardButton("üóëÔ∏è X√≥a", callback_data=f"delete_product_{product_id}")
        )
        markup.row(
            InlineKeyboardButton("üì§ Upload t√†i kho·∫£n", callback_data=f"upload_product_{product_id}")
        )
    else:
        markup.row(
            InlineKeyboardButton("üõí Mua ngay", callback_data=f"buy_product_{product_id}")
        )
    
    # N√∫t quay l·∫°i
    if is_admin:
        markup.row(InlineKeyboardButton("üîô Quay l·∫°i", callback_data="back_to_product_list"))
    else:
        markup.row(InlineKeyboardButton("üîô Quay l·∫°i", callback_data="back_to_product_list"))
    
    return markup

def confirm_purchase_keyboard(product_id: int) -> InlineKeyboardMarkup:
    """T·∫°o b√†n ph√≠m x√°c nh·∫≠n mua h√†ng"""
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("‚úÖ X√°c nh·∫≠n", callback_data=f"confirm_purchase_{product_id}"),
        InlineKeyboardButton("‚ùå H·ªßy", callback_data=f"cancel_purchase")
    )
    return markup

def back_button(callback_data: str = "back_to_main") -> InlineKeyboardMarkup:
    """T·∫°o n√∫t quay l·∫°i"""
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("üîô Quay l·∫°i", callback_data=callback_data))
    return markup

def admin_panel_keyboard() -> InlineKeyboardMarkup:
    """T·∫°o b√†n ph√≠m panel qu·∫£n tr·ªã"""
    from database import Database
    db = Database()
    
    # L·∫•y c√†i ƒë·∫∑t hi·ªÉn th·ªã
    settings = db.get_visibility_settings()
    show_premium = settings.get('show_premium', True)
    
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng", callback_data="manage_users"),
        InlineKeyboardButton("üè∑Ô∏è Qu·∫£n l√Ω s·∫£n ph·∫©m", callback_data="manage_products")
    )
    markup.row(
        InlineKeyboardButton("üìä Th·ªëng k√™", callback_data="statistics"),
        InlineKeyboardButton("üîô Quay l·∫°i", callback_data="back_to_main")
    )
    
    # Th√™m n√∫t b·∫≠t/t·∫Øt hi·ªÉn th·ªã t√†i kho·∫£n tr·∫£ ph√≠
    status_text = "‚úÖ" if show_premium else "‚ùå"
    markup.row(
        InlineKeyboardButton(f"{status_text} Hi·ªÉn th·ªã t√†i kho·∫£n tr·∫£ ph√≠", callback_data="toggle_premium_visibility")
    )
    
    return markup

def confirm_delete_product_keyboard(product_id: int) -> InlineKeyboardMarkup:
    """T·∫°o b√†n ph√≠m x√°c nh·∫≠n x√≥a s·∫£n ph·∫©m"""
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("‚úÖ X√°c nh·∫≠n", callback_data=f"confirm_delete_product_{product_id}"),
        InlineKeyboardButton("‚ùå H·ªßy", callback_data="cancel_delete_product")
    )
    return markup

def user_list_navigation_keyboard(current_page: int, total_pages: int, search_query: str = '') -> InlineKeyboardMarkup:
    """T·∫°o b√†n ph√≠m ƒëi·ªÅu h∆∞·ªõng cho danh s√°ch ng∆∞·ªùi d√πng"""
    markup = InlineKeyboardMarkup(row_width=5)
    buttons = []
    
    # N√∫t t√¨m ki·∫øm
    search_button = InlineKeyboardButton("üîç T√¨m ki·∫øm", callback_data="user_list_search")
    
    # N√∫t l√†m m·ªõi
    refresh_button = InlineKeyboardButton("üîÑ L√†m m·ªõi", callback_data="user_list_refresh")
    
    # N√∫t ƒëi·ªÅu h∆∞·ªõng trang
    if total_pages > 1:
        # N√∫t trang ƒë·∫ßu
        if current_page > 0:
            buttons.append(InlineKeyboardButton("‚èÆÔ∏è", callback_data="user_list_page_0"))
        
        # N√∫t trang tr∆∞·ªõc
        if current_page > 0:
            buttons.append(InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"user_list_page_{current_page-1}"))
        
        # N√∫t trang hi·ªán t·∫°i
        buttons.append(InlineKeyboardButton(f"{current_page+1}/{total_pages}", callback_data="noop"))
        
        # N√∫t trang sau
        if current_page < total_pages - 1:
            buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"user_list_page_{current_page+1}"))
        
        # N√∫t trang cu·ªëi
        if current_page < total_pages - 1:
            buttons.append(InlineKeyboardButton("‚è≠Ô∏è", callback_data=f"user_list_page_{total_pages-1}"))
    
    # Th√™m c√°c n√∫t v√†o b√†n ph√≠m
    if buttons:
        markup.add(*buttons)
    
    # Th√™m n√∫t t√¨m ki·∫øm v√† l√†m m·ªõi
    markup.add(search_button, refresh_button)
    
    # Hi·ªÉn th·ªã tr·∫°ng th√°i t√¨m ki·∫øm n·∫øu c√≥
    if search_query:
        markup.add(InlineKeyboardButton(f"üîç ƒêang t√¨m: '{search_query}'", callback_data="noop"))
    
    # N√∫t quay l·∫°i
    markup.add(InlineKeyboardButton("üîô Quay l·∫°i", callback_data="admin_panel"))
    
    return markup

def purchase_history_keyboard(purchases: List[Dict[str, Any]], page: int = 0, back_to: str = "back_to_main") -> InlineKeyboardMarkup:
    """T·∫°o b√†n ph√≠m danh s√°ch t√†i kho·∫£n ƒë√£ mua"""
    markup = InlineKeyboardMarkup()
    
    # Hi·ªÉn th·ªã 5 t√†i kho·∫£n m·ªói trang
    items_per_page = 5
    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, len(purchases))
    
    for i in range(start_idx, end_idx):
        purchase = purchases[i]
        product_name = purchase.get('product_name', 'Kh√¥ng t√™n')
        purchase_id = i  # S·ª≠ d·ª•ng index l√†m ID
        
        # Hi·ªÉn th·ªã t√™n s·∫£n ph·∫©m v√† th·ªùi gian mua
        timestamp = purchase.get('timestamp', '')
        if timestamp:
            try:
                import datetime
                dt = datetime.datetime.fromisoformat(timestamp)
                date_str = dt.strftime('%d/%m/%Y')
            except:
                date_str = ''
        else:
            date_str = ''
        
        button_text = f"{product_name}"
        if date_str:
            button_text += f" ({date_str})"
        
        markup.row(InlineKeyboardButton(
            button_text, 
            callback_data=f"view_purchase_{purchase_id}"
        ))
    
    # N√∫t ƒëi·ªÅu h∆∞·ªõng trang
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è Tr∆∞·ªõc", callback_data=f"purchase_page_{page-1}"))
    
    if end_idx < len(purchases):
        nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è Sau", callback_data=f"purchase_page_{page+1}"))
    
    if nav_buttons:
        markup.row(*nav_buttons)
    
    # N√∫t quay l·∫°i
    markup.row(InlineKeyboardButton("üîô Quay l·∫°i", callback_data=back_to))
    
    return markup

def account_menu() -> InlineKeyboardMarkup:
    """T·∫°o b√†n ph√≠m menu t√†i kho·∫£n"""
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üí∞ N·∫°p ti·ªÅn", callback_data="deposit_money"),
        InlineKeyboardButton("üõí T√†i kho·∫£n ƒë√£ mua", callback_data="my_purchases")
    )
    markup.row(
        InlineKeyboardButton("üîô Quay l·∫°i", callback_data="back_to_main")
    )
    return markup

def deposit_amount_keyboard() -> InlineKeyboardMarkup:
    """T·∫°o b√†n ph√≠m ch·ªçn s·ªë ti·ªÅn n·∫°p"""
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("50,000 VND", callback_data="deposit_amount_50000"),
        InlineKeyboardButton("100,000 VND", callback_data="deposit_amount_100000")
    )
    markup.row(
        InlineKeyboardButton("200,000 VND", callback_data="deposit_amount_200000"),
        InlineKeyboardButton("500,000 VND", callback_data="deposit_amount_500000")
    )
    markup.row(
        InlineKeyboardButton("1,000,000 VND", callback_data="deposit_amount_1000000")
    )
    markup.row(
        InlineKeyboardButton("üîô Quay l·∫°i", callback_data="my_account")
    )
    return markup

def payment_contact_keyboard() -> InlineKeyboardMarkup:
    """T·∫°o b√†n ph√≠m li√™n h·ªá admin v√† quay l·∫°i cho trang thanh to√°n"""
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üë®‚Äçüíº Li√™n h·ªá Admin", url="https://t.me/ngochacoder")
    )
    return markup 